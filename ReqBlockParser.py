# Generated from ReqBlock.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3m")
        buf.write("\u0464\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\3\2\7\2\u00c6\n\2\f\2\16\2\u00c9")
        buf.write("\13\2\3\2\3\2\3\2\3\2\5\2\u00cf\n\2\3\2\3\2\7\2\u00d3")
        buf.write("\n\2\f\2\16\2\u00d6\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\7\3\u00ef\n\3\f\3\16\3\u00f2\13\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u0101\n\4")
        buf.write("\f\4\16\4\u0104\13\4\3\5\3\5\3\5\5\5\u0109\n\5\3\5\3\5")
        buf.write("\7\5\u010d\n\5\f\5\16\5\u0110\13\5\3\5\5\5\u0113\n\5\3")
        buf.write("\6\3\6\3\6\7\6\u0118\n\6\f\6\16\6\u011b\13\6\3\7\5\7\u011e")
        buf.write("\n\7\3\7\5\7\u0121\n\7\3\7\3\7\7\7\u0125\n\7\f\7\16\7")
        buf.write("\u0128\13\7\3\7\5\7\u012b\n\7\3\b\3\b\5\b\u012f\n\b\3")
        buf.write("\b\3\b\6\b\u0133\n\b\r\b\16\b\u0134\3\t\3\t\5\t\u0139")
        buf.write("\n\t\3\t\3\t\6\t\u013d\n\t\r\t\16\t\u013e\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u0145\n\n\3\13\3\13\3\13\3\13\5\13\u014b\n\13")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u0151\n\f\3\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0158\n\r\3\16\3\16\3\16\5\16\u015d\n\16\3\16\3\16\7")
        buf.write("\16\u0161\n\16\f\16\16\16\u0164\13\16\3\17\3\17\5\17\u0168")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u0179\n\20\3\21\3\21\3")
        buf.write("\22\3\22\3\23\3\23\3\23\3\23\3\23\5\23\u0184\n\23\3\23")
        buf.write("\7\23\u0187\n\23\f\23\16\23\u018a\13\23\3\23\5\23\u018d")
        buf.write("\n\23\3\23\5\23\u0190\n\23\3\24\3\24\3\24\5\24\u0195\n")
        buf.write("\24\3\24\3\24\7\24\u0199\n\24\f\24\16\24\u019c\13\24\3")
        buf.write("\25\3\25\6\25\u01a0\n\25\r\25\16\25\u01a1\3\25\3\25\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u01bd\n\26\3\27\3\27\3\27\3\27\3\27\5\27\u01c4")
        buf.write("\n\27\3\27\3\27\5\27\u01c8\n\27\3\27\3\27\7\27\u01cc\n")
        buf.write("\27\f\27\16\27\u01cf\13\27\3\27\5\27\u01d2\n\27\3\27\5")
        buf.write("\27\u01d5\n\27\3\30\3\30\3\30\5\30\u01da\n\30\3\30\3\30")
        buf.write("\5\30\u01de\n\30\3\30\3\30\7\30\u01e2\n\30\f\30\16\30")
        buf.write("\u01e5\13\30\3\30\5\30\u01e8\n\30\3\31\3\31\6\31\u01ec")
        buf.write("\n\31\r\31\16\31\u01ed\3\31\3\31\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u0203\n\32\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u020a\n\33\3\33\3\33\7\33\u020e\n\33\f\33\16\33\u0211")
        buf.write("\13\33\3\33\5\33\u0214\n\33\3\34\3\34\3\34\3\34\7\34\u021a")
        buf.write("\n\34\f\34\16\34\u021d\13\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\5\35\u0227\n\35\3\35\3\35\5\35\u022b\n")
        buf.write("\35\3\35\3\35\7\35\u022f\n\35\f\35\16\35\u0232\13\35\3")
        buf.write("\35\5\35\u0235\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\6\36\u0243\n\36\r\36\16\36\u0244")
        buf.write("\3\36\3\36\3\36\5\36\u024a\n\36\3\36\3\36\7\36\u024e\n")
        buf.write("\36\f\36\16\36\u0251\13\36\3\36\5\36\u0254\n\36\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u025a\n\37\3\37\5\37\u025d\n\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \5 \u0265\n \3 \3 \3!\3!\3!\3!\3!\3\"")
        buf.write("\3\"\5\"\u0270\n\"\3\"\3\"\3\"\5\"\u0275\n\"\5\"\u0277")
        buf.write("\n\"\3\"\5\"\u027a\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u0281\n")
        buf.write("\"\f\"\16\"\u0284\13\"\3\"\5\"\u0287\n\"\3#\3#\5#\u028b")
        buf.write("\n#\3#\3#\3#\5#\u0290\n#\5#\u0292\n#\3#\5#\u0295\n#\3")
        buf.write("#\5#\u0298\n#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u02a2\n#\f#\16")
        buf.write("#\u02a5\13#\3$\3$\5$\u02a9\n$\3%\3%\5%\u02ad\n%\3&\3&")
        buf.write("\5&\u02b1\n&\3\'\3\'\5\'\u02b5\n\'\3(\3(\5(\u02b9\n(\3")
        buf.write(")\3)\5)\u02bd\n)\3*\3*\5*\u02c1\n*\3+\3+\5+\u02c5\n+\3")
        buf.write(",\3,\5,\u02c9\n,\3-\3-\5-\u02cd\n-\3.\3.\5.\u02d1\n.\3")
        buf.write("/\3/\5/\u02d5\n/\3\60\3\60\5\60\u02d9\n\60\3\61\3\61\5")
        buf.write("\61\u02dd\n\61\3\62\3\62\5\62\u02e1\n\62\3\63\3\63\3\64")
        buf.write("\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3\67\5\67\u02ee\n")
        buf.write("\67\38\38\38\58\u02f3\n8\39\39\69\u02f7\n9\r9\169\u02f8")
        buf.write("\3:\3:\3:\5:\u02fe\n:\3;\3;\3;\3;\5;\u0304\n;\3;\3;\5")
        buf.write(";\u0308\n;\3;\5;\u030b\n;\3;\7;\u030e\n;\f;\16;\u0311")
        buf.write("\13;\3;\5;\u0314\n;\3<\3<\3<\5<\u0319\n<\3<\5<\u031c\n")
        buf.write("<\3=\3=\3=\5=\u0321\n=\3=\5=\u0324\n=\3>\3>\3>\3>\5>\u032a")
        buf.write("\n>\3?\3?\3?\3?\3?\3?\3?\3?\7?\u0334\n?\f?\16?\u0337\13")
        buf.write("?\3?\3?\5?\u033b\n?\3@\3@\3@\5@\u0340\n@\3A\3A\3A\3A\3")
        buf.write("A\5A\u0347\nA\3B\3B\3B\3B\3B\3B\3B\3B\7B\u0351\nB\fB\16")
        buf.write("B\u0354\13B\3B\5B\u0357\nB\3B\5B\u035a\nB\3C\3C\3C\5C")
        buf.write("\u035f\nC\3D\3D\3D\3D\5D\u0365\nD\3D\7D\u0368\nD\fD\16")
        buf.write("D\u036b\13D\3D\5D\u036e\nD\3E\3E\3E\3E\5E\u0374\nE\3E")
        buf.write("\7E\u0377\nE\fE\16E\u037a\13E\3E\5E\u037d\nE\3F\3F\3F")
        buf.write("\3F\5F\u0383\nF\3F\5F\u0386\nF\3F\7F\u0389\nF\fF\16F\u038c")
        buf.write("\13F\3F\5F\u038f\nF\3G\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\7")
        buf.write("H\u039c\nH\fH\16H\u039f\13H\3H\3H\5H\u03a3\nH\3H\7H\u03a6")
        buf.write("\nH\fH\16H\u03a9\13H\3I\3I\3I\5I\u03ae\nI\3I\7I\u03b1")
        buf.write("\nI\fI\16I\u03b4\13I\3I\5I\u03b7\nI\3I\5I\u03ba\nI\3J")
        buf.write("\3J\3J\5J\u03bf\nJ\3K\3K\3K\3K\5K\u03c5\nK\3K\5K\u03c8")
        buf.write("\nK\3K\7K\u03cb\nK\fK\16K\u03ce\13K\3L\3L\3L\3L\3L\3L")
        buf.write("\5L\u03d6\nL\3L\5L\u03d9\nL\3M\3M\3M\5M\u03de\nM\3N\3")
        buf.write("N\3N\5N\u03e3\nN\3O\3O\3O\3O\3P\3P\3Q\3Q\6Q\u03ed\nQ\r")
        buf.write("Q\16Q\u03ee\3R\3R\3S\3S\3S\5S\u03f6\nS\6S\u03f8\nS\rS")
        buf.write("\16S\u03f9\3T\3T\3T\3T\7T\u0400\nT\fT\16T\u0403\13T\3")
        buf.write("U\3U\6U\u0407\nU\rU\16U\u0408\3V\3V\3V\5V\u040e\nV\3W")
        buf.write("\3W\3W\5W\u0413\nW\3W\5W\u0416\nW\3W\5W\u0419\nW\3X\3")
        buf.write("X\3Y\3Y\3Z\3Z\3[\3[\3[\5[\u0424\n[\3\\\3\\\3\\\3\\\3\\")
        buf.write("\7\\\u042b\n\\\f\\\16\\\u042e\13\\\3\\\5\\\u0431\n\\\3")
        buf.write("\\\5\\\u0434\n\\\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\5^\u0445\n^\3^\3^\3^\5^\u044a\n^\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\7^\u0457\n^\f^\16^\u045a\13^\3_\3")
        buf.write("_\3`\3`\3a\3a\3b\3b\3b\4\u00c7\u00d4\3\u00bac\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\2\17\3\2DE\3\2GH\3\2\22\23\4")
        buf.write("\2\30\30\32\32\4\2\3\3RR\3\289\3\2;<\4\2\33\33??\4\2O")
        buf.write("PRR\3\2MN\6\2JK\\^abee\4\2NNZZ\4\2MMgg\2\u0521\2\u00c7")
        buf.write("\3\2\2\2\4\u00f0\3\2\2\2\6\u0102\3\2\2\2\b\u0105\3\2\2")
        buf.write("\2\n\u0114\3\2\2\2\f\u011d\3\2\2\2\16\u0132\3\2\2\2\20")
        buf.write("\u013c\3\2\2\2\22\u0140\3\2\2\2\24\u0146\3\2\2\2\26\u0150")
        buf.write("\3\2\2\2\30\u0157\3\2\2\2\32\u0159\3\2\2\2\34\u0165\3")
        buf.write("\2\2\2\36\u0178\3\2\2\2 \u017a\3\2\2\2\"\u017c\3\2\2\2")
        buf.write("$\u017e\3\2\2\2&\u0191\3\2\2\2(\u019d\3\2\2\2*\u01bc\3")
        buf.write("\2\2\2,\u01be\3\2\2\2.\u01d6\3\2\2\2\60\u01e9\3\2\2\2")
        buf.write("\62\u0202\3\2\2\2\64\u0204\3\2\2\2\66\u0215\3\2\2\28\u021e")
        buf.write("\3\2\2\2:\u0238\3\2\2\2<\u0255\3\2\2\2>\u0260\3\2\2\2")
        buf.write("@\u0268\3\2\2\2B\u026f\3\2\2\2D\u028a\3\2\2\2F\u02a6\3")
        buf.write("\2\2\2H\u02aa\3\2\2\2J\u02ae\3\2\2\2L\u02b2\3\2\2\2N\u02b6")
        buf.write("\3\2\2\2P\u02ba\3\2\2\2R\u02be\3\2\2\2T\u02c2\3\2\2\2")
        buf.write("V\u02c6\3\2\2\2X\u02ca\3\2\2\2Z\u02ce\3\2\2\2\\\u02d2")
        buf.write("\3\2\2\2^\u02d6\3\2\2\2`\u02da\3\2\2\2b\u02de\3\2\2\2")
        buf.write("d\u02e2\3\2\2\2f\u02e4\3\2\2\2h\u02e6\3\2\2\2j\u02e8\3")
        buf.write("\2\2\2l\u02ea\3\2\2\2n\u02ef\3\2\2\2p\u02f6\3\2\2\2r\u02fa")
        buf.write("\3\2\2\2t\u02ff\3\2\2\2v\u0315\3\2\2\2x\u031d\3\2\2\2")
        buf.write("z\u0325\3\2\2\2|\u032b\3\2\2\2~\u033c\3\2\2\2\u0080\u0341")
        buf.write("\3\2\2\2\u0082\u0348\3\2\2\2\u0084\u035b\3\2\2\2\u0086")
        buf.write("\u0360\3\2\2\2\u0088\u036f\3\2\2\2\u008a\u037e\3\2\2\2")
        buf.write("\u008c\u0390\3\2\2\2\u008e\u0393\3\2\2\2\u0090\u03aa\3")
        buf.write("\2\2\2\u0092\u03bb\3\2\2\2\u0094\u03c0\3\2\2\2\u0096\u03cf")
        buf.write("\3\2\2\2\u0098\u03da\3\2\2\2\u009a\u03df\3\2\2\2\u009c")
        buf.write("\u03e4\3\2\2\2\u009e\u03e8\3\2\2\2\u00a0\u03ec\3\2\2\2")
        buf.write("\u00a2\u03f0\3\2\2\2\u00a4\u03f7\3\2\2\2\u00a6\u03fb\3")
        buf.write("\2\2\2\u00a8\u0406\3\2\2\2\u00aa\u040a\3\2\2\2\u00ac\u040f")
        buf.write("\3\2\2\2\u00ae\u041a\3\2\2\2\u00b0\u041c\3\2\2\2\u00b2")
        buf.write("\u041e\3\2\2\2\u00b4\u0420\3\2\2\2\u00b6\u0425\3\2\2\2")
        buf.write("\u00b8\u0435\3\2\2\2\u00ba\u0449\3\2\2\2\u00bc\u045b\3")
        buf.write("\2\2\2\u00be\u045d\3\2\2\2\u00c0\u045f\3\2\2\2\u00c2\u0461")
        buf.write("\3\2\2\2\u00c4\u00c6\13\2\2\2\u00c5\u00c4\3\2\2\2\u00c6")
        buf.write("\u00c9\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c7\u00c5\3\2\2\2")
        buf.write("\u00c8\u00ca\3\2\2\2\u00c9\u00c7\3\2\2\2\u00ca\u00cb\7")
        buf.write("\24\2\2\u00cb\u00ce\5\4\3\2\u00cc\u00cd\7k\2\2\u00cd\u00cf")
        buf.write("\5\6\4\2\u00ce\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf")
        buf.write("\u00d0\3\2\2\2\u00d0\u00d4\7\34\2\2\u00d1\u00d3\13\2\2")
        buf.write("\2\u00d2\u00d1\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d5")
        buf.write("\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00d7\3\2\2\2\u00d6")
        buf.write("\u00d4\3\2\2\2\u00d7\u00d8\7\2\2\3\u00d8\3\3\2\2\2\u00d9")
        buf.write("\u00ef\5B\"\2\u00da\u00ef\5$\23\2\u00db\u00ef\5F$\2\u00dc")
        buf.write("\u00ef\5H%\2\u00dd\u00ef\5J&\2\u00de\u00ef\5L\'\2\u00df")
        buf.write("\u00ef\5N(\2\u00e0\u00ef\5P)\2\u00e1\u00ef\5R*\2\u00e2")
        buf.write("\u00ef\5T+\2\u00e3\u00ef\5V,\2\u00e4\u00ef\5X-\2\u00e5")
        buf.write("\u00ef\5Z.\2\u00e6\u00ef\5\\/\2\u00e7\u00ef\5^\60\2\u00e8")
        buf.write("\u00ef\5\u009eP\2\u00e9\u00ef\5\u00a0Q\2\u00ea\u00ef\5")
        buf.write("\u00a4S\2\u00eb\u00ef\5b\62\2\u00ec\u00ef\5\u00aeX\2\u00ed")
        buf.write("\u00ef\5\u00b6\\\2\u00ee\u00d9\3\2\2\2\u00ee\u00da\3\2")
        buf.write("\2\2\u00ee\u00db\3\2\2\2\u00ee\u00dc\3\2\2\2\u00ee\u00dd")
        buf.write("\3\2\2\2\u00ee\u00de\3\2\2\2\u00ee\u00df\3\2\2\2\u00ee")
        buf.write("\u00e0\3\2\2\2\u00ee\u00e1\3\2\2\2\u00ee\u00e2\3\2\2\2")
        buf.write("\u00ee\u00e3\3\2\2\2\u00ee\u00e4\3\2\2\2\u00ee\u00e5\3")
        buf.write("\2\2\2\u00ee\u00e6\3\2\2\2\u00ee\u00e7\3\2\2\2\u00ee\u00e8")
        buf.write("\3\2\2\2\u00ee\u00e9\3\2\2\2\u00ee\u00ea\3\2\2\2\u00ee")
        buf.write("\u00eb\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ed\3\2\2\2")
        buf.write("\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1\3")
        buf.write("\2\2\2\u00f1\5\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u0101")
        buf.write("\5<\37\2\u00f4\u0101\5> \2\u00f5\u0101\5D#\2\u00f6\u0101")
        buf.write("\5,\27\2\u00f7\u0101\5\34\17\2\u00f8\u0101\5l\67\2\u00f9")
        buf.write("\u0101\5\64\33\2\u00fa\u0101\5r:\2\u00fb\u0101\5\u0096")
        buf.write("L\2\u00fc\u0101\5\u00a0Q\2\u00fd\u0101\5\u00a4S\2\u00fe")
        buf.write("\u0101\5\u00a6T\2\u00ff\u0101\5:\36\2\u0100\u00f3\3\2")
        buf.write("\2\2\u0100\u00f4\3\2\2\2\u0100\u00f5\3\2\2\2\u0100\u00f6")
        buf.write("\3\2\2\2\u0100\u00f7\3\2\2\2\u0100\u00f8\3\2\2\2\u0100")
        buf.write("\u00f9\3\2\2\2\u0100\u00fa\3\2\2\2\u0100\u00fb\3\2\2\2")
        buf.write("\u0100\u00fc\3\2\2\2\u0100\u00fd\3\2\2\2\u0100\u00fe\3")
        buf.write("\2\2\2\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100")
        buf.write("\3\2\2\2\u0102\u0103\3\2\2\2\u0103\7\3\2\2\2\u0104\u0102")
        buf.write("\3\2\2\2\u0105\u0108\5\f\7\2\u0106\u0109\5\16\b\2\u0107")
        buf.write("\u0109\5\20\t\2\u0108\u0106\3\2\2\2\u0108\u0107\3\2\2")
        buf.write("\2\u0108\u0109\3\2\2\2\u0109\u010e\3\2\2\2\u010a\u010d")
        buf.write("\5\22\n\2\u010b\u010d\5\24\13\2\u010c\u010a\3\2\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e\3")
        buf.write("\2\2\2\u0111\u0113\5\u00a0Q\2\u0112\u0111\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113\t\3\2\2\2\u0114\u0115\5\30\r\2\u0115")
        buf.write("\u0119\5\26\f\2\u0116\u0118\5\u00b8]\2\u0117\u0116\3\2")
        buf.write("\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a")
        buf.write("\3\2\2\2\u011a\13\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011e")
        buf.write("\5h\65\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u0120\3\2\2\2\u011f\u0121\5\30\r\2\u0120\u011f\3\2\2")
        buf.write("\2\u0120\u0121\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0126")
        buf.write("\5\26\f\2\u0123\u0125\5\u00b8]\2\u0124\u0123\3\2\2\2\u0125")
        buf.write("\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2")
        buf.write("\u0127\u012a\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u012b\5")
        buf.write("f\64\2\u012a\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\r")
        buf.write("\3\2\2\2\u012c\u012e\5\u00c2b\2\u012d\u012f\5f\64\2\u012e")
        buf.write("\u012d\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0131\5\f\7\2\u0131\u0133\3\2\2\2\u0132\u012c\3")
        buf.write("\2\2\2\u0133\u0134\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135")
        buf.write("\3\2\2\2\u0135\17\3\2\2\2\u0136\u0138\5\u00c0a\2\u0137")
        buf.write("\u0139\5f\64\2\u0138\u0137\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u013a\3\2\2\2\u013a\u013b\5\f\7\2\u013b\u013d\3")
        buf.write("\2\2\2\u013c\u0136\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013c")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\21\3\2\2\2\u0140\u0141")
        buf.write("\7\36\2\2\u0141\u0144\5\f\7\2\u0142\u0145\5\16\b\2\u0143")
        buf.write("\u0145\5\20\t\2\u0144\u0142\3\2\2\2\u0144\u0143\3\2\2")
        buf.write("\2\u0144\u0145\3\2\2\2\u0145\23\3\2\2\2\u0146\u0147\7")
        buf.write("!\2\2\u0147\u014a\5\f\7\2\u0148\u014b\5\16\b\2\u0149\u014b")
        buf.write("\5\20\t\2\u014a\u0148\3\2\2\2\u014a\u0149\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\25\3\2\2\2\u014c\u0151\5\u00b2Z\2")
        buf.write("\u014d\u0151\7O\2\2\u014e\u0151\7P\2\2\u014f\u0151\7Q")
        buf.write("\2\2\u0150\u014c\3\2\2\2\u0150\u014d\3\2\2\2\u0150\u014e")
        buf.write("\3\2\2\2\u0150\u014f\3\2\2\2\u0151\27\3\2\2\2\u0152\u0158")
        buf.write("\5\u00b2Z\2\u0153\u0158\5\u00b0Y\2\u0154\u0158\7Q\2\2")
        buf.write("\u0155\u0158\7\26\2\2\u0156\u0158\7J\2\2\u0157\u0152\3")
        buf.write("\2\2\2\u0157\u0153\3\2\2\2\u0157\u0154\3\2\2\2\u0157\u0155")
        buf.write("\3\2\2\2\u0157\u0156\3\2\2\2\u0158\31\3\2\2\2\u0159\u0162")
        buf.write("\5\b\5\2\u015a\u015c\5\36\20\2\u015b\u015d\5\u00b4[\2")
        buf.write("\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0161\3")
        buf.write("\2\2\2\u015e\u0161\5\u00a0Q\2\u015f\u0161\5\u00a4S\2\u0160")
        buf.write("\u015a\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u015f\3\2\2\2")
        buf.write("\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3")
        buf.write("\2\2\2\u0163\33\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0167")
        buf.write("\5\32\16\2\u0166\u0168\5r:\2\u0167\u0166\3\2\2\2\u0167")
        buf.write("\u0168\3\2\2\2\u0168\35\3\2\2\2\u0169\u0179\5z>\2\u016a")
        buf.write("\u0179\5|?\2\u016b\u0179\5~@\2\u016c\u0179\5\u0082B\2")
        buf.write("\u016d\u0179\5\u0084C\2\u016e\u0179\5\u0086D\2\u016f\u0179")
        buf.write("\5\u0088E\2\u0170\u0179\5\u008aF\2\u0171\u0179\5\u008c")
        buf.write("G\2\u0172\u0179\5\u008eH\2\u0173\u0179\5\u0092J\2\u0174")
        buf.write("\u0179\5\u00a0Q\2\u0175\u0179\5\u00a8U\2\u0176\u0179\5")
        buf.write("\u00aaV\2\u0177\u0179\5\u00acW\2\u0178\u0169\3\2\2\2\u0178")
        buf.write("\u016a\3\2\2\2\u0178\u016b\3\2\2\2\u0178\u016c\3\2\2\2")
        buf.write("\u0178\u016d\3\2\2\2\u0178\u016e\3\2\2\2\u0178\u016f\3")
        buf.write("\2\2\2\u0178\u0170\3\2\2\2\u0178\u0171\3\2\2\2\u0178\u0172")
        buf.write("\3\2\2\2\u0178\u0173\3\2\2\2\u0178\u0174\3\2\2\2\u0178")
        buf.write("\u0175\3\2\2\2\u0178\u0176\3\2\2\2\u0178\u0177\3\2\2\2")
        buf.write("\u0179\37\3\2\2\2\u017a\u017b\t\2\2\2\u017b!\3\2\2\2\u017c")
        buf.write("\u017d\t\3\2\2\u017d#\3\2\2\2\u017e\u017f\7I\2\2\u017f")
        buf.write("\u0180\5\u00ba^\2\u0180\u0183\7L\2\2\u0181\u0184\5*\26")
        buf.write("\2\u0182\u0184\5(\25\2\u0183\u0181\3\2\2\2\u0183\u0182")
        buf.write("\3\2\2\2\u0184\u0188\3\2\2\2\u0185\u0187\5\u00a0Q\2\u0186")
        buf.write("\u0185\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3")
        buf.write("\2\2\2\u018b\u018d\5r:\2\u018c\u018b\3\2\2\2\u018c\u018d")
        buf.write("\3\2\2\2\u018d\u018f\3\2\2\2\u018e\u0190\5&\24\2\u018f")
        buf.write("\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190%\3\2\2\2\u0191")
        buf.write("\u0194\7F\2\2\u0192\u0195\5*\26\2\u0193\u0195\5(\25\2")
        buf.write("\u0194\u0192\3\2\2\2\u0194\u0193\3\2\2\2\u0195\u019a\3")
        buf.write("\2\2\2\u0196\u0199\5\u00a0Q\2\u0197\u0199\5r:\2\u0198")
        buf.write("\u0196\3\2\2\2\u0198\u0197\3\2\2\2\u0199\u019c\3\2\2\2")
        buf.write("\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\'\3\2\2")
        buf.write("\2\u019c\u019a\3\2\2\2\u019d\u019f\5 \21\2\u019e\u01a0")
        buf.write("\5*\26\2\u019f\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a4\5\"\22\2\u01a4)\3\2\2\2\u01a5\u01bd\5<\37")
        buf.write("\2\u01a6\u01bd\5> \2\u01a7\u01bd\5B\"\2\u01a8\u01bd\5")
        buf.write("l\67\2\u01a9\u01bd\5$\23\2\u01aa\u01bd\5F$\2\u01ab\u01bd")
        buf.write("\5H%\2\u01ac\u01bd\5J&\2\u01ad\u01bd\5L\'\2\u01ae\u01bd")
        buf.write("\5P)\2\u01af\u01bd\5R*\2\u01b0\u01bd\5T+\2\u01b1\u01bd")
        buf.write("\5V,\2\u01b2\u01bd\5X-\2\u01b3\u01bd\5Z.\2\u01b4\u01bd")
        buf.write("\5\\/\2\u01b5\u01bd\5^\60\2\u01b6\u01bd\5`\61\2\u01b7")
        buf.write("\u01bd\5\u0096L\2\u01b8\u01bd\5\u00a0Q\2\u01b9\u01bd\5")
        buf.write("\u00a4S\2\u01ba\u01bd\5\u00a6T\2\u01bb\u01bd\5b\62\2\u01bc")
        buf.write("\u01a5\3\2\2\2\u01bc\u01a6\3\2\2\2\u01bc\u01a7\3\2\2\2")
        buf.write("\u01bc\u01a8\3\2\2\2\u01bc\u01a9\3\2\2\2\u01bc\u01aa\3")
        buf.write("\2\2\2\u01bc\u01ab\3\2\2\2\u01bc\u01ac\3\2\2\2\u01bc\u01ad")
        buf.write("\3\2\2\2\u01bc\u01ae\3\2\2\2\u01bc\u01af\3\2\2\2\u01bc")
        buf.write("\u01b0\3\2\2\2\u01bc\u01b1\3\2\2\2\u01bc\u01b2\3\2\2\2")
        buf.write("\u01bc\u01b3\3\2\2\2\u01bc\u01b4\3\2\2\2\u01bc\u01b5\3")
        buf.write("\2\2\2\u01bc\u01b6\3\2\2\2\u01bc\u01b7\3\2\2\2\u01bc\u01b8")
        buf.write("\3\2\2\2\u01bc\u01b9\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc")
        buf.write("\u01bb\3\2\2\2\u01bd+\3\2\2\2\u01be\u01bf\7I\2\2\u01bf")
        buf.write("\u01c0\5\u00ba^\2\u01c0\u01c3\7L\2\2\u01c1\u01c4\5\62")
        buf.write("\32\2\u01c2\u01c4\5\60\31\2\u01c3\u01c1\3\2\2\2\u01c3")
        buf.write("\u01c2\3\2\2\2\u01c4\u01cd\3\2\2\2\u01c5\u01c7\5\36\20")
        buf.write("\2\u01c6\u01c8\5\u00b4[\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u01cc\3\2\2\2\u01c9\u01cc\5\u00a0Q\2\u01ca")
        buf.write("\u01cc\5\u00a4S\2\u01cb\u01c5\3\2\2\2\u01cb\u01c9\3\2")
        buf.write("\2\2\u01cb\u01ca\3\2\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb")
        buf.write("\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01d0\u01d2\5r:\2\u01d1\u01d0\3\2\2\2\u01d1")
        buf.write("\u01d2\3\2\2\2\u01d2\u01d4\3\2\2\2\u01d3\u01d5\5.\30\2")
        buf.write("\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5-\3\2\2")
        buf.write("\2\u01d6\u01d9\7F\2\2\u01d7\u01da\5\62\32\2\u01d8\u01da")
        buf.write("\5\60\31\2\u01d9\u01d7\3\2\2\2\u01d9\u01d8\3\2\2\2\u01da")
        buf.write("\u01e3\3\2\2\2\u01db\u01dd\5\36\20\2\u01dc\u01de\5\u00b4")
        buf.write("[\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e2")
        buf.write("\3\2\2\2\u01df\u01e2\5\u00a0Q\2\u01e0\u01e2\5\u00a4S\2")
        buf.write("\u01e1\u01db\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e0\3")
        buf.write("\2\2\2\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4")
        buf.write("\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6")
        buf.write("\u01e8\5r:\2\u01e7\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8")
        buf.write("/\3\2\2\2\u01e9\u01eb\5 \21\2\u01ea\u01ec\5\62\32\2\u01eb")
        buf.write("\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01eb\3\2\2\2")
        buf.write("\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\5")
        buf.write("\"\22\2\u01f0\61\3\2\2\2\u01f1\u0203\5,\27\2\u01f2\u0203")
        buf.write("\5<\37\2\u01f3\u0203\5> \2\u01f4\u0203\5D#\2\u01f5\u0203")
        buf.write("\5\34\17\2\u01f6\u0203\5l\67\2\u01f7\u0203\5\64\33\2\u01f8")
        buf.write("\u0203\5\u0082B\2\u01f9\u0203\5\u0086D\2\u01fa\u0203\5")
        buf.write("\u0088E\2\u01fb\u0203\5\u008cG\2\u01fc\u0203\5\u0096L")
        buf.write("\2\u01fd\u0203\5\u00a0Q\2\u01fe\u0203\5\u00a4S\2\u01ff")
        buf.write("\u0203\5\u00a6T\2\u0200\u0203\5\u00acW\2\u0201\u0203\5")
        buf.write(":\36\2\u0202\u01f1\3\2\2\2\u0202\u01f2\3\2\2\2\u0202\u01f3")
        buf.write("\3\2\2\2\u0202\u01f4\3\2\2\2\u0202\u01f5\3\2\2\2\u0202")
        buf.write("\u01f6\3\2\2\2\u0202\u01f7\3\2\2\2\u0202\u01f8\3\2\2\2")
        buf.write("\u0202\u01f9\3\2\2\2\u0202\u01fa\3\2\2\2\u0202\u01fb\3")
        buf.write("\2\2\2\u0202\u01fc\3\2\2\2\u0202\u01fd\3\2\2\2\u0202\u01fe")
        buf.write("\3\2\2\2\u0202\u01ff\3\2\2\2\u0202\u0200\3\2\2\2\u0202")
        buf.write("\u0201\3\2\2\2\u0203\63\3\2\2\2\u0204\u0205\7O\2\2\u0205")
        buf.write("\u0206\7\37\2\2\u0206\u020f\5\66\34\2\u0207\u0209\5\36")
        buf.write("\20\2\u0208\u020a\5\u00b4[\2\u0209\u0208\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020e\3\2\2\2\u020b\u020e\5\u00a0")
        buf.write("Q\2\u020c\u020e\5\u00a4S\2\u020d\u0207\3\2\2\2\u020d\u020b")
        buf.write("\3\2\2\2\u020d\u020c\3\2\2\2\u020e\u0211\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0213\3\2\2\2")
        buf.write("\u0211\u020f\3\2\2\2\u0212\u0214\5r:\2\u0213\u0212\3\2")
        buf.write("\2\2\u0213\u0214\3\2\2\2\u0214\65\3\2\2\2\u0215\u021b")
        buf.write("\58\35\2\u0216\u0217\5\u00bc_\2\u0217\u0218\58\35\2\u0218")
        buf.write("\u021a\3\2\2\2\u0219\u0216\3\2\2\2\u021a\u021d\3\2\2\2")
        buf.write("\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\67\3\2")
        buf.write("\2\2\u021d\u021b\3\2\2\2\u021e\u0226\7c\2\2\u021f\u0227")
        buf.write("\5<\37\2\u0220\u0227\5> \2\u0221\u0227\5D#\2\u0222\u0227")
        buf.write("\5\34\17\2\u0223\u0227\5\64\33\2\u0224\u0227\5\u0096L")
        buf.write("\2\u0225\u0227\5\u00a6T\2\u0226\u021f\3\2\2\2\u0226\u0220")
        buf.write("\3\2\2\2\u0226\u0221\3\2\2\2\u0226\u0222\3\2\2\2\u0226")
        buf.write("\u0223\3\2\2\2\u0226\u0224\3\2\2\2\u0226\u0225\3\2\2\2")
        buf.write("\u0227\u0230\3\2\2\2\u0228\u022a\5\36\20\2\u0229\u022b")
        buf.write("\5\u00b4[\2\u022a\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b")
        buf.write("\u022f\3\2\2\2\u022c\u022f\5\u00a0Q\2\u022d\u022f\5\u00a4")
        buf.write("S\2\u022e\u0228\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022d")
        buf.write("\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e\3\2\2\2\u0230")
        buf.write("\u0231\3\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2")
        buf.write("\u0233\u0235\5r:\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2")
        buf.write("\2\2\u0235\u0236\3\2\2\2\u0236\u0237\7i\2\2\u02379\3\2")
        buf.write("\2\2\u0238\u0242\7\25\2\2\u0239\u0243\5,\27\2\u023a\u0243")
        buf.write("\5<\37\2\u023b\u0243\5> \2\u023c\u0243\5D#\2\u023d\u0243")
        buf.write("\5l\67\2\u023e\u0243\5\34\17\2\u023f\u0243\5\64\33\2\u0240")
        buf.write("\u0243\5\u0096L\2\u0241\u0243\5\u00a6T\2\u0242\u0239\3")
        buf.write("\2\2\2\u0242\u023a\3\2\2\2\u0242\u023b\3\2\2\2\u0242\u023c")
        buf.write("\3\2\2\2\u0242\u023d\3\2\2\2\u0242\u023e\3\2\2\2\u0242")
        buf.write("\u023f\3\2\2\2\u0242\u0240\3\2\2\2\u0242\u0241\3\2\2\2")
        buf.write("\u0243\u0244\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3")
        buf.write("\2\2\2\u0245\u0246\3\2\2\2\u0246\u024f\7\35\2\2\u0247")
        buf.write("\u0249\5\36\20\2\u0248\u024a\5\u00b4[\2\u0249\u0248\3")
        buf.write("\2\2\2\u0249\u024a\3\2\2\2\u024a\u024e\3\2\2\2\u024b\u024e")
        buf.write("\5\u00a0Q\2\u024c\u024e\5\u00a4S\2\u024d\u0247\3\2\2\2")
        buf.write("\u024d\u024b\3\2\2\2\u024d\u024c\3\2\2\2\u024e\u0251\3")
        buf.write("\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0253")
        buf.write("\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0254\5r:\2\u0253\u0252")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254;\3\2\2\2\u0255\u0256")
        buf.write("\7O\2\2\u0256\u0257\7\26\2\2\u0257\u0259\5\u00ba^\2\u0258")
        buf.write("\u025a\5\u00a8U\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2")
        buf.write("\2\2\u025a\u025c\3\2\2\2\u025b\u025d\5\u00a0Q\2\u025c")
        buf.write("\u025b\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e\3\2\2\2")
        buf.write("\u025e\u025f\5r:\2\u025f=\3\2\2\2\u0260\u0261\7O\2\2\u0261")
        buf.write("\u0262\7\27\2\2\u0262\u0264\5\u00ba^\2\u0263\u0265\5\u00a0")
        buf.write("Q\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266")
        buf.write("\3\2\2\2\u0266\u0267\5r:\2\u0267?\3\2\2\2\u0268\u0269")
        buf.write("\7c\2\2\u0269\u026a\5d\63\2\u026a\u026b\7O\2\2\u026b\u026c")
        buf.write("\7i\2\2\u026cA\3\2\2\2\u026d\u0270\5\u0098M\2\u026e\u0270")
        buf.write("\5\u009aN\2\u026f\u026d\3\2\2\2\u026f\u026e\3\2\2\2\u0270")
        buf.write("\u0276\3\2\2\2\u0271\u0274\5\u00bc_\2\u0272\u0275\5\u0098")
        buf.write("M\2\u0273\u0275\5\u009aN\2\u0274\u0272\3\2\2\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275\u0277\3\2\2\2\u0276\u0271\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0282\3\2\2\2\u0278\u027a\7J\2\2")
        buf.write("\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\3")
        buf.write("\2\2\2\u027b\u0281\5\u00a2R\2\u027c\u0281\5n8\2\u027d")
        buf.write("\u0281\5\u00a0Q\2\u027e\u0281\5p9\2\u027f\u0281\5\u00b4")
        buf.write("[\2\u0280\u0279\3\2\2\2\u0280\u027c\3\2\2\2\u0280\u027d")
        buf.write("\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u027f\3\2\2\2\u0281")
        buf.write("\u0284\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2")
        buf.write("\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0285\u0287\5")
        buf.write("r:\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287C\3")
        buf.write("\2\2\2\u0288\u028b\5\u0098M\2\u0289\u028b\5\u009aN\2\u028a")
        buf.write("\u0288\3\2\2\2\u028a\u0289\3\2\2\2\u028b\u0291\3\2\2\2")
        buf.write("\u028c\u028f\5\u00bc_\2\u028d\u0290\5\u0098M\2\u028e\u0290")
        buf.write("\5\u009aN\2\u028f\u028d\3\2\2\2\u028f\u028e\3\2\2\2\u0290")
        buf.write("\u0292\3\2\2\2\u0291\u028c\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0294\3\2\2\2\u0293\u0295\5\32\16\2\u0294\u0293")
        buf.write("\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u02a3\3\2\2\2\u0296")
        buf.write("\u0298\7J\2\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u0299\3\2\2\2\u0299\u02a2\5\u00a2R\2\u029a\u02a2")
        buf.write("\5n8\2\u029b\u02a2\5\u00a0Q\2\u029c\u02a2\5\u00a4S\2\u029d")
        buf.write("\u02a2\5\u00acW\2\u029e\u02a2\5\u00a8U\2\u029f\u02a2\5")
        buf.write("r:\2\u02a0\u02a2\5\u00b4[\2\u02a1\u0297\3\2\2\2\u02a1")
        buf.write("\u029a\3\2\2\2\u02a1\u029b\3\2\2\2\u02a1\u029c\3\2\2\2")
        buf.write("\u02a1\u029d\3\2\2\2\u02a1\u029e\3\2\2\2\u02a1\u029f\3")
        buf.write("\2\2\2\u02a1\u02a0\3\2\2\2\u02a2\u02a5\3\2\2\2\u02a3\u02a1")
        buf.write("\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4E\3\2\2\2\u02a5\u02a3")
        buf.write("\3\2\2\2\u02a6\u02a8\5t;\2\u02a7\u02a9\5r:\2\u02a8\u02a7")
        buf.write("\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9G\3\2\2\2\u02aa\u02ac")
        buf.write("\5v<\2\u02ab\u02ad\5r:\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02adI\3\2\2\2\u02ae\u02b0\5x=\2\u02af\u02b1")
        buf.write("\5r:\2\u02b0\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1K")
        buf.write("\3\2\2\2\u02b2\u02b4\5z>\2\u02b3\u02b5\5r:\2\u02b4\u02b3")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5M\3\2\2\2\u02b6\u02b8")
        buf.write("\5|?\2\u02b7\u02b9\5r:\2\u02b8\u02b7\3\2\2\2\u02b8\u02b9")
        buf.write("\3\2\2\2\u02b9O\3\2\2\2\u02ba\u02bc\5\u0080A\2\u02bb\u02bd")
        buf.write("\5r:\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bdQ")
        buf.write("\3\2\2\2\u02be\u02c0\5\u0082B\2\u02bf\u02c1\5r:\2\u02c0")
        buf.write("\u02bf\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1S\3\2\2\2\u02c2")
        buf.write("\u02c4\5\u0086D\2\u02c3\u02c5\5r:\2\u02c4\u02c3\3\2\2")
        buf.write("\2\u02c4\u02c5\3\2\2\2\u02c5U\3\2\2\2\u02c6\u02c8\5\u0088")
        buf.write("E\2\u02c7\u02c9\5r:\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9")
        buf.write("\3\2\2\2\u02c9W\3\2\2\2\u02ca\u02cc\5\u008aF\2\u02cb\u02cd")
        buf.write("\5r:\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cdY")
        buf.write("\3\2\2\2\u02ce\u02d0\5\u008cG\2\u02cf\u02d1\5r:\2\u02d0")
        buf.write("\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1[\3\2\2\2\u02d2")
        buf.write("\u02d4\5\u008eH\2\u02d3\u02d5\5r:\2\u02d4\u02d3\3\2\2")
        buf.write("\2\u02d4\u02d5\3\2\2\2\u02d5]\3\2\2\2\u02d6\u02d8\5\u0090")
        buf.write("I\2\u02d7\u02d9\5r:\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9")
        buf.write("\3\2\2\2\u02d9_\3\2\2\2\u02da\u02dc\5\u0094K\2\u02db\u02dd")
        buf.write("\5r:\2\u02dc\u02db\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dda")
        buf.write("\3\2\2\2\u02de\u02e0\5\u00acW\2\u02df\u02e1\5r:\2\u02e0")
        buf.write("\u02df\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1c\3\2\2\2\u02e2")
        buf.write("\u02e3\t\4\2\2\u02e3e\3\2\2\2\u02e4\u02e5\7j\2\2\u02e5")
        buf.write("g\3\2\2\2\u02e6\u02e7\7d\2\2\u02e7i\3\2\2\2\u02e8\u02e9")
        buf.write("\t\5\2\2\u02e9k\3\2\2\2\u02ea\u02eb\7\31\2\2\u02eb\u02ed")
        buf.write("\5\u00ba^\2\u02ec\u02ee\7k\2\2\u02ed\u02ec\3\2\2\2\u02ed")
        buf.write("\u02ee\3\2\2\2\u02eem\3\2\2\2\u02ef\u02f0\7\b\2\2\u02f0")
        buf.write("\u02f2\5\u00b0Y\2\u02f1\u02f3\7k\2\2\u02f2\u02f1\3\2\2")
        buf.write("\2\u02f2\u02f3\3\2\2\2\u02f3o\3\2\2\2\u02f4\u02f5\7 \2")
        buf.write("\2\u02f5\u02f7\5\u009cO\2\u02f6\u02f4\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("q\3\2\2\2\u02fa\u02fb\7\"\2\2\u02fb\u02fd\5\u00b0Y\2\u02fc")
        buf.write("\u02fe\7k\2\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe\3\2\2\2")
        buf.write("\u02fes\3\2\2\2\u02ff\u0300\7#\2\2\u0300\u0303\7O\2\2")
        buf.write("\u0301\u0302\7\66\2\2\u0302\u0304\7O\2\2\u0303\u0301\3")
        buf.write("\2\2\2\u0303\u0304\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0307")
        buf.write("\5j\66\2\u0306\u0308\5\b\5\2\u0307\u0306\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u030a\3\2\2\2\u0309\u030b\5\u00b4")
        buf.write("[\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030f")
        buf.write("\3\2\2\2\u030c\u030e\5n8\2\u030d\u030c\3\2\2\2\u030e\u0311")
        buf.write("\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0313\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0314\5\u00a0")
        buf.write("Q\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314u\3\2")
        buf.write("\2\2\u0315\u0316\7$\2\2\u0316\u0318\7O\2\2\u0317\u0319")
        buf.write("\5\b\5\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u031b\3\2\2\2\u031a\u031c\5\u00b4[\2\u031b\u031a\3\2")
        buf.write("\2\2\u031b\u031c\3\2\2\2\u031cw\3\2\2\2\u031d\u031e\7")
        buf.write("%\2\2\u031e\u0320\7O\2\2\u031f\u0321\5\b\5\2\u0320\u031f")
        buf.write("\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2\u0322")
        buf.write("\u0324\5\u00b4[\2\u0323\u0322\3\2\2\2\u0323\u0324\3\2")
        buf.write("\2\2\u0324y\3\2\2\2\u0325\u0326\7&\2\2\u0326\u0327\7O")
        buf.write("\2\2\u0327\u0329\5j\66\2\u0328\u032a\5\u00b4[\2\u0329")
        buf.write("\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a{\3\2\2\2\u032b")
        buf.write("\u032c\7\'\2\2\u032c\u032d\7O\2\2\u032d\u032e\5j\66\2")
        buf.write("\u032e\u032f\7c\2\2\u032f\u0335\7R\2\2\u0330\u0331\5\u00c0")
        buf.write("a\2\u0331\u0332\7R\2\2\u0332\u0334\3\2\2\2\u0333\u0330")
        buf.write("\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2\u0335")
        buf.write("\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0338\u033a\7i\2\2\u0339\u033b\5\u00b4[\2\u033a\u0339")
        buf.write("\3\2\2\2\u033a\u033b\3\2\2\2\u033b}\3\2\2\2\u033c\u033d")
        buf.write("\7(\2\2\u033d\u033f\7O\2\2\u033e\u0340\5\u00b4[\2\u033f")
        buf.write("\u033e\3\2\2\2\u033f\u0340\3\2\2\2\u0340\177\3\2\2\2\u0341")
        buf.write("\u0342\7)\2\2\u0342\u0343\7O\2\2\u0343\u0344\5j\66\2\u0344")
        buf.write("\u0346\5\b\5\2\u0345\u0347\5\u00b4[\2\u0346\u0345\3\2")
        buf.write("\2\2\u0346\u0347\3\2\2\2\u0347\u0081\3\2\2\2\u0348\u0349")
        buf.write("\7*\2\2\u0349\u034a\7O\2\2\u034a\u0356\5j\66\2\u034b\u034c")
        buf.write("\7c\2\2\u034c\u0352\7R\2\2\u034d\u034e\5\u00c0a\2\u034e")
        buf.write("\u034f\7R\2\2\u034f\u0351\3\2\2\2\u0350\u034d\3\2\2\2")
        buf.write("\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353\3")
        buf.write("\2\2\2\u0353\u0355\3\2\2\2\u0354\u0352\3\2\2\2\u0355\u0357")
        buf.write("\7i\2\2\u0356\u034b\3\2\2\2\u0356\u0357\3\2\2\2\u0357")
        buf.write("\u0359\3\2\2\2\u0358\u035a\5\u00b4[\2\u0359\u0358\3\2")
        buf.write("\2\2\u0359\u035a\3\2\2\2\u035a\u0083\3\2\2\2\u035b\u035c")
        buf.write("\7+\2\2\u035c\u035e\7O\2\2\u035d\u035f\5\u00b4[\2\u035e")
        buf.write("\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0085\3\2\2\2")
        buf.write("\u0360\u0361\7.\2\2\u0361\u0362\7O\2\2\u0362\u0364\5\b")
        buf.write("\5\2\u0363\u0365\5\u00b4[\2\u0364\u0363\3\2\2\2\u0364")
        buf.write("\u0365\3\2\2\2\u0365\u0369\3\2\2\2\u0366\u0368\5n8\2\u0367")
        buf.write("\u0366\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036c\u036e\5\u00a0Q\2\u036d\u036c\3\2\2\2\u036d")
        buf.write("\u036e\3\2\2\2\u036e\u0087\3\2\2\2\u036f\u0370\7/\2\2")
        buf.write("\u0370\u0371\7O\2\2\u0371\u0373\5\b\5\2\u0372\u0374\5")
        buf.write("\u00b4[\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0378\3\2\2\2\u0375\u0377\5n8\2\u0376\u0375\3\2\2\2\u0377")
        buf.write("\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037d\5")
        buf.write("\u00a0Q\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d")
        buf.write("\u0089\3\2\2\2\u037e\u037f\7,\2\2\u037f\u0382\7O\2\2\u0380")
        buf.write("\u0383\5\b\5\2\u0381\u0383\5\u00ba^\2\u0382\u0380\3\2")
        buf.write("\2\2\u0382\u0381\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385")
        buf.write("\3\2\2\2\u0384\u0386\5\u00b4[\2\u0385\u0384\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\u038a\3\2\2\2\u0387\u0389\5n8\2\u0388")
        buf.write("\u0387\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2")
        buf.write("\u038a\u038b\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3")
        buf.write("\2\2\2\u038d\u038f\5\u00a0Q\2\u038e\u038d\3\2\2\2\u038e")
        buf.write("\u038f\3\2\2\2\u038f\u008b\3\2\2\2\u0390\u0391\7-\2\2")
        buf.write("\u0391\u0392\7O\2\2\u0392\u008d\3\2\2\2\u0393\u0394\7")
        buf.write("\60\2\2\u0394\u0395\7O\2\2\u0395\u0396\5j\66\2\u0396\u0397")
        buf.write("\7c\2\2\u0397\u039d\7R\2\2\u0398\u0399\5\u00c0a\2\u0399")
        buf.write("\u039a\7R\2\2\u039a\u039c\3\2\2\2\u039b\u0398\3\2\2\2")
        buf.write("\u039c\u039f\3\2\2\2\u039d\u039b\3\2\2\2\u039d\u039e\3")
        buf.write("\2\2\2\u039e\u03a0\3\2\2\2\u039f\u039d\3\2\2\2\u03a0\u03a2")
        buf.write("\7i\2\2\u03a1\u03a3\5\u00b4[\2\u03a2\u03a1\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u03a7\3\2\2\2\u03a4\u03a6\5n8\2\u03a5")
        buf.write("\u03a4\3\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2")
        buf.write("\u03a7\u03a8\3\2\2\2\u03a8\u008f\3\2\2\2\u03a9\u03a7\3")
        buf.write("\2\2\2\u03aa\u03ad\7\61\2\2\u03ab\u03ae\5\u0098M\2\u03ac")
        buf.write("\u03ae\5\u009aN\2\u03ad\u03ab\3\2\2\2\u03ad\u03ac\3\2")
        buf.write("\2\2\u03ae\u03b2\3\2\2\2\u03af\u03b1\5n8\2\u03b0\u03af")
        buf.write("\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2")
        buf.write("\u03b5\u03b7\5\u00a0Q\2\u03b6\u03b5\3\2\2\2\u03b6\u03b7")
        buf.write("\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ba\5\u00b4[\2\u03b9")
        buf.write("\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u0091\3\2\2\2")
        buf.write("\u03bb\u03bc\7\62\2\2\u03bc\u03be\7O\2\2\u03bd\u03bf\5")
        buf.write("\u00b4[\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf")
        buf.write("\u0093\3\2\2\2\u03c0\u03c1\7\63\2\2\u03c1\u03c2\7O\2\2")
        buf.write("\u03c2\u03c4\5j\66\2\u03c3\u03c5\5\b\5\2\u03c4\u03c3\3")
        buf.write("\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03c8")
        buf.write("\5\u00b4[\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8")
        buf.write("\u03cc\3\2\2\2\u03c9\u03cb\5n8\2\u03ca\u03c9\3\2\2\2\u03cb")
        buf.write("\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u0095\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d0\7")
        buf.write("O\2\2\u03d0\u03d1\7\64\2\2\u03d1\u03d2\7c\2\2\u03d2\u03d3")
        buf.write("\5\u00ba^\2\u03d3\u03d5\7i\2\2\u03d4\u03d6\5\u00a0Q\2")
        buf.write("\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8\3")
        buf.write("\2\2\2\u03d7\u03d9\5r:\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9")
        buf.write("\3\2\2\2\u03d9\u0097\3\2\2\2\u03da\u03db\7O\2\2\u03db")
        buf.write("\u03dd\7\30\2\2\u03dc\u03de\5@!\2\u03dd\u03dc\3\2\2\2")
        buf.write("\u03dd\u03de\3\2\2\2\u03de\u0099\3\2\2\2\u03df\u03e0\7")
        buf.write("O\2\2\u03e0\u03e2\7\32\2\2\u03e1\u03e3\5@!\2\u03e2\u03e1")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u009b\3\2\2\2\u03e4")
        buf.write("\u03e5\7R\2\2\u03e5\u03e6\7\\\2\2\u03e6\u03e7\t\6\2\2")
        buf.write("\u03e7\u009d\3\2\2\2\u03e8\u03e9\7\65\2\2\u03e9\u009f")
        buf.write("\3\2\2\2\u03ea\u03eb\7\67\2\2\u03eb\u03ed\7\3\2\2\u03ec")
        buf.write("\u03ea\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ec\3\2\2\2")
        buf.write("\u03ee\u03ef\3\2\2\2\u03ef\u00a1\3\2\2\2\u03f0\u03f1\t")
        buf.write("\7\2\2\u03f1\u00a3\3\2\2\2\u03f2\u03f3\7:\2\2\u03f3\u03f5")
        buf.write("\5\u00b0Y\2\u03f4\u03f6\7k\2\2\u03f5\u03f4\3\2\2\2\u03f5")
        buf.write("\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03f2\3\2\2\2")
        buf.write("\u03f8\u03f9\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3")
        buf.write("\2\2\2\u03fa\u00a5\3\2\2\2\u03fb\u0401\t\b\2\2\u03fc\u0400")
        buf.write("\5\u00a0Q\2\u03fd\u0400\5\u00a8U\2\u03fe\u0400\5r:\2\u03ff")
        buf.write("\u03fc\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u03fe\3\2\2\2")
        buf.write("\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2\2\u0401\u0402\3")
        buf.write("\2\2\2\u0402\u00a7\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u0405")
        buf.write("\7=\2\2\u0405\u0407\5\u009cO\2\u0406\u0404\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2")
        buf.write("\u0409\u00a9\3\2\2\2\u040a\u040b\7A\2\2\u040b\u040d\5")
        buf.write("\u00ba^\2\u040c\u040e\5\u00b4[\2\u040d\u040c\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u00ab\3\2\2\2\u040f\u0412\t\t\2\2")
        buf.write("\u0410\u0411\7O\2\2\u0411\u0413\5j\66\2\u0412\u0410\3")
        buf.write("\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414\u0416")
        buf.write("\5\u00ba^\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416")
        buf.write("\u0418\3\2\2\2\u0417\u0419\5\u00b4[\2\u0418\u0417\3\2")
        buf.write("\2\2\u0418\u0419\3\2\2\2\u0419\u00ad\3\2\2\2\u041a\u041b")
        buf.write("\7>\2\2\u041b\u00af\3\2\2\2\u041c\u041d\7\3\2\2\u041d")
        buf.write("\u00b1\3\2\2\2\u041e\u041f\7R\2\2\u041f\u00b3\3\2\2\2")
        buf.write("\u0420\u0423\7@\2\2\u0421\u0422\7\\\2\2\u0422\u0424\t")
        buf.write("\n\2\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u00b5")
        buf.write("\3\2\2\2\u0425\u0426\7B\2\2\u0426\u0427\7O\2\2\u0427\u0428")
        buf.write("\5j\66\2\u0428\u042c\5\b\5\2\u0429\u042b\5n8\2\u042a\u0429")
        buf.write("\3\2\2\2\u042b\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2")
        buf.write("\u042f\u0431\5\u00a0Q\2\u0430\u042f\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u0433\3\2\2\2\u0432\u0434\5r:\2\u0433\u0432")
        buf.write("\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u00b7\3\2\2\2\u0435")
        buf.write("\u0436\7c\2\2\u0436\u0437\7C\2\2\u0437\u0438\5\u00ba^")
        buf.write("\2\u0438\u0439\7i\2\2\u0439\u00b9\3\2\2\2\u043a\u043b")
        buf.write("\b^\1\2\u043b\u044a\5\n\6\2\u043c\u044a\5\30\r\2\u043d")
        buf.write("\u044a\7O\2\2\u043e\u044a\7h\2\2\u043f\u044a\7R\2\2\u0440")
        buf.write("\u044a\5\u00b0Y\2\u0441\u044a\7P\2\2\u0442\u0444\7c\2")
        buf.write("\2\u0443\u0445\7\64\2\2\u0444\u0443\3\2\2\2\u0444\u0445")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\5\u00ba^\2\u0447")
        buf.write("\u0448\7i\2\2\u0448\u044a\3\2\2\2\u0449\u043a\3\2\2\2")
        buf.write("\u0449\u043c\3\2\2\2\u0449\u043d\3\2\2\2\u0449\u043e\3")
        buf.write("\2\2\2\u0449\u043f\3\2\2\2\u0449\u0440\3\2\2\2\u0449\u0441")
        buf.write("\3\2\2\2\u0449\u0442\3\2\2\2\u044a\u0458\3\2\2\2\u044b")
        buf.write("\u044c\f\r\2\2\u044c\u044d\5\u00be`\2\u044d\u044e\5\u00ba")
        buf.write("^\16\u044e\u0457\3\2\2\2\u044f\u0450\f\f\2\2\u0450\u0451")
        buf.write("\5\u00bc_\2\u0451\u0452\5\u00ba^\r\u0452\u0457\3\2\2\2")
        buf.write("\u0453\u0454\f\13\2\2\u0454\u0455\7Z\2\2\u0455\u0457\5")
        buf.write("\u00ba^\f\u0456\u044b\3\2\2\2\u0456\u044f\3\2\2\2\u0456")
        buf.write("\u0453\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2")
        buf.write("\u0458\u0459\3\2\2\2\u0459\u00bb\3\2\2\2\u045a\u0458\3")
        buf.write("\2\2\2\u045b\u045c\t\13\2\2\u045c\u00bd\3\2\2\2\u045d")
        buf.write("\u045e\t\f\2\2\u045e\u00bf\3\2\2\2\u045f\u0460\t\r\2\2")
        buf.write("\u0460\u00c1\3\2\2\2\u0461\u0462\t\16\2\2\u0462\u00c3")
        buf.write("\3\2\2\2\u00a6\u00c7\u00ce\u00d4\u00ee\u00f0\u0100\u0102")
        buf.write("\u0108\u010c\u010e\u0112\u0119\u011d\u0120\u0126\u012a")
        buf.write("\u012e\u0134\u0138\u013e\u0144\u014a\u0150\u0157\u015c")
        buf.write("\u0160\u0162\u0167\u0178\u0183\u0188\u018c\u018f\u0194")
        buf.write("\u0198\u019a\u01a1\u01bc\u01c3\u01c7\u01cb\u01cd\u01d1")
        buf.write("\u01d4\u01d9\u01dd\u01e1\u01e3\u01e7\u01ed\u0202\u0209")
        buf.write("\u020d\u020f\u0213\u021b\u0226\u022a\u022e\u0230\u0234")
        buf.write("\u0242\u0244\u0249\u024d\u024f\u0253\u0259\u025c\u0264")
        buf.write("\u026f\u0274\u0276\u0279\u0280\u0282\u0286\u028a\u028f")
        buf.write("\u0291\u0294\u0297\u02a1\u02a3\u02a8\u02ac\u02b0\u02b4")
        buf.write("\u02b8\u02bc\u02c0\u02c4\u02c8\u02cc\u02d0\u02d4\u02d8")
        buf.write("\u02dc\u02e0\u02ed\u02f2\u02f8\u02fd\u0303\u0307\u030a")
        buf.write("\u030f\u0313\u0318\u031b\u0320\u0323\u0329\u0335\u033a")
        buf.write("\u033f\u0346\u0352\u0356\u0359\u035e\u0364\u0369\u036d")
        buf.write("\u0373\u0378\u037c\u0382\u0385\u038a\u038e\u039d\u03a2")
        buf.write("\u03a7\u03ad\u03b2\u03b6\u03b9\u03be\u03c4\u03c7\u03cc")
        buf.write("\u03d5\u03d8\u03dd\u03e2\u03ee\u03f5\u03f9\u03ff\u0401")
        buf.write("\u0408\u040d\u0412\u0415\u0418\u0423\u042c\u0430\u0433")
        buf.write("\u0444\u0449\u0456\u0458")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'*'", "<INVALID>", "'!'", "'`'", 
                     "'\\'", "':'", "','", "'\"'", "'='", "'>='", "'>'", 
                     "'#'", "'-'", "'<='", "'<'", "'('", "'['", "'<>'", 
                     "'%'", "'+'", "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOCOUNT", "NOTGPA", "WHITESPACE", "ACCEPT", "ALLOW", 
                      "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", 
                      "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", 
                      "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", 
                      "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PROXY_ADVICE", "PSEUDO", "PSUEDO", 
                      "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", "RULE_TAG", 
                      "STANDALONE", "SHARE", "TAG", "SAME_DISC", "UNDER", 
                      "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNT", "THEN", "AND", "OR", 
                      "NUMBER", "CATALOG_NUMBER", "WILD", "SYMBOL", "AMPERSAND", 
                      "ASTERISK", "AT", "BANG", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "DBL_QUOTE", "EQ", "GE", "GT", "HASH", 
                      "HYPHEN", "LE", "LT", "LP", "L_SQB", "NE", "PERCENT", 
                      "PLUS", "QUESTION_MARK", "RP", "R_SQB", "SEMICOLON", 
                      "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_header = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_full_course = 4
    RULE_course_item = 5
    RULE_and_list = 6
    RULE_or_list = 7
    RULE_except_list = 8
    RULE_include_list = 9
    RULE_catalog_number = 10
    RULE_discipline = 11
    RULE_course_list_body = 12
    RULE_course_list_rule = 13
    RULE_qualifier = 14
    RULE_begin_if = 15
    RULE_end_if = 16
    RULE_conditional_head = 17
    RULE_else_head = 18
    RULE_head_rule_group = 19
    RULE_head_rule = 20
    RULE_conditional_body = 21
    RULE_else_body = 22
    RULE_body_rule_group = 23
    RULE_body_rule = 24
    RULE_group_requirement = 25
    RULE_groups = 26
    RULE_group = 27
    RULE_subset = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_allow_clause = 31
    RULE_class_credit_head = 32
    RULE_class_credit_body = 33
    RULE_lastres_head = 34
    RULE_maxclass_head = 35
    RULE_maxcredit_head = 36
    RULE_maxpassfail_head = 37
    RULE_maxperdisc_head = 38
    RULE_maxterm_head = 39
    RULE_maxtransfer_head = 40
    RULE_minclass_head = 41
    RULE_mincredit_head = 42
    RULE_mingpa_head = 43
    RULE_mingrade_head = 44
    RULE_minperdisc_head = 45
    RULE_minres_head = 46
    RULE_minterm_head = 47
    RULE_share_head = 48
    RULE_allow = 49
    RULE_area_end = 50
    RULE_area_start = 51
    RULE_class_or_credit = 52
    RULE_copy_rules = 53
    RULE_display = 54
    RULE_header_tag = 55
    RULE_label = 56
    RULE_lastres = 57
    RULE_maxclass = 58
    RULE_maxcredit = 59
    RULE_maxpassfail = 60
    RULE_maxperdisc = 61
    RULE_maxspread = 62
    RULE_maxterm = 63
    RULE_maxtransfer = 64
    RULE_minarea = 65
    RULE_minclass = 66
    RULE_mincredit = 67
    RULE_mingpa = 68
    RULE_mingrade = 69
    RULE_minperdisc = 70
    RULE_minres = 71
    RULE_minspread = 72
    RULE_minterm = 73
    RULE_noncourse = 74
    RULE_num_classes = 75
    RULE_num_credits = 76
    RULE_nv_pair = 77
    RULE_optional = 78
    RULE_proxy_advice = 79
    RULE_pseudo = 80
    RULE_remark = 81
    RULE_rule_complete = 82
    RULE_rule_tag = 83
    RULE_samedisc = 84
    RULE_share = 85
    RULE_standalone = 86
    RULE_string = 87
    RULE_symbol = 88
    RULE_tag = 89
    RULE_under = 90
    RULE_with_clause = 91
    RULE_expression = 92
    RULE_logical_op = 93
    RULE_relational_op = 94
    RULE_list_or = 95
    RULE_list_and = 96

    ruleNames =  [ "req_block", "header", "body", "course_list", "full_course", 
                   "course_item", "and_list", "or_list", "except_list", 
                   "include_list", "catalog_number", "discipline", "course_list_body", 
                   "course_list_rule", "qualifier", "begin_if", "end_if", 
                   "conditional_head", "else_head", "head_rule_group", "head_rule", 
                   "conditional_body", "else_body", "body_rule_group", "body_rule", 
                   "group_requirement", "groups", "group", "subset", "block", 
                   "blocktype", "allow_clause", "class_credit_head", "class_credit_body", 
                   "lastres_head", "maxclass_head", "maxcredit_head", "maxpassfail_head", 
                   "maxperdisc_head", "maxterm_head", "maxtransfer_head", 
                   "minclass_head", "mincredit_head", "mingpa_head", "mingrade_head", 
                   "minperdisc_head", "minres_head", "minterm_head", "share_head", 
                   "allow", "area_end", "area_start", "class_or_credit", 
                   "copy_rules", "display", "header_tag", "label", "lastres", 
                   "maxclass", "maxcredit", "maxpassfail", "maxperdisc", 
                   "maxspread", "maxterm", "maxtransfer", "minarea", "minclass", 
                   "mincredit", "mingpa", "mingrade", "minperdisc", "minres", 
                   "minspread", "minterm", "noncourse", "num_classes", "num_credits", 
                   "nv_pair", "optional", "proxy_advice", "pseudo", "remark", 
                   "rule_complete", "rule_tag", "samedisc", "share", "standalone", 
                   "string", "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOCOUNT=13
    NOTGPA=14
    WHITESPACE=15
    ACCEPT=16
    ALLOW=17
    BEGIN=18
    BEGINSUB=19
    BLOCK=20
    BLOCKTYPE=21
    CLASS=22
    COPY_RULES=23
    CREDIT=24
    DONT_SHARE=25
    ENDOT=26
    ENDSUB=27
    EXCEPT=28
    GROUP=29
    HEADER_TAG=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PROXY_ADVICE=53
    PSEUDO=54
    PSUEDO=55
    REMARK=56
    RULE_COMPLETE=57
    RULE_INCOMPLETE=58
    RULE_TAG=59
    STANDALONE=60
    SHARE=61
    TAG=62
    SAME_DISC=63
    UNDER=64
    WITH=65
    BEGINELSE=66
    BEGINIF=67
    ELSE=68
    ENDELSE=69
    ENDIF=70
    IF=71
    IS=72
    ISNT=73
    THEN=74
    AND=75
    OR=76
    NUMBER=77
    CATALOG_NUMBER=78
    WILD=79
    SYMBOL=80
    AMPERSAND=81
    ASTERISK=82
    AT=83
    BANG=84
    BACKQUOTE=85
    BACKSLASH=86
    COLON=87
    COMMA=88
    DBL_QUOTE=89
    EQ=90
    GE=91
    GT=92
    HASH=93
    HYPHEN=94
    LE=95
    LT=96
    LP=97
    L_SQB=98
    NE=99
    PERCENT=100
    PLUS=101
    QUESTION_MARK=102
    RP=103
    R_SQB=104
    SEMICOLON=105
    SLASH=106
    UNDERSCORE=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def header(self):
            return self.getTypedRuleContext(ReqBlockParser.HeaderContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 194
                    self.matchWildcard() 
                self.state = 199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 200
            self.match(ReqBlockParser.BEGIN)
            self.state = 201
            self.header()
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 202
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 203
                self.body()


            self.state = 206
            self.match(ReqBlockParser.ENDOT)
            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 207
                    self.matchWildcard() 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 213
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def conditional_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_headContext,i)


        def lastres_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Lastres_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Lastres_headContext,i)


        def maxclass_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxclass_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxclass_headContext,i)


        def maxcredit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxcredit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxcredit_headContext,i)


        def maxpassfail_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxpassfail_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxpassfail_headContext,i)


        def maxperdisc_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxperdisc_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxperdisc_headContext,i)


        def maxterm_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxterm_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxterm_headContext,i)


        def maxtransfer_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxtransfer_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxtransfer_headContext,i)


        def minclass_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Minclass_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Minclass_headContext,i)


        def mincredit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Mincredit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Mincredit_headContext,i)


        def mingpa_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Mingpa_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Mingpa_headContext,i)


        def mingrade_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Mingrade_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Mingrade_headContext,i)


        def minperdisc_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Minperdisc_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Minperdisc_headContext,i)


        def minres_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Minres_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Minres_headContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Share_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Share_headContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = ReqBlockParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (ReqBlockParser.DONT_SHARE - 25)) | (1 << (ReqBlockParser.LASTRES - 25)) | (1 << (ReqBlockParser.MAXCLASS - 25)) | (1 << (ReqBlockParser.MAXCREDIT - 25)) | (1 << (ReqBlockParser.MAXPASSFAIL - 25)) | (1 << (ReqBlockParser.MAXPERDISC - 25)) | (1 << (ReqBlockParser.MAXTERM - 25)) | (1 << (ReqBlockParser.MAXTRANSFER - 25)) | (1 << (ReqBlockParser.MINGPA - 25)) | (1 << (ReqBlockParser.MINGRADE - 25)) | (1 << (ReqBlockParser.MINCLASS - 25)) | (1 << (ReqBlockParser.MINCREDIT - 25)) | (1 << (ReqBlockParser.MINPERDISC - 25)) | (1 << (ReqBlockParser.MINRES - 25)) | (1 << (ReqBlockParser.OPTIONAL - 25)) | (1 << (ReqBlockParser.PROXY_ADVICE - 25)) | (1 << (ReqBlockParser.REMARK - 25)) | (1 << (ReqBlockParser.STANDALONE - 25)) | (1 << (ReqBlockParser.SHARE - 25)) | (1 << (ReqBlockParser.UNDER - 25)) | (1 << (ReqBlockParser.IF - 25)) | (1 << (ReqBlockParser.NUMBER - 25)))) != 0):
                self.state = 236
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER]:
                    self.state = 215
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 216
                    self.conditional_head()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 217
                    self.lastres_head()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 218
                    self.maxclass_head()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 219
                    self.maxcredit_head()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 220
                    self.maxpassfail_head()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 221
                    self.maxperdisc_head()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 222
                    self.maxterm_head()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 223
                    self.maxtransfer_head()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 224
                    self.minclass_head()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 225
                    self.mincredit_head()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 226
                    self.mingpa_head()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 227
                    self.mingrade_head()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 228
                    self.minperdisc_head()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 229
                    self.minres_head()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 230
                    self.optional()
                    pass
                elif token in [ReqBlockParser.PROXY_ADVICE]:
                    self.state = 231
                    self.proxy_advice()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 232
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 233
                    self.share_head()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 234
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 235
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def conditional_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,i)


        def course_list_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BEGINSUB) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.LABEL) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0):
                self.state = 254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 241
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 242
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 243
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 244
                    self.conditional_body()
                    pass

                elif la_ == 5:
                    self.state = 245
                    self.course_list_rule()
                    pass

                elif la_ == 6:
                    self.state = 246
                    self.copy_rules()
                    pass

                elif la_ == 7:
                    self.state = 247
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 248
                    self.label()
                    pass

                elif la_ == 9:
                    self.state = 249
                    self.noncourse()
                    pass

                elif la_ == 10:
                    self.state = 250
                    self.proxy_advice()
                    pass

                elif la_ == 11:
                    self.state = 251
                    self.remark()
                    pass

                elif la_ == 12:
                    self.state = 252
                    self.rule_complete()
                    pass

                elif la_ == 13:
                    self.state = 253
                    self.subset()
                    pass


                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Except_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Except_listContext,i)


        def include_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Include_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Include_listContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.course_item()
            self.state = 262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 260
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 261
                self.or_list()
                pass
            elif token in [ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.EXCEPT or _la==ReqBlockParser.INCLUDING:
                self.state = 266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.EXCEPT]:
                    self.state = 264
                    self.except_list()
                    pass
                elif token in [ReqBlockParser.INCLUDING]:
                    self.state = 265
                    self.include_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 271
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.discipline()
            self.state = 275
            self.catalog_number()
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 276
                    self.with_clause() 
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def area_start(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_startContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def area_end(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_endContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 282
                self.area_start()


            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 285
                self.discipline()


            self.state = 288
            self.catalog_number()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.LP:
                self.state = 289
                self.with_clause()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 295
                self.area_end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 298
                self.list_and()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 299
                    self.area_end()


                self.state = 302
                self.course_item()
                self.state = 306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 308
                self.list_or()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 309
                    self.area_end()


                self.state = 312
                self.course_item()
                self.state = 316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(ReqBlockParser.EXCEPT)
            self.state = 319
            self.course_item()
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 320
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 321
                self.or_list()
                pass
            elif token in [ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(ReqBlockParser.INCLUDING)
            self.state = 325
            self.course_item()
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 326
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 327
                self.or_list()
                pass
            elif token in [ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_catalog_number)
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_discipline)
        try:
            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 339
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 340
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.course_list()
            self.state = 352
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 350
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 344
                        self.qualifier()
                        self.state = 346
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                        if la_ == 1:
                            self.state = 345
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 348
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 349
                        self.remark()
                        pass

             
                self.state = 354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_rule" ):
                listener.enterCourse_list_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_rule" ):
                listener.exitCourse_list_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_rule" ):
                return visitor.visitCourse_list_rule(self)
            else:
                return visitor.visitChildren(self)




    def course_list_rule(self):

        localctx = ReqBlockParser.Course_list_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_course_list_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.course_list_body()
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 356
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ReqBlockParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qualifier)
        try:
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 359
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 360
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 361
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 362
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 363
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 364
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 365
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 366
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 367
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 368
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 369
                self.minspread()
                pass
            elif token in [ReqBlockParser.PROXY_ADVICE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 370
                self.proxy_advice()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 13)
                self.state = 371
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 14)
                self.state = 372
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 373
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_headContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_conditional_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_head" ):
                listener.enterConditional_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_head" ):
                listener.exitConditional_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_head" ):
                return visitor.visitConditional_head(self)
            else:
                return visitor.visitChildren(self)




    def conditional_head(self):

        localctx = ReqBlockParser.Conditional_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_conditional_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(ReqBlockParser.IF)
            self.state = 381
            self.expression(0)
            self.state = 382
            self.match(ReqBlockParser.THEN)
            self.state = 385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 383
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 384
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 387
                    self.proxy_advice() 
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 393
                self.label()


            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 396
                self.else_head()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_head" ):
                listener.enterElse_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_head" ):
                listener.exitElse_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_head" ):
                return visitor.visitElse_head(self)
            else:
                return visitor.visitChildren(self)




    def else_head(self):

        localctx = ReqBlockParser.Else_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_else_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(ReqBlockParser.ELSE)
            self.state = 402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 400
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 401
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 404
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 405
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def head_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Head_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule_group" ):
                listener.enterHead_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule_group" ):
                listener.exitHead_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule_group" ):
                return visitor.visitHead_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def head_rule_group(self):

        localctx = ReqBlockParser.Head_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_head_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.begin_if()
            self.state = 413 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 412
                self.head_rule()
                self.state = 415 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (ReqBlockParser.COPY_RULES - 23)) | (1 << (ReqBlockParser.DONT_SHARE - 23)) | (1 << (ReqBlockParser.LASTRES - 23)) | (1 << (ReqBlockParser.MAXCLASS - 23)) | (1 << (ReqBlockParser.MAXCREDIT - 23)) | (1 << (ReqBlockParser.MAXPASSFAIL - 23)) | (1 << (ReqBlockParser.MAXTERM - 23)) | (1 << (ReqBlockParser.MAXTRANSFER - 23)) | (1 << (ReqBlockParser.MINGPA - 23)) | (1 << (ReqBlockParser.MINGRADE - 23)) | (1 << (ReqBlockParser.MINCLASS - 23)) | (1 << (ReqBlockParser.MINCREDIT - 23)) | (1 << (ReqBlockParser.MINPERDISC - 23)) | (1 << (ReqBlockParser.MINRES - 23)) | (1 << (ReqBlockParser.MINTERM - 23)) | (1 << (ReqBlockParser.PROXY_ADVICE - 23)) | (1 << (ReqBlockParser.REMARK - 23)) | (1 << (ReqBlockParser.RULE_COMPLETE - 23)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 23)) | (1 << (ReqBlockParser.SHARE - 23)) | (1 << (ReqBlockParser.IF - 23)) | (1 << (ReqBlockParser.NUMBER - 23)))) != 0)):
                    break

            self.state = 417
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def conditional_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Conditional_headContext,0)


        def lastres_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Lastres_headContext,0)


        def maxclass_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxclass_headContext,0)


        def maxcredit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxcredit_headContext,0)


        def maxpassfail_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxpassfail_headContext,0)


        def maxterm_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxterm_headContext,0)


        def maxtransfer_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxtransfer_headContext,0)


        def minclass_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minclass_headContext,0)


        def mincredit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Mincredit_headContext,0)


        def mingpa_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Mingpa_headContext,0)


        def mingrade_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Mingrade_headContext,0)


        def minperdisc_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minperdisc_headContext,0)


        def minres_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minres_headContext,0)


        def minterm_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minterm_headContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Share_headContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule" ):
                listener.enterHead_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule" ):
                listener.exitHead_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule" ):
                return visitor.visitHead_rule(self)
            else:
                return visitor.visitChildren(self)




    def head_rule(self):

        localctx = ReqBlockParser.Head_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_head_rule)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.blocktype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.class_credit_head()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.copy_rules()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.conditional_head()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 424
                self.lastres_head()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 425
                self.maxclass_head()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 426
                self.maxcredit_head()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 427
                self.maxpassfail_head()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 428
                self.maxterm_head()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 429
                self.maxtransfer_head()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 430
                self.minclass_head()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 431
                self.mincredit_head()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 432
                self.mingpa_head()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 433
                self.mingrade_head()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 434
                self.minperdisc_head()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 435
                self.minres_head()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 436
                self.minterm_head()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 437
                self.noncourse()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 438
                self.proxy_advice()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 439
                self.remark()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 440
                self.rule_complete()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 441
                self.share_head()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_bodyContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_conditional_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_body" ):
                listener.enterConditional_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_body" ):
                listener.exitConditional_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_body" ):
                return visitor.visitConditional_body(self)
            else:
                return visitor.visitChildren(self)




    def conditional_body(self):

        localctx = ReqBlockParser.Conditional_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conditional_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(ReqBlockParser.IF)
            self.state = 445
            self.expression(0)
            self.state = 446
            self.match(ReqBlockParser.THEN)
            self.state = 449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.STRING, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB]:
                self.state = 447
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 448
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                    if la_ == 1:
                        self.state = 451
                        self.qualifier()
                        self.state = 453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 452
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 455
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 456
                        self.remark()
                        pass

             
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 462
                self.label()


            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 465
                self.else_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_body" ):
                listener.enterElse_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_body" ):
                listener.exitElse_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_body" ):
                return visitor.visitElse_body(self)
            else:
                return visitor.visitChildren(self)




    def else_body(self):

        localctx = ReqBlockParser.Else_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(ReqBlockParser.ELSE)
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.STRING, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB]:
                self.state = 469
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 470
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 479
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 473
                        self.qualifier()
                        self.state = 475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 474
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 477
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 478
                        self.remark()
                        pass

             
                self.state = 483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 484
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.begin_if()
            self.state = 489 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 488
                self.body_rule()
                self.state = 491 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BEGINSUB) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE) | (1 << ReqBlockParser.SHARE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 493
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_body_rule)
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.conditional_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.course_list_rule()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                self.copy_rules()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 501
                self.group_requirement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 502
                self.maxtransfer()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 503
                self.minclass()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 504
                self.mincredit()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 505
                self.mingrade()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 506
                self.noncourse()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 507
                self.proxy_advice()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 508
                self.remark()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 509
                self.rule_complete()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 510
                self.share()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 511
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def groups(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupsContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_requirement" ):
                listener.enterGroup_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_requirement" ):
                listener.exitGroup_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_requirement" ):
                return visitor.visitGroup_requirement(self)
            else:
                return visitor.visitChildren(self)




    def group_requirement(self):

        localctx = ReqBlockParser.Group_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(ReqBlockParser.NUMBER)
            self.state = 515
            self.match(ReqBlockParser.GROUP)
            self.state = 516
            self.groups()
            self.state = 525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 523
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 517
                        self.qualifier()
                        self.state = 519
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 518
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 521
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 522
                        self.remark()
                        pass

             
                self.state = 527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 528
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroups" ):
                listener.enterGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroups" ):
                listener.exitGroups(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroups" ):
                return visitor.visitGroups(self)
            else:
                return visitor.visitChildren(self)




    def groups(self):

        localctx = ReqBlockParser.GroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.group()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 532
                self.logical_op()
                self.state = 533
                self.group()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(ReqBlockParser.LP)
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 541
                self.block()
                pass

            elif la_ == 2:
                self.state = 542
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 543
                self.class_credit_body()
                pass

            elif la_ == 4:
                self.state = 544
                self.course_list_rule()
                pass

            elif la_ == 5:
                self.state = 545
                self.group_requirement()
                pass

            elif la_ == 6:
                self.state = 546
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 547
                self.rule_complete()
                pass


            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXSPREAD) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINAREA) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.MINSPREAD) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self.qualifier()
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.TAG:
                        self.state = 551
                        self.tag()


                    pass

                elif la_ == 2:
                    self.state = 554
                    self.proxy_advice()
                    pass

                elif la_ == 3:
                    self.state = 555
                    self.remark()
                    pass


                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 561
                self.label()


            self.state = 564
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def conditional_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 576 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 567
                    self.conditional_body()
                    pass

                elif la_ == 2:
                    self.state = 568
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 569
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 570
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 571
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 572
                    self.course_list_rule()
                    pass

                elif la_ == 7:
                    self.state = 573
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 574
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 575
                    self.rule_complete()
                    pass


                self.state = 578 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 580
            self.match(ReqBlockParser.ENDSUB)
            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 587
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                    if la_ == 1:
                        self.state = 581
                        self.qualifier()
                        self.state = 583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 582
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 585
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 586
                        self.remark()
                        pass

             
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 592
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(ReqBlockParser.NUMBER)
            self.state = 596
            self.match(ReqBlockParser.BLOCK)
            self.state = 597
            self.expression(0)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 598
                self.rule_tag()


            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 601
                self.proxy_advice()


            self.state = 604
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(ReqBlockParser.NUMBER)
            self.state = 607
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 608
            self.expression(0)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 609
                self.proxy_advice()


            self.state = 612
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(ReqBlockParser.LP)
            self.state = 615
            self.allow()
            self.state = 616
            self.match(ReqBlockParser.NUMBER)
            self.state = 617
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 619
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 620
                self.num_credits()
                pass


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 623
                self.logical_op()
                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 624
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 625
                    self.num_credits()
                    pass




            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 638
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 630
                            self.match(ReqBlockParser.IS)


                        self.state = 633
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DISPLAY]:
                        self.state = 634
                        self.display()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 635
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.HEADER_TAG]:
                        self.state = 636
                        self.header_tag()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 637
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 643
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 646
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 647
                self.num_credits()
                pass


            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 650
                self.logical_op()
                self.state = 653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 651
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 652
                    self.num_credits()
                    pass




            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 657
                self.course_list_body()


            self.state = 673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 671
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 661
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 660
                            self.match(ReqBlockParser.IS)


                        self.state = 663
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DISPLAY]:
                        self.state = 664
                        self.display()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 665
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.REMARK]:
                        self.state = 666
                        self.remark()
                        pass
                    elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                        self.state = 667
                        self.share()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 668
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 669
                        self.label()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 670
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lastres_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres_head" ):
                listener.enterLastres_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres_head" ):
                listener.exitLastres_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres_head" ):
                return visitor.visitLastres_head(self)
            else:
                return visitor.visitChildren(self)




    def lastres_head(self):

        localctx = ReqBlockParser.Lastres_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_lastres_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.lastres()
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 677
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxclass_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass_head" ):
                listener.enterMaxclass_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass_head" ):
                listener.exitMaxclass_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass_head" ):
                return visitor.visitMaxclass_head(self)
            else:
                return visitor.visitChildren(self)




    def maxclass_head(self):

        localctx = ReqBlockParser.Maxclass_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_maxclass_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.maxclass()
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 681
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxcredit_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit_head" ):
                listener.enterMaxcredit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit_head" ):
                listener.exitMaxcredit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit_head" ):
                return visitor.visitMaxcredit_head(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit_head(self):

        localctx = ReqBlockParser.Maxcredit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_maxcredit_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.maxcredit()
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 685
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxpassfail_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail_head" ):
                listener.enterMaxpassfail_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail_head" ):
                listener.exitMaxpassfail_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail_head" ):
                return visitor.visitMaxpassfail_head(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail_head(self):

        localctx = ReqBlockParser.Maxpassfail_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_maxpassfail_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.maxpassfail()
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 689
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxperdisc_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc_head" ):
                listener.enterMaxperdisc_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc_head" ):
                listener.exitMaxperdisc_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc_head" ):
                return visitor.visitMaxperdisc_head(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc_head(self):

        localctx = ReqBlockParser.Maxperdisc_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_maxperdisc_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.maxperdisc()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 693
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxterm_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm_head" ):
                listener.enterMaxterm_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm_head" ):
                listener.exitMaxterm_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm_head" ):
                return visitor.visitMaxterm_head(self)
            else:
                return visitor.visitChildren(self)




    def maxterm_head(self):

        localctx = ReqBlockParser.Maxterm_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_maxterm_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.maxterm()
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 697
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxtransfer_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer_head" ):
                listener.enterMaxtransfer_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer_head" ):
                listener.exitMaxtransfer_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer_head" ):
                return visitor.visitMaxtransfer_head(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer_head(self):

        localctx = ReqBlockParser.Maxtransfer_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_maxtransfer_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.maxtransfer()
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 701
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minclass_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass_head" ):
                listener.enterMinclass_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass_head" ):
                listener.exitMinclass_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass_head" ):
                return visitor.visitMinclass_head(self)
            else:
                return visitor.visitChildren(self)




    def minclass_head(self):

        localctx = ReqBlockParser.Minclass_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_minclass_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.minclass()
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 705
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mincredit_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit_head" ):
                listener.enterMincredit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit_head" ):
                listener.exitMincredit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit_head" ):
                return visitor.visitMincredit_head(self)
            else:
                return visitor.visitChildren(self)




    def mincredit_head(self):

        localctx = ReqBlockParser.Mincredit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mincredit_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.mincredit()
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 709
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mingpa_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa_head" ):
                listener.enterMingpa_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa_head" ):
                listener.exitMingpa_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa_head" ):
                return visitor.visitMingpa_head(self)
            else:
                return visitor.visitChildren(self)




    def mingpa_head(self):

        localctx = ReqBlockParser.Mingpa_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mingpa_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.mingpa()
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 713
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mingrade_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade_head" ):
                listener.enterMingrade_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade_head" ):
                listener.exitMingrade_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade_head" ):
                return visitor.visitMingrade_head(self)
            else:
                return visitor.visitChildren(self)




    def mingrade_head(self):

        localctx = ReqBlockParser.Mingrade_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_mingrade_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.mingrade()
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 717
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minperdisc_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc_head" ):
                listener.enterMinperdisc_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc_head" ):
                listener.exitMinperdisc_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc_head" ):
                return visitor.visitMinperdisc_head(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc_head(self):

        localctx = ReqBlockParser.Minperdisc_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_minperdisc_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.minperdisc()
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 721
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minres_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres_head" ):
                listener.enterMinres_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres_head" ):
                listener.exitMinres_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres_head" ):
                return visitor.visitMinres_head(self)
            else:
                return visitor.visitChildren(self)




    def minres_head(self):

        localctx = ReqBlockParser.Minres_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_minres_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.minres()
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 725
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minterm_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm_head" ):
                listener.enterMinterm_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm_head" ):
                listener.exitMinterm_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm_head" ):
                return visitor.visitMinterm_head(self)
            else:
                return visitor.visitChildren(self)




    def minterm_head(self):

        localctx = ReqBlockParser.Minterm_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_minterm_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.minterm()
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 729
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Share_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare_head" ):
                listener.enterShare_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare_head" ):
                listener.exitShare_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare_head" ):
                return visitor.visitShare_head(self)
            else:
                return visitor.visitChildren(self)




    def share_head(self):

        localctx = ReqBlockParser.Share_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_share_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.share()
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 733
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ACCEPT or _la==ReqBlockParser.ALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_end" ):
                listener.enterArea_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_end" ):
                listener.exitArea_end(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_end" ):
                return visitor.visitArea_end(self)
            else:
                return visitor.visitChildren(self)




    def area_end(self):

        localctx = ReqBlockParser.Area_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_area_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(ReqBlockParser.R_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_start" ):
                listener.enterArea_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_start" ):
                listener.exitArea_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_start" ):
                return visitor.visitArea_start(self)
            else:
                return visitor.visitChildren(self)




    def area_start(self):

        localctx = ReqBlockParser.Area_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_area_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(ReqBlockParser.L_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 745
            self.expression(0)
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 746
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(ReqBlockParser.DISPLAY)
            self.state = 750
            self.string()
            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 751
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.HEADER_TAG)
            else:
                return self.getToken(ReqBlockParser.HEADER_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 754
                    self.match(ReqBlockParser.HEADER_TAG)
                    self.state = 755
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 758 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(ReqBlockParser.LABEL)
            self.state = 761
            self.string()
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 762
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(ReqBlockParser.LASTRES)
            self.state = 766
            self.match(ReqBlockParser.NUMBER)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 767
                self.match(ReqBlockParser.OF)
                self.state = 768
                self.match(ReqBlockParser.NUMBER)


            self.state = 771
            self.class_or_credit()
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 772
                self.course_list()


            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 775
                self.tag()


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 778
                self.display()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 784
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 788
            self.match(ReqBlockParser.NUMBER)
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 789
                self.course_list()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 792
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 796
            self.match(ReqBlockParser.NUMBER)
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 797
                self.course_list()


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 800
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 804
            self.match(ReqBlockParser.NUMBER)
            self.state = 805
            self.class_or_credit()
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 806
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 810
            self.match(ReqBlockParser.NUMBER)
            self.state = 811
            self.class_or_credit()
            self.state = 812
            self.match(ReqBlockParser.LP)
            self.state = 813
            self.match(ReqBlockParser.SYMBOL)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 814
                self.list_or()
                self.state = 815
                self.match(ReqBlockParser.SYMBOL)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self.match(ReqBlockParser.RP)
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 823
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 827
            self.match(ReqBlockParser.NUMBER)
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 828
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(ReqBlockParser.MAXTERM)
            self.state = 832
            self.match(ReqBlockParser.NUMBER)
            self.state = 833
            self.class_or_credit()
            self.state = 834
            self.course_list()
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 835
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 839
            self.match(ReqBlockParser.NUMBER)
            self.state = 840
            self.class_or_credit()
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 841
                self.match(ReqBlockParser.LP)
                self.state = 842
                self.match(ReqBlockParser.SYMBOL)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 843
                    self.list_or()
                    self.state = 844
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 851
                self.match(ReqBlockParser.RP)


            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 854
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ReqBlockParser.MINAREA)
            self.state = 858
            self.match(ReqBlockParser.NUMBER)
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 859
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(ReqBlockParser.MINCLASS)
            self.state = 863
            self.match(ReqBlockParser.NUMBER)
            self.state = 864
            self.course_list()
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 865
                self.tag()


            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 868
                    self.display() 
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 874
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 878
            self.match(ReqBlockParser.NUMBER)
            self.state = 879
            self.course_list()
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 880
                self.tag()


            self.state = 886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 883
                    self.display() 
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 889
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(ReqBlockParser.MINGPA)
            self.state = 893
            self.match(ReqBlockParser.NUMBER)
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 894
                self.course_list()

            elif la_ == 2:
                self.state = 895
                self.expression(0)


            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 898
                self.tag()


            self.state = 904
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 901
                    self.display() 
                self.state = 906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 907
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(ReqBlockParser.MINGRADE)
            self.state = 911
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 914
            self.match(ReqBlockParser.NUMBER)
            self.state = 915
            self.class_or_credit()
            self.state = 916
            self.match(ReqBlockParser.LP)
            self.state = 917
            self.match(ReqBlockParser.SYMBOL)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 918
                self.list_or()
                self.state = 919
                self.match(ReqBlockParser.SYMBOL)
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 926
            self.match(ReqBlockParser.RP)
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 927
                self.tag()


            self.state = 933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 930
                    self.display() 
                self.state = 935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(ReqBlockParser.MINRES)
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 937
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 938
                self.num_credits()
                pass


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 941
                self.display()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 947
                self.proxy_advice()


            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 950
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 954
            self.match(ReqBlockParser.NUMBER)
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 955
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(ReqBlockParser.MINTERM)
            self.state = 959
            self.match(ReqBlockParser.NUMBER)
            self.state = 960
            self.class_or_credit()
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 961
                self.course_list()


            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 964
                self.tag()


            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 967
                self.display()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(ReqBlockParser.NUMBER)
            self.state = 974
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 975
            self.match(ReqBlockParser.LP)
            self.state = 976
            self.expression(0)
            self.state = 977
            self.match(ReqBlockParser.RP)
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 978
                self.proxy_advice()


            self.state = 982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 981
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(ReqBlockParser.NUMBER)
            self.state = 985
            self.match(ReqBlockParser.CLASS)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 986
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(ReqBlockParser.NUMBER)
            self.state = 990
            self.match(ReqBlockParser.CREDIT)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 991
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(ReqBlockParser.SYMBOL)
            self.state = 995
            self.match(ReqBlockParser.EQ)
            self.state = 996
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_adviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_ADVICE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PROXY_ADVICE)
            else:
                return self.getToken(ReqBlockParser.PROXY_ADVICE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.STRING)
            else:
                return self.getToken(ReqBlockParser.STRING, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_proxy_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_advice" ):
                listener.enterProxy_advice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_advice" ):
                listener.exitProxy_advice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProxy_advice" ):
                return visitor.visitProxy_advice(self)
            else:
                return visitor.visitChildren(self)




    def proxy_advice(self):

        localctx = ReqBlockParser.Proxy_adviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_proxy_advice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1000
                    self.match(ReqBlockParser.PROXY_ADVICE)
                    self.state = 1001
                    self.match(ReqBlockParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 1004 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1008
                    self.match(ReqBlockParser.REMARK)
                    self.state = 1009
                    self.string()
                    self.state = 1011
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 1010
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 1015 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1021
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 1018
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 1019
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 1020
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RULE_TAG)
            else:
                return self.getToken(ReqBlockParser.RULE_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1026
                    self.match(ReqBlockParser.RULE_TAG)
                    self.state = 1027
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 1030 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 1033
            self.expression(0)
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1034
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.match(ReqBlockParser.NUMBER)
                self.state = 1039
                self.class_or_credit()


            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1042
                self.expression(0)


            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(ReqBlockParser.TAG)
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 1055
                self.match(ReqBlockParser.EQ)
                self.state = 1056
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ReqBlockParser.NUMBER - 77)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 77)) | (1 << (ReqBlockParser.SYMBOL - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(ReqBlockParser.UNDER)
            self.state = 1060
            self.match(ReqBlockParser.NUMBER)
            self.state = 1061
            self.class_or_credit()
            self.state = 1062
            self.course_list()
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 1063
                self.display()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1069
                self.proxy_advice()


            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 1072
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(ReqBlockParser.LP)
            self.state = 1076
            self.match(ReqBlockParser.WITH)
            self.state = 1077
            self.expression(0)
            self.state = 1078
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1081
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 1082
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 1083
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 1084
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 1085
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 1086
                self.string()
                pass

            elif la_ == 7:
                self.state = 1087
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 1088
                self.match(ReqBlockParser.LP)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 1089
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 1092
                self.expression(0)
                self.state = 1093
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1110
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1108
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1097
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1098
                        self.relational_op()
                        self.state = 1099
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1101
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1102
                        self.logical_op()
                        self.state = 1103
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1105
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1106
                        self.match(ReqBlockParser.COMMA)
                        self.state = 1107
                        self.expression(10)
                        pass

             
                self.state = 1112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (ReqBlockParser.IS - 72)) | (1 << (ReqBlockParser.ISNT - 72)) | (1 << (ReqBlockParser.EQ - 72)) | (1 << (ReqBlockParser.GE - 72)) | (1 << (ReqBlockParser.GT - 72)) | (1 << (ReqBlockParser.LE - 72)) | (1 << (ReqBlockParser.LT - 72)) | (1 << (ReqBlockParser.NE - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[92] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




