# Generated from ReqBlock.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,106,1026,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,5,0,206,8,0,10,0,12,
        0,209,9,0,1,0,1,0,1,0,1,0,3,0,215,8,0,1,0,1,0,1,0,1,1,5,1,221,8,
        1,10,1,12,1,224,9,1,1,2,5,2,227,8,2,10,2,12,2,230,9,2,1,3,1,3,1,
        3,3,3,235,8,3,1,3,1,3,5,3,239,8,3,10,3,12,3,242,9,3,1,3,3,3,245,
        8,3,1,4,1,4,1,4,5,4,250,8,4,10,4,12,4,253,9,4,1,5,3,5,256,8,5,1,
        5,3,5,259,8,5,1,5,1,5,5,5,263,8,5,10,5,12,5,266,9,5,1,5,3,5,269,
        8,5,1,6,1,6,3,6,273,8,6,1,6,1,6,4,6,277,8,6,11,6,12,6,278,1,7,1,
        7,3,7,283,8,7,1,7,1,7,4,7,287,8,7,11,7,12,7,288,1,8,1,8,1,8,1,8,
        3,8,295,8,8,1,9,1,9,1,9,1,9,3,9,301,8,9,1,10,1,10,1,10,1,10,3,10,
        307,8,10,1,11,1,11,1,11,1,11,1,11,3,11,314,8,11,1,12,1,12,1,12,3,
        12,319,8,12,1,12,1,12,5,12,323,8,12,10,12,12,12,326,9,12,1,13,1,
        13,3,13,330,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,349,8,14,1,15,1,15,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,360,8,17,1,17,3,17,363,8,17,
        1,18,1,18,1,18,3,18,368,8,18,1,19,1,19,4,19,372,8,19,11,19,12,19,
        373,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,403,8,20,1,21,1,21,1,21,1,21,1,21,3,21,410,8,21,1,
        21,3,21,413,8,21,1,22,1,22,1,22,3,22,418,8,22,1,23,1,23,4,23,422,
        8,23,11,23,12,23,423,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,440,8,24,1,25,1,25,1,25,1,25,1,25,
        3,25,447,8,25,1,25,1,25,1,25,1,25,5,25,453,8,25,10,25,12,25,456,
        9,25,1,26,1,26,1,26,1,26,5,26,462,8,26,10,26,12,26,465,9,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,475,8,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,4,28,489,8,28,11,28,
        12,28,490,1,28,1,28,1,28,3,28,496,8,28,1,28,1,28,1,28,1,28,5,28,
        502,8,28,10,28,12,28,505,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        5,29,514,8,29,10,29,12,29,517,9,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,5,30,526,8,30,10,30,12,30,529,9,30,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,537,8,31,1,31,1,31,1,31,1,31,5,31,543,8,31,10,31,12,31,
        546,9,31,1,32,1,32,1,32,1,32,1,32,5,32,553,8,32,10,32,12,32,556,
        9,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,564,8,33,10,33,12,33,567,
        9,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,576,8,35,1,35,1,35,
        1,35,3,35,581,8,35,3,35,583,8,35,1,35,3,35,586,8,35,1,35,1,35,1,
        35,1,35,5,35,592,8,35,10,35,12,35,595,9,35,1,35,3,35,598,8,35,1,
        36,1,36,3,36,602,8,36,1,36,1,36,1,36,3,36,607,8,36,3,36,609,8,36,
        1,36,3,36,612,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,620,8,36,1,
        36,5,36,623,8,36,10,36,12,36,626,9,36,1,37,1,37,3,37,630,8,37,1,
        38,1,38,3,38,634,8,38,1,39,1,39,3,39,638,8,39,1,40,1,40,3,40,642,
        8,40,1,41,1,41,3,41,646,8,41,1,42,1,42,3,42,650,8,42,1,43,1,43,3,
        43,654,8,43,1,44,1,44,3,44,658,8,44,1,45,1,45,3,45,662,8,45,1,46,
        1,46,3,46,666,8,46,1,47,1,47,3,47,670,8,47,1,48,1,48,3,48,674,8,
        48,1,49,1,49,3,49,678,8,49,1,50,1,50,3,50,682,8,50,1,51,1,51,1,52,
        1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,3,56,698,
        8,56,1,57,1,57,4,57,702,8,57,11,57,12,57,703,1,58,1,58,4,58,708,
        8,58,11,58,12,58,709,1,59,1,59,1,59,1,59,1,59,3,59,717,8,59,1,60,
        1,60,4,60,721,8,60,11,60,12,60,722,1,61,1,61,1,61,1,62,1,62,1,63,
        1,63,1,63,3,63,733,8,63,1,64,1,64,1,64,1,64,3,64,739,8,64,1,64,1,
        64,3,64,743,8,64,1,64,3,64,746,8,64,1,64,3,64,749,8,64,1,64,3,64,
        752,8,64,1,65,1,65,1,65,3,65,757,8,65,1,65,3,65,760,8,65,1,66,1,
        66,1,66,3,66,765,8,66,1,66,3,66,768,8,66,1,67,1,67,1,67,1,67,3,67,
        774,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,784,8,68,10,
        68,12,68,787,9,68,1,68,1,68,3,68,791,8,68,1,69,1,69,1,69,3,69,796,
        8,69,1,70,1,70,1,70,1,70,3,70,802,8,70,1,70,3,70,805,8,70,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,815,8,71,10,71,12,71,818,9,
        71,1,71,3,71,821,8,71,1,71,3,71,824,8,71,1,72,1,72,1,72,3,72,829,
        8,72,1,73,1,73,1,73,1,73,3,73,835,8,73,1,73,3,73,838,8,73,1,74,1,
        74,1,74,1,74,3,74,844,8,74,1,74,3,74,847,8,74,1,75,1,75,1,75,1,75,
        3,75,853,8,75,1,75,3,75,856,8,75,1,75,3,75,859,8,75,1,76,1,76,1,
        76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,5,77,872,8,77,10,77,12,
        77,875,9,77,1,77,1,77,3,77,879,8,77,1,77,3,77,882,8,77,1,78,1,78,
        1,78,3,78,887,8,78,1,78,3,78,890,8,78,1,78,3,78,893,8,78,1,79,1,
        79,1,79,3,79,898,8,79,1,80,1,80,1,80,1,80,3,80,904,8,80,1,80,3,80,
        907,8,80,1,80,3,80,910,8,80,1,81,1,81,1,81,3,81,915,8,81,1,82,1,
        82,1,82,3,82,920,8,82,1,83,1,83,3,83,924,8,83,1,83,3,83,927,8,83,
        1,84,1,84,1,85,1,85,3,85,933,8,85,1,86,1,86,1,87,1,87,1,88,1,88,
        1,88,3,88,942,8,88,4,88,944,8,88,11,88,12,88,945,1,89,1,89,4,89,
        950,8,89,11,89,12,89,951,1,90,1,90,1,90,3,90,957,8,90,1,91,1,91,
        1,91,3,91,962,8,91,1,91,3,91,965,8,91,1,91,3,91,968,8,91,1,92,1,
        92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,3,95,979,8,95,1,96,1,96,1,
        96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,3,97,1000,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,5,97,1013,8,97,10,97,12,97,1016,9,97,1,98,
        1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,1,207,1,194,102,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,0,11,1,0,65,66,1,0,68,69,1,0,56,57,1,0,14,
        15,2,0,20,20,23,23,2,0,24,24,60,60,2,0,76,77,79,79,1,0,74,75,4,0,
        71,72,89,91,94,95,98,98,2,0,75,75,87,87,2,0,74,74,100,100,1165,0,
        207,1,0,0,0,2,222,1,0,0,0,4,228,1,0,0,0,6,231,1,0,0,0,8,246,1,0,
        0,0,10,255,1,0,0,0,12,276,1,0,0,0,14,286,1,0,0,0,16,290,1,0,0,0,
        18,296,1,0,0,0,20,306,1,0,0,0,22,313,1,0,0,0,24,315,1,0,0,0,26,327,
        1,0,0,0,28,348,1,0,0,0,30,350,1,0,0,0,32,352,1,0,0,0,34,354,1,0,
        0,0,36,364,1,0,0,0,38,369,1,0,0,0,40,402,1,0,0,0,42,404,1,0,0,0,
        44,414,1,0,0,0,46,419,1,0,0,0,48,439,1,0,0,0,50,441,1,0,0,0,52,457,
        1,0,0,0,54,466,1,0,0,0,56,478,1,0,0,0,58,506,1,0,0,0,60,518,1,0,
        0,0,62,530,1,0,0,0,64,547,1,0,0,0,66,557,1,0,0,0,68,568,1,0,0,0,
        70,575,1,0,0,0,72,601,1,0,0,0,74,627,1,0,0,0,76,631,1,0,0,0,78,635,
        1,0,0,0,80,639,1,0,0,0,82,643,1,0,0,0,84,647,1,0,0,0,86,651,1,0,
        0,0,88,655,1,0,0,0,90,659,1,0,0,0,92,663,1,0,0,0,94,667,1,0,0,0,
        96,671,1,0,0,0,98,675,1,0,0,0,100,679,1,0,0,0,102,683,1,0,0,0,104,
        685,1,0,0,0,106,687,1,0,0,0,108,689,1,0,0,0,110,691,1,0,0,0,112,
        694,1,0,0,0,114,701,1,0,0,0,116,707,1,0,0,0,118,716,1,0,0,0,120,
        720,1,0,0,0,122,724,1,0,0,0,124,727,1,0,0,0,126,729,1,0,0,0,128,
        734,1,0,0,0,130,753,1,0,0,0,132,761,1,0,0,0,134,769,1,0,0,0,136,
        775,1,0,0,0,138,792,1,0,0,0,140,797,1,0,0,0,142,806,1,0,0,0,144,
        825,1,0,0,0,146,830,1,0,0,0,148,839,1,0,0,0,150,848,1,0,0,0,152,
        860,1,0,0,0,154,863,1,0,0,0,156,883,1,0,0,0,158,894,1,0,0,0,160,
        899,1,0,0,0,162,911,1,0,0,0,164,916,1,0,0,0,166,921,1,0,0,0,168,
        928,1,0,0,0,170,932,1,0,0,0,172,934,1,0,0,0,174,936,1,0,0,0,176,
        943,1,0,0,0,178,949,1,0,0,0,180,953,1,0,0,0,182,958,1,0,0,0,184,
        969,1,0,0,0,186,971,1,0,0,0,188,973,1,0,0,0,190,975,1,0,0,0,192,
        980,1,0,0,0,194,999,1,0,0,0,196,1017,1,0,0,0,198,1019,1,0,0,0,200,
        1021,1,0,0,0,202,1023,1,0,0,0,204,206,9,0,0,0,205,204,1,0,0,0,206,
        209,1,0,0,0,207,208,1,0,0,0,207,205,1,0,0,0,208,210,1,0,0,0,209,
        207,1,0,0,0,210,211,5,16,0,0,211,214,3,2,1,0,212,213,5,104,0,0,213,
        215,3,4,2,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,
        217,5,25,0,0,217,218,5,0,0,1,218,1,1,0,0,0,219,221,3,40,20,0,220,
        219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,
        3,1,0,0,0,224,222,1,0,0,0,225,227,3,48,24,0,226,225,1,0,0,0,227,
        230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,5,1,0,0,0,230,228,
        1,0,0,0,231,234,3,10,5,0,232,235,3,12,6,0,233,235,3,14,7,0,234,232,
        1,0,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,240,1,0,0,0,236,239,
        3,16,8,0,237,239,3,18,9,0,238,236,1,0,0,0,238,237,1,0,0,0,239,242,
        1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,240,
        1,0,0,0,243,245,3,118,59,0,244,243,1,0,0,0,244,245,1,0,0,0,245,7,
        1,0,0,0,246,247,3,22,11,0,247,251,3,20,10,0,248,250,3,192,96,0,249,
        248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,
        9,1,0,0,0,253,251,1,0,0,0,254,256,3,106,53,0,255,254,1,0,0,0,255,
        256,1,0,0,0,256,258,1,0,0,0,257,259,3,22,11,0,258,257,1,0,0,0,258,
        259,1,0,0,0,259,260,1,0,0,0,260,264,3,20,10,0,261,263,3,192,96,0,
        262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,
        265,268,1,0,0,0,266,264,1,0,0,0,267,269,3,104,52,0,268,267,1,0,0,
        0,268,269,1,0,0,0,269,11,1,0,0,0,270,272,3,202,101,0,271,273,3,104,
        52,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,3,10,
        5,0,275,277,1,0,0,0,276,270,1,0,0,0,277,278,1,0,0,0,278,276,1,0,
        0,0,278,279,1,0,0,0,279,13,1,0,0,0,280,282,3,200,100,0,281,283,3,
        104,52,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,
        3,10,5,0,285,287,1,0,0,0,286,280,1,0,0,0,287,288,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,15,1,0,0,0,290,291,5,27,0,0,291,294,
        3,10,5,0,292,295,3,12,6,0,293,295,3,14,7,0,294,292,1,0,0,0,294,293,
        1,0,0,0,294,295,1,0,0,0,295,17,1,0,0,0,296,297,5,31,0,0,297,300,
        3,10,5,0,298,301,3,12,6,0,299,301,3,14,7,0,300,298,1,0,0,0,300,299,
        1,0,0,0,300,301,1,0,0,0,301,19,1,0,0,0,302,307,3,188,94,0,303,307,
        5,76,0,0,304,307,5,77,0,0,305,307,5,78,0,0,306,302,1,0,0,0,306,303,
        1,0,0,0,306,304,1,0,0,0,306,305,1,0,0,0,307,21,1,0,0,0,308,314,3,
        188,94,0,309,314,3,186,93,0,310,314,5,78,0,0,311,314,5,18,0,0,312,
        314,5,71,0,0,313,308,1,0,0,0,313,309,1,0,0,0,313,310,1,0,0,0,313,
        311,1,0,0,0,313,312,1,0,0,0,314,23,1,0,0,0,315,324,3,6,3,0,316,318,
        3,28,14,0,317,319,3,190,95,0,318,317,1,0,0,0,318,319,1,0,0,0,319,
        323,1,0,0,0,320,323,3,118,59,0,321,323,3,176,88,0,322,316,1,0,0,
        0,322,320,1,0,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,
        0,324,325,1,0,0,0,325,25,1,0,0,0,326,324,1,0,0,0,327,329,3,24,12,
        0,328,330,3,126,63,0,329,328,1,0,0,0,329,330,1,0,0,0,330,27,1,0,
        0,0,331,349,3,124,62,0,332,349,3,134,67,0,333,349,3,136,68,0,334,
        349,3,138,69,0,335,349,3,142,71,0,336,349,3,140,70,0,337,349,3,144,
        72,0,338,349,3,146,73,0,339,349,3,148,74,0,340,349,3,150,75,0,341,
        349,3,152,76,0,342,349,3,154,77,0,343,349,3,158,79,0,344,349,3,118,
        59,0,345,349,3,178,89,0,346,349,3,180,90,0,347,349,3,182,91,0,348,
        331,1,0,0,0,348,332,1,0,0,0,348,333,1,0,0,0,348,334,1,0,0,0,348,
        335,1,0,0,0,348,336,1,0,0,0,348,337,1,0,0,0,348,338,1,0,0,0,348,
        339,1,0,0,0,348,340,1,0,0,0,348,341,1,0,0,0,348,342,1,0,0,0,348,
        343,1,0,0,0,348,344,1,0,0,0,348,345,1,0,0,0,348,346,1,0,0,0,348,
        347,1,0,0,0,349,29,1,0,0,0,350,351,7,0,0,0,351,31,1,0,0,0,352,353,
        7,1,0,0,353,33,1,0,0,0,354,355,5,70,0,0,355,356,3,194,97,0,356,359,
        5,73,0,0,357,360,3,40,20,0,358,360,3,38,19,0,359,357,1,0,0,0,359,
        358,1,0,0,0,360,362,1,0,0,0,361,363,3,36,18,0,362,361,1,0,0,0,362,
        363,1,0,0,0,363,35,1,0,0,0,364,367,5,67,0,0,365,368,3,40,20,0,366,
        368,3,38,19,0,367,365,1,0,0,0,367,366,1,0,0,0,368,37,1,0,0,0,369,
        371,3,30,15,0,370,372,3,40,20,0,371,370,1,0,0,0,372,373,1,0,0,0,
        373,371,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,3,32,16,
        0,376,39,1,0,0,0,377,403,3,110,55,0,378,403,3,70,35,0,379,403,3,
        34,17,0,380,403,3,74,37,0,381,403,3,76,38,0,382,403,3,78,39,0,383,
        403,3,80,40,0,384,403,3,82,41,0,385,403,3,84,42,0,386,403,3,86,43,
        0,387,403,3,88,44,0,388,403,3,90,45,0,389,403,3,92,46,0,390,403,
        3,94,47,0,391,403,3,96,48,0,392,403,3,98,49,0,393,403,3,100,50,0,
        394,403,3,120,60,0,395,403,3,128,64,0,396,403,3,62,31,0,397,403,
        3,172,86,0,398,403,3,118,59,0,399,403,3,64,32,0,400,403,3,184,92,
        0,401,403,3,66,33,0,402,377,1,0,0,0,402,378,1,0,0,0,402,379,1,0,
        0,0,402,380,1,0,0,0,402,381,1,0,0,0,402,382,1,0,0,0,402,383,1,0,
        0,0,402,384,1,0,0,0,402,385,1,0,0,0,402,386,1,0,0,0,402,387,1,0,
        0,0,402,388,1,0,0,0,402,389,1,0,0,0,402,390,1,0,0,0,402,391,1,0,
        0,0,402,392,1,0,0,0,402,393,1,0,0,0,402,394,1,0,0,0,402,395,1,0,
        0,0,402,396,1,0,0,0,402,397,1,0,0,0,402,398,1,0,0,0,402,399,1,0,
        0,0,402,400,1,0,0,0,402,401,1,0,0,0,403,41,1,0,0,0,404,405,5,70,
        0,0,405,406,3,194,97,0,406,409,5,73,0,0,407,410,3,48,24,0,408,410,
        3,46,23,0,409,407,1,0,0,0,409,408,1,0,0,0,410,412,1,0,0,0,411,413,
        3,44,22,0,412,411,1,0,0,0,412,413,1,0,0,0,413,43,1,0,0,0,414,417,
        5,67,0,0,415,418,3,48,24,0,416,418,3,46,23,0,417,415,1,0,0,0,417,
        416,1,0,0,0,418,45,1,0,0,0,419,421,3,30,15,0,420,422,3,48,24,0,421,
        420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,
        425,1,0,0,0,425,426,3,32,16,0,426,47,1,0,0,0,427,440,3,58,29,0,428,
        440,3,60,30,0,429,440,3,72,36,0,430,440,3,42,21,0,431,440,3,26,13,
        0,432,440,3,112,56,0,433,440,3,50,25,0,434,440,3,62,31,0,435,440,
        3,118,59,0,436,440,3,176,88,0,437,440,3,64,32,0,438,440,3,56,28,
        0,439,427,1,0,0,0,439,428,1,0,0,0,439,429,1,0,0,0,439,430,1,0,0,
        0,439,431,1,0,0,0,439,432,1,0,0,0,439,433,1,0,0,0,439,434,1,0,0,
        0,439,435,1,0,0,0,439,436,1,0,0,0,439,437,1,0,0,0,439,438,1,0,0,
        0,440,49,1,0,0,0,441,442,5,76,0,0,442,443,5,28,0,0,443,454,3,52,
        26,0,444,446,3,28,14,0,445,447,3,190,95,0,446,445,1,0,0,0,446,447,
        1,0,0,0,447,453,1,0,0,0,448,453,3,124,62,0,449,453,3,118,59,0,450,
        453,3,176,88,0,451,453,3,126,63,0,452,444,1,0,0,0,452,448,1,0,0,
        0,452,449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,456,1,0,0,
        0,454,452,1,0,0,0,454,455,1,0,0,0,455,51,1,0,0,0,456,454,1,0,0,0,
        457,463,3,54,27,0,458,459,3,196,98,0,459,460,3,54,27,0,460,462,1,
        0,0,0,461,458,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,
        0,0,0,464,53,1,0,0,0,465,463,1,0,0,0,466,474,5,96,0,0,467,475,3,
        58,29,0,468,475,3,60,30,0,469,475,3,72,36,0,470,475,3,26,13,0,471,
        475,3,50,25,0,472,475,3,62,31,0,473,475,3,64,32,0,474,467,1,0,0,
        0,474,468,1,0,0,0,474,469,1,0,0,0,474,470,1,0,0,0,474,471,1,0,0,
        0,474,472,1,0,0,0,474,473,1,0,0,0,475,476,1,0,0,0,476,477,5,102,
        0,0,477,55,1,0,0,0,478,488,5,17,0,0,479,489,3,42,21,0,480,489,3,
        58,29,0,481,489,3,60,30,0,482,489,3,72,36,0,483,489,3,112,56,0,484,
        489,3,26,13,0,485,489,3,50,25,0,486,489,3,62,31,0,487,489,3,64,32,
        0,488,479,1,0,0,0,488,480,1,0,0,0,488,481,1,0,0,0,488,482,1,0,0,
        0,488,483,1,0,0,0,488,484,1,0,0,0,488,485,1,0,0,0,488,486,1,0,0,
        0,488,487,1,0,0,0,489,490,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,
        0,491,492,1,0,0,0,492,503,5,26,0,0,493,495,3,28,14,0,494,496,3,190,
        95,0,495,494,1,0,0,0,495,496,1,0,0,0,496,502,1,0,0,0,497,502,3,124,
        62,0,498,502,3,118,59,0,499,502,3,176,88,0,500,502,3,126,63,0,501,
        493,1,0,0,0,501,497,1,0,0,0,501,498,1,0,0,0,501,499,1,0,0,0,501,
        500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,
        57,1,0,0,0,505,503,1,0,0,0,506,507,5,76,0,0,507,508,5,18,0,0,508,
        515,3,194,97,0,509,514,3,124,62,0,510,514,3,118,59,0,511,514,3,178,
        89,0,512,514,3,126,63,0,513,509,1,0,0,0,513,510,1,0,0,0,513,511,
        1,0,0,0,513,512,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,
        1,0,0,0,516,59,1,0,0,0,517,515,1,0,0,0,518,519,5,76,0,0,519,520,
        5,19,0,0,520,527,3,194,97,0,521,526,3,124,62,0,522,526,3,118,59,
        0,523,526,3,178,89,0,524,526,3,126,63,0,525,521,1,0,0,0,525,522,
        1,0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,
        1,0,0,0,527,528,1,0,0,0,528,61,1,0,0,0,529,527,1,0,0,0,530,531,5,
        76,0,0,531,536,5,50,0,0,532,533,5,96,0,0,533,534,3,194,97,0,534,
        535,5,102,0,0,535,537,1,0,0,0,536,532,1,0,0,0,536,537,1,0,0,0,537,
        544,1,0,0,0,538,543,3,124,62,0,539,543,3,118,59,0,540,543,3,178,
        89,0,541,543,3,126,63,0,542,538,1,0,0,0,542,539,1,0,0,0,542,540,
        1,0,0,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,
        1,0,0,0,545,63,1,0,0,0,546,544,1,0,0,0,547,554,7,2,0,0,548,553,3,
        124,62,0,549,553,3,118,59,0,550,553,3,178,89,0,551,553,3,126,63,
        0,552,548,1,0,0,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,1,0,0,
        0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,65,1,0,0,0,
        556,554,1,0,0,0,557,558,5,63,0,0,558,559,5,76,0,0,559,560,3,108,
        54,0,560,565,3,6,3,0,561,564,3,118,59,0,562,564,3,122,61,0,563,561,
        1,0,0,0,563,562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,
        1,0,0,0,566,67,1,0,0,0,567,565,1,0,0,0,568,569,5,96,0,0,569,570,
        3,102,51,0,570,571,5,76,0,0,571,572,5,102,0,0,572,69,1,0,0,0,573,
        576,3,162,81,0,574,576,3,164,82,0,575,573,1,0,0,0,575,574,1,0,0,
        0,576,582,1,0,0,0,577,580,3,196,98,0,578,581,3,162,81,0,579,581,
        3,164,82,0,580,578,1,0,0,0,580,579,1,0,0,0,581,583,1,0,0,0,582,577,
        1,0,0,0,582,583,1,0,0,0,583,593,1,0,0,0,584,586,5,71,0,0,585,584,
        1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,592,3,174,87,0,588,592,
        3,118,59,0,589,592,3,120,60,0,590,592,3,190,95,0,591,585,1,0,0,0,
        591,588,1,0,0,0,591,589,1,0,0,0,591,590,1,0,0,0,592,595,1,0,0,0,
        593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,
        596,598,3,122,61,0,597,596,1,0,0,0,597,598,1,0,0,0,598,71,1,0,0,
        0,599,602,3,162,81,0,600,602,3,164,82,0,601,599,1,0,0,0,601,600,
        1,0,0,0,602,608,1,0,0,0,603,606,3,196,98,0,604,607,3,162,81,0,605,
        607,3,164,82,0,606,604,1,0,0,0,606,605,1,0,0,0,607,609,1,0,0,0,608,
        603,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,612,3,24,12,0,611,
        610,1,0,0,0,611,612,1,0,0,0,612,624,1,0,0,0,613,623,3,124,62,0,614,
        623,3,118,59,0,615,623,3,182,91,0,616,623,3,178,89,0,617,619,3,126,
        63,0,618,620,3,176,88,0,619,618,1,0,0,0,619,620,1,0,0,0,620,623,
        1,0,0,0,621,623,3,190,95,0,622,613,1,0,0,0,622,614,1,0,0,0,622,615,
        1,0,0,0,622,616,1,0,0,0,622,617,1,0,0,0,622,621,1,0,0,0,623,626,
        1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,73,1,0,0,0,626,624,1,
        0,0,0,627,629,3,130,65,0,628,630,3,122,61,0,629,628,1,0,0,0,629,
        630,1,0,0,0,630,75,1,0,0,0,631,633,3,132,66,0,632,634,3,122,61,0,
        633,632,1,0,0,0,633,634,1,0,0,0,634,77,1,0,0,0,635,637,3,134,67,
        0,636,638,3,122,61,0,637,636,1,0,0,0,637,638,1,0,0,0,638,79,1,0,
        0,0,639,641,3,136,68,0,640,642,3,122,61,0,641,640,1,0,0,0,641,642,
        1,0,0,0,642,81,1,0,0,0,643,645,3,140,70,0,644,646,3,122,61,0,645,
        644,1,0,0,0,645,646,1,0,0,0,646,83,1,0,0,0,647,649,3,142,71,0,648,
        650,3,122,61,0,649,648,1,0,0,0,649,650,1,0,0,0,650,85,1,0,0,0,651,
        653,3,146,73,0,652,654,3,122,61,0,653,652,1,0,0,0,653,654,1,0,0,
        0,654,87,1,0,0,0,655,657,3,148,74,0,656,658,3,122,61,0,657,656,1,
        0,0,0,657,658,1,0,0,0,658,89,1,0,0,0,659,661,3,150,75,0,660,662,
        3,122,61,0,661,660,1,0,0,0,661,662,1,0,0,0,662,91,1,0,0,0,663,665,
        3,152,76,0,664,666,3,122,61,0,665,664,1,0,0,0,665,666,1,0,0,0,666,
        93,1,0,0,0,667,669,3,154,77,0,668,670,3,122,61,0,669,668,1,0,0,0,
        669,670,1,0,0,0,670,95,1,0,0,0,671,673,3,156,78,0,672,674,3,122,
        61,0,673,672,1,0,0,0,673,674,1,0,0,0,674,97,1,0,0,0,675,677,3,160,
        80,0,676,678,3,122,61,0,677,676,1,0,0,0,677,678,1,0,0,0,678,99,1,
        0,0,0,679,681,3,182,91,0,680,682,3,122,61,0,681,680,1,0,0,0,681,
        682,1,0,0,0,682,101,1,0,0,0,683,684,7,3,0,0,684,103,1,0,0,0,685,
        686,5,103,0,0,686,105,1,0,0,0,687,688,5,97,0,0,688,107,1,0,0,0,689,
        690,7,4,0,0,690,109,1,0,0,0,691,692,5,21,0,0,692,693,3,194,97,0,
        693,111,1,0,0,0,694,695,5,22,0,0,695,697,3,194,97,0,696,698,5,104,
        0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,113,1,0,0,0,699,700,5,53,
        0,0,700,702,3,186,93,0,701,699,1,0,0,0,702,703,1,0,0,0,703,701,1,
        0,0,0,703,704,1,0,0,0,704,115,1,0,0,0,705,706,5,6,0,0,706,708,3,
        186,93,0,707,705,1,0,0,0,708,709,1,0,0,0,709,707,1,0,0,0,709,710,
        1,0,0,0,710,117,1,0,0,0,711,717,3,116,58,0,712,713,3,116,58,0,713,
        714,3,114,57,0,714,717,1,0,0,0,715,717,3,114,57,0,716,711,1,0,0,
        0,716,712,1,0,0,0,716,715,1,0,0,0,717,119,1,0,0,0,718,719,5,29,0,
        0,719,721,3,166,83,0,720,718,1,0,0,0,721,722,1,0,0,0,722,720,1,0,
        0,0,722,723,1,0,0,0,723,121,1,0,0,0,724,725,5,32,0,0,725,726,3,186,
        93,0,726,123,1,0,0,0,727,728,5,30,0,0,728,125,1,0,0,0,729,730,5,
        32,0,0,730,732,3,186,93,0,731,733,5,104,0,0,732,731,1,0,0,0,732,
        733,1,0,0,0,733,127,1,0,0,0,734,735,5,33,0,0,735,738,5,76,0,0,736,
        737,5,52,0,0,737,739,5,76,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,
        740,1,0,0,0,740,742,3,108,54,0,741,743,3,6,3,0,742,741,1,0,0,0,742,
        743,1,0,0,0,743,745,1,0,0,0,744,746,3,190,95,0,745,744,1,0,0,0,745,
        746,1,0,0,0,746,748,1,0,0,0,747,749,3,118,59,0,748,747,1,0,0,0,748,
        749,1,0,0,0,749,751,1,0,0,0,750,752,3,122,61,0,751,750,1,0,0,0,751,
        752,1,0,0,0,752,129,1,0,0,0,753,754,5,34,0,0,754,756,5,76,0,0,755,
        757,3,6,3,0,756,755,1,0,0,0,756,757,1,0,0,0,757,759,1,0,0,0,758,
        760,3,190,95,0,759,758,1,0,0,0,759,760,1,0,0,0,760,131,1,0,0,0,761,
        762,5,35,0,0,762,764,5,76,0,0,763,765,3,6,3,0,764,763,1,0,0,0,764,
        765,1,0,0,0,765,767,1,0,0,0,766,768,3,190,95,0,767,766,1,0,0,0,767,
        768,1,0,0,0,768,133,1,0,0,0,769,770,5,36,0,0,770,771,5,76,0,0,771,
        773,3,108,54,0,772,774,3,190,95,0,773,772,1,0,0,0,773,774,1,0,0,
        0,774,135,1,0,0,0,775,776,5,37,0,0,776,777,5,76,0,0,777,778,3,108,
        54,0,778,779,5,96,0,0,779,785,5,79,0,0,780,781,3,200,100,0,781,782,
        5,79,0,0,782,784,1,0,0,0,783,780,1,0,0,0,784,787,1,0,0,0,785,783,
        1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,790,
        5,102,0,0,789,791,3,190,95,0,790,789,1,0,0,0,790,791,1,0,0,0,791,
        137,1,0,0,0,792,793,5,38,0,0,793,795,5,76,0,0,794,796,3,190,95,0,
        795,794,1,0,0,0,795,796,1,0,0,0,796,139,1,0,0,0,797,798,5,39,0,0,
        798,799,5,76,0,0,799,801,3,108,54,0,800,802,3,6,3,0,801,800,1,0,
        0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,805,3,190,95,0,804,803,1,
        0,0,0,804,805,1,0,0,0,805,141,1,0,0,0,806,807,5,40,0,0,807,808,5,
        76,0,0,808,820,3,108,54,0,809,810,5,96,0,0,810,816,5,79,0,0,811,
        812,3,200,100,0,812,813,5,79,0,0,813,815,1,0,0,0,814,811,1,0,0,0,
        815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,
        818,816,1,0,0,0,819,821,5,102,0,0,820,809,1,0,0,0,820,821,1,0,0,
        0,821,823,1,0,0,0,822,824,3,190,95,0,823,822,1,0,0,0,823,824,1,0,
        0,0,824,143,1,0,0,0,825,826,5,41,0,0,826,828,5,76,0,0,827,829,3,
        190,95,0,828,827,1,0,0,0,828,829,1,0,0,0,829,145,1,0,0,0,830,831,
        5,44,0,0,831,832,5,76,0,0,832,834,3,6,3,0,833,835,3,190,95,0,834,
        833,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,3,118,59,0,837,
        836,1,0,0,0,837,838,1,0,0,0,838,147,1,0,0,0,839,840,5,45,0,0,840,
        841,5,76,0,0,841,843,3,6,3,0,842,844,3,190,95,0,843,842,1,0,0,0,
        843,844,1,0,0,0,844,846,1,0,0,0,845,847,3,118,59,0,846,845,1,0,0,
        0,846,847,1,0,0,0,847,149,1,0,0,0,848,849,5,42,0,0,849,852,5,76,
        0,0,850,853,3,6,3,0,851,853,3,194,97,0,852,850,1,0,0,0,852,851,1,
        0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,854,856,3,190,95,0,855,854,
        1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,859,3,118,59,0,858,857,
        1,0,0,0,858,859,1,0,0,0,859,151,1,0,0,0,860,861,5,43,0,0,861,862,
        5,76,0,0,862,153,1,0,0,0,863,864,5,46,0,0,864,865,5,76,0,0,865,866,
        3,108,54,0,866,867,5,96,0,0,867,873,5,79,0,0,868,869,3,200,100,0,
        869,870,5,79,0,0,870,872,1,0,0,0,871,868,1,0,0,0,872,875,1,0,0,0,
        873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,873,1,0,0,0,
        876,878,5,102,0,0,877,879,3,190,95,0,878,877,1,0,0,0,878,879,1,0,
        0,0,879,881,1,0,0,0,880,882,3,118,59,0,881,880,1,0,0,0,881,882,1,
        0,0,0,882,155,1,0,0,0,883,886,5,47,0,0,884,887,3,162,81,0,885,887,
        3,164,82,0,886,884,1,0,0,0,886,885,1,0,0,0,887,889,1,0,0,0,888,890,
        3,118,59,0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,
        3,190,95,0,892,891,1,0,0,0,892,893,1,0,0,0,893,157,1,0,0,0,894,895,
        5,48,0,0,895,897,5,76,0,0,896,898,3,190,95,0,897,896,1,0,0,0,897,
        898,1,0,0,0,898,159,1,0,0,0,899,900,5,49,0,0,900,901,5,76,0,0,901,
        903,3,108,54,0,902,904,3,6,3,0,903,902,1,0,0,0,903,904,1,0,0,0,904,
        906,1,0,0,0,905,907,3,190,95,0,906,905,1,0,0,0,906,907,1,0,0,0,907,
        909,1,0,0,0,908,910,3,118,59,0,909,908,1,0,0,0,909,910,1,0,0,0,910,
        161,1,0,0,0,911,912,5,76,0,0,912,914,5,20,0,0,913,915,3,68,34,0,
        914,913,1,0,0,0,914,915,1,0,0,0,915,163,1,0,0,0,916,917,5,76,0,0,
        917,919,5,23,0,0,918,920,3,68,34,0,919,918,1,0,0,0,919,920,1,0,0,
        0,920,165,1,0,0,0,921,923,3,168,84,0,922,924,5,89,0,0,923,922,1,
        0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,927,3,170,85,0,926,925,
        1,0,0,0,926,927,1,0,0,0,927,167,1,0,0,0,928,929,3,188,94,0,929,169,
        1,0,0,0,930,933,3,186,93,0,931,933,3,188,94,0,932,930,1,0,0,0,932,
        931,1,0,0,0,933,171,1,0,0,0,934,935,5,51,0,0,935,173,1,0,0,0,936,
        937,5,54,0,0,937,175,1,0,0,0,938,939,5,55,0,0,939,941,3,186,93,0,
        940,942,5,104,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,
        0,943,938,1,0,0,0,944,945,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,
        0,946,177,1,0,0,0,947,948,5,58,0,0,948,950,3,166,83,0,949,947,1,
        0,0,0,950,951,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,179,1,
        0,0,0,953,954,5,62,0,0,954,956,3,194,97,0,955,957,3,190,95,0,956,
        955,1,0,0,0,956,957,1,0,0,0,957,181,1,0,0,0,958,961,7,5,0,0,959,
        960,5,76,0,0,960,962,3,108,54,0,961,959,1,0,0,0,961,962,1,0,0,0,
        962,964,1,0,0,0,963,965,3,194,97,0,964,963,1,0,0,0,964,965,1,0,0,
        0,965,967,1,0,0,0,966,968,3,190,95,0,967,966,1,0,0,0,967,968,1,0,
        0,0,968,183,1,0,0,0,969,970,5,59,0,0,970,185,1,0,0,0,971,972,5,1,
        0,0,972,187,1,0,0,0,973,974,5,79,0,0,974,189,1,0,0,0,975,978,5,61,
        0,0,976,977,5,89,0,0,977,979,7,6,0,0,978,976,1,0,0,0,978,979,1,0,
        0,0,979,191,1,0,0,0,980,981,5,96,0,0,981,982,5,64,0,0,982,983,3,
        194,97,0,983,984,5,102,0,0,984,193,1,0,0,0,985,986,6,97,-1,0,986,
        987,5,50,0,0,987,1000,3,194,97,12,988,1000,3,8,4,0,989,1000,3,22,
        11,0,990,1000,5,76,0,0,991,1000,5,101,0,0,992,1000,5,79,0,0,993,
        1000,3,186,93,0,994,1000,5,77,0,0,995,996,5,96,0,0,996,997,3,194,
        97,0,997,998,5,102,0,0,998,1000,1,0,0,0,999,985,1,0,0,0,999,988,
        1,0,0,0,999,989,1,0,0,0,999,990,1,0,0,0,999,991,1,0,0,0,999,992,
        1,0,0,0,999,993,1,0,0,0,999,994,1,0,0,0,999,995,1,0,0,0,1000,1014,
        1,0,0,0,1001,1002,10,11,0,0,1002,1003,3,198,99,0,1003,1004,3,194,
        97,12,1004,1013,1,0,0,0,1005,1006,10,10,0,0,1006,1007,3,196,98,0,
        1007,1008,3,194,97,11,1008,1013,1,0,0,0,1009,1010,10,9,0,0,1010,
        1011,5,87,0,0,1011,1013,3,194,97,10,1012,1001,1,0,0,0,1012,1005,
        1,0,0,0,1012,1009,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,
        1015,1,0,0,0,1015,195,1,0,0,0,1016,1014,1,0,0,0,1017,1018,7,7,0,
        0,1018,197,1,0,0,0,1019,1020,7,8,0,0,1020,199,1,0,0,0,1021,1022,
        7,9,0,0,1022,201,1,0,0,0,1023,1024,7,10,0,0,1024,203,1,0,0,0,143,
        207,214,222,228,234,238,240,244,251,255,258,264,268,272,278,282,
        288,294,300,306,313,318,322,324,329,348,359,362,367,373,402,409,
        412,417,423,439,446,452,454,463,474,488,490,495,501,503,513,515,
        525,527,536,542,544,552,554,563,565,575,580,582,585,591,593,597,
        601,606,608,611,619,622,624,629,633,637,641,645,649,653,657,661,
        665,669,673,677,681,697,703,709,716,722,732,738,742,745,748,751,
        756,759,764,767,773,785,790,795,801,804,816,820,823,828,834,837,
        843,846,852,855,858,873,878,881,886,889,892,897,903,906,909,914,
        919,923,926,932,941,945,951,956,961,964,967,978,999,1012,1014
    ]

class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'", "'*'", "<INVALID>", "'!'", "'`'", "'\\'", "':'", 
                     "','", "'\"'", "'='", "'>='", "'>'", "'#'", "'-'", 
                     "'<='", "'<'", "'('", "'['", "'<>'", "'%'", "'+'", 
                     "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "HIGH_PRIORITY", 
                      "IN", "LOW_PRIORITY", "NOCOUNT", "NOTGPA", "WHITESPACE", 
                      "ACCEPT", "ALLOW", "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", 
                      "CLASS", "COPY_HEADER", "COPY_RULES", "CREDIT", "DONT_SHARE", 
                      "ENDOT", "ENDSUB", "EXCEPT", "GROUP", "HEADER_TAG", 
                      "HIDE_RULE", "INCLUDING", "LABEL", "LASTRES", "MAXCLASS", 
                      "MAXCREDIT", "MAXPASSFAIL", "MAXPERDISC", "MAXSPREAD", 
                      "MAXTERM", "MAXTRANSFER", "MINAREA", "MINGPA", "MINGRADE", 
                      "MINCLASS", "MINCREDIT", "MINPERDISC", "MINRES", "MINSPREAD", 
                      "MINTERM", "NONCOURSE", "OPTIONAL", "OF", "PROXY_ADVICE", 
                      "PSEUDO", "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", 
                      "RULE_TAG", "STANDALONE", "SHARE", "TAG", "SAME_DISC", 
                      "UNDER", "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNOT", "THEN", "AND", "OR", 
                      "NUMBER", "CATALOG_NUMBER", "WILD", "SYMBOL", "AMPERSAND", 
                      "ASTERISK", "AT", "BANG", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "DBL_QUOTE", "EQ", "GE", "GT", "HASH", 
                      "HYPHEN", "LE", "LT", "LP", "L_SQB", "NE", "PERCENT", 
                      "PLUS", "QUESTION_MARK", "RP", "R_SQB", "SEMICOLON", 
                      "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_header = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_full_course = 4
    RULE_course_item = 5
    RULE_and_list = 6
    RULE_or_list = 7
    RULE_except_list = 8
    RULE_include_list = 9
    RULE_catalog_number = 10
    RULE_discipline = 11
    RULE_course_list_body = 12
    RULE_course_list_rule = 13
    RULE_qualifier = 14
    RULE_begin_if = 15
    RULE_end_if = 16
    RULE_header_conditional = 17
    RULE_header_else = 18
    RULE_header_rule_group = 19
    RULE_header_rule = 20
    RULE_body_conditional = 21
    RULE_body_else = 22
    RULE_body_rule_group = 23
    RULE_body_rule = 24
    RULE_group_requirement = 25
    RULE_group_list = 26
    RULE_group = 27
    RULE_subset = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_noncourse = 31
    RULE_rule_complete = 32
    RULE_under = 33
    RULE_allow_clause = 34
    RULE_header_class_credit = 35
    RULE_body_class_credit = 36
    RULE_header_maxclass = 37
    RULE_header_maxcredit = 38
    RULE_header_maxpassfail = 39
    RULE_header_maxperdisc = 40
    RULE_header_maxterm = 41
    RULE_header_maxtransfer = 42
    RULE_header_minclass = 43
    RULE_header_mincredit = 44
    RULE_header_mingpa = 45
    RULE_header_mingrade = 46
    RULE_header_minperdisc = 47
    RULE_header_minres = 48
    RULE_header_minterm = 49
    RULE_header_share = 50
    RULE_allow = 51
    RULE_area_end = 52
    RULE_area_start = 53
    RULE_class_or_credit = 54
    RULE_copy_header = 55
    RULE_copy_rules = 56
    RULE_advice = 57
    RULE_display = 58
    RULE_proxy_advice = 59
    RULE_header_tag = 60
    RULE_header_label = 61
    RULE_hide_rule = 62
    RULE_label = 63
    RULE_lastres = 64
    RULE_maxclass = 65
    RULE_maxcredit = 66
    RULE_maxpassfail = 67
    RULE_maxperdisc = 68
    RULE_maxspread = 69
    RULE_maxterm = 70
    RULE_maxtransfer = 71
    RULE_minarea = 72
    RULE_minclass = 73
    RULE_mincredit = 74
    RULE_mingpa = 75
    RULE_mingrade = 76
    RULE_minperdisc = 77
    RULE_minres = 78
    RULE_minspread = 79
    RULE_minterm = 80
    RULE_num_classes = 81
    RULE_num_credits = 82
    RULE_nv_pair = 83
    RULE_nv_lhs = 84
    RULE_nv_rhs = 85
    RULE_optional = 86
    RULE_pseudo = 87
    RULE_remark = 88
    RULE_rule_tag = 89
    RULE_samedisc = 90
    RULE_share = 91
    RULE_standalone = 92
    RULE_string = 93
    RULE_symbol = 94
    RULE_tag = 95
    RULE_with_clause = 96
    RULE_expression = 97
    RULE_logical_op = 98
    RULE_relational_op = 99
    RULE_list_or = 100
    RULE_list_and = 101

    ruleNames =  [ "req_block", "header", "body", "course_list", "full_course", 
                   "course_item", "and_list", "or_list", "except_list", 
                   "include_list", "catalog_number", "discipline", "course_list_body", 
                   "course_list_rule", "qualifier", "begin_if", "end_if", 
                   "header_conditional", "header_else", "header_rule_group", 
                   "header_rule", "body_conditional", "body_else", "body_rule_group", 
                   "body_rule", "group_requirement", "group_list", "group", 
                   "subset", "block", "blocktype", "noncourse", "rule_complete", 
                   "under", "allow_clause", "header_class_credit", "body_class_credit", 
                   "header_maxclass", "header_maxcredit", "header_maxpassfail", 
                   "header_maxperdisc", "header_maxterm", "header_maxtransfer", 
                   "header_minclass", "header_mincredit", "header_mingpa", 
                   "header_mingrade", "header_minperdisc", "header_minres", 
                   "header_minterm", "header_share", "allow", "area_end", 
                   "area_start", "class_or_credit", "copy_header", "copy_rules", 
                   "advice", "display", "proxy_advice", "header_tag", "header_label", 
                   "hide_rule", "label", "lastres", "maxclass", "maxcredit", 
                   "maxpassfail", "maxperdisc", "maxspread", "maxterm", 
                   "maxtransfer", "minarea", "minclass", "mincredit", "mingpa", 
                   "mingrade", "minperdisc", "minres", "minspread", "minterm", 
                   "num_classes", "num_credits", "nv_pair", "nv_lhs", "nv_rhs", 
                   "optional", "pseudo", "remark", "rule_tag", "samedisc", 
                   "share", "standalone", "string", "symbol", "tag", "with_clause", 
                   "expression", "logical_op", "relational_op", "list_or", 
                   "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    HIGH_PRIORITY=8
    IN=9
    LOW_PRIORITY=10
    NOCOUNT=11
    NOTGPA=12
    WHITESPACE=13
    ACCEPT=14
    ALLOW=15
    BEGIN=16
    BEGINSUB=17
    BLOCK=18
    BLOCKTYPE=19
    CLASS=20
    COPY_HEADER=21
    COPY_RULES=22
    CREDIT=23
    DONT_SHARE=24
    ENDOT=25
    ENDSUB=26
    EXCEPT=27
    GROUP=28
    HEADER_TAG=29
    HIDE_RULE=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PROXY_ADVICE=53
    PSEUDO=54
    REMARK=55
    RULE_COMPLETE=56
    RULE_INCOMPLETE=57
    RULE_TAG=58
    STANDALONE=59
    SHARE=60
    TAG=61
    SAME_DISC=62
    UNDER=63
    WITH=64
    BEGINELSE=65
    BEGINIF=66
    ELSE=67
    ENDELSE=68
    ENDIF=69
    IF=70
    IS=71
    ISNOT=72
    THEN=73
    AND=74
    OR=75
    NUMBER=76
    CATALOG_NUMBER=77
    WILD=78
    SYMBOL=79
    AMPERSAND=80
    ASTERISK=81
    AT=82
    BANG=83
    BACKQUOTE=84
    BACKSLASH=85
    COLON=86
    COMMA=87
    DBL_QUOTE=88
    EQ=89
    GE=90
    GT=91
    HASH=92
    HYPHEN=93
    LE=94
    LT=95
    LP=96
    L_SQB=97
    NE=98
    PERCENT=99
    PLUS=100
    QUESTION_MARK=101
    RP=102
    R_SQB=103
    SEMICOLON=104
    SLASH=105
    UNDERSCORE=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def header(self):
            return self.getTypedRuleContext(ReqBlockParser.HeaderContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 204
                    self.matchWildcard() 
                self.state = 209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 210
            self.match(ReqBlockParser.BEGIN)
            self.state = 211
            self.header()
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 212
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 213
                self.body()


            self.state = 216
            self.match(ReqBlockParser.ENDOT)
            self.state = 217
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = ReqBlockParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -7265716055767515072) != 0 or _la==70 or _la==76:
                self.state = 219
                self.header_rule()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 261208778392076354) != 0 or (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134218691) != 0:
                self.state = 225
                self.body_rule()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Except_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Except_listContext,i)


        def include_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Include_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Include_listContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.course_item()
            self.state = 234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74, 100]:
                self.state = 232
                self.and_list()
                pass
            elif token in [75, 87]:
                self.state = 233
                self.or_list()
                pass
            elif token in [1, 6, 17, 18, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 76, 77, 78, 79, 97, 102, 104]:
                pass
            else:
                pass
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==31:
                self.state = 238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 236
                    self.except_list()
                    pass
                elif token in [31]:
                    self.state = 237
                    self.include_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 243
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.discipline()
            self.state = 247
            self.catalog_number()
            self.state = 251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248
                    self.with_clause() 
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def area_start(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_startContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def area_end(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_endContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 254
                self.area_start()


            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 257
                self.discipline()


            self.state = 260
            self.catalog_number()
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96:
                self.state = 261
                self.with_clause()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 267
                self.area_end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 270
                self.list_and()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 271
                    self.area_end()


                self.state = 274
                self.course_item()
                self.state = 278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==74 or _la==100):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 280
                self.list_or()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 281
                    self.area_end()


                self.state = 284
                self.course_item()
                self.state = 288 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==75 or _la==87):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(ReqBlockParser.EXCEPT)
            self.state = 291
            self.course_item()
            self.state = 294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74, 100]:
                self.state = 292
                self.and_list()
                pass
            elif token in [75, 87]:
                self.state = 293
                self.or_list()
                pass
            elif token in [1, 6, 17, 18, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 76, 77, 78, 79, 97, 102, 104]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(ReqBlockParser.INCLUDING)
            self.state = 297
            self.course_item()
            self.state = 300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74, 100]:
                self.state = 298
                self.and_list()
                pass
            elif token in [75, 87]:
                self.state = 299
                self.or_list()
                pass
            elif token in [1, 6, 17, 18, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 76, 77, 78, 79, 97, 102, 104]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_catalog_number)
        try:
            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.symbol()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 305
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_discipline)
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.symbol()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.string()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 310
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 311
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 312
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.course_list()
            self.state = 324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 322
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                    if la_ == 1:
                        self.state = 316
                        self.qualifier()
                        self.state = 318
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                        if la_ == 1:
                            self.state = 317
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 320
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 321
                        self.remark()
                        pass

             
                self.state = 326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_rule" ):
                listener.enterCourse_list_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_rule" ):
                listener.exitCourse_list_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_rule" ):
                return visitor.visitCourse_list_rule(self)
            else:
                return visitor.visitChildren(self)




    def course_list_rule(self):

        localctx = ReqBlockParser.Course_list_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_course_list_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.course_list_body()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 328
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hide_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,0)


        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ReqBlockParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qualifier)
        try:
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.hide_rule()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.maxpassfail()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.maxperdisc()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 4)
                self.state = 334
                self.maxspread()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 5)
                self.state = 335
                self.maxtransfer()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 336
                self.maxterm()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 337
                self.minarea()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 8)
                self.state = 338
                self.minclass()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 9)
                self.state = 339
                self.mincredit()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 10)
                self.state = 340
                self.mingpa()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 11)
                self.state = 341
                self.mingrade()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 12)
                self.state = 342
                self.minperdisc()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 13)
                self.state = 343
                self.minspread()
                pass
            elif token in [6, 53]:
                self.enterOuterAlt(localctx, 14)
                self.state = 344
                self.proxy_advice()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 15)
                self.state = 345
                self.rule_tag()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 16)
                self.state = 346
                self.samedisc()
                pass
            elif token in [24, 60]:
                self.enterOuterAlt(localctx, 17)
                self.state = 347
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            _la = self._input.LA(1)
            if not(_la==65 or _la==66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            _la = self._input.LA(1)
            if not(_la==68 or _la==69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def header_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_conditional" ):
                listener.enterHeader_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_conditional" ):
                listener.exitHeader_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_conditional" ):
                return visitor.visitHeader_conditional(self)
            else:
                return visitor.visitChildren(self)




    def header_conditional(self):

        localctx = ReqBlockParser.Header_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_header_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(ReqBlockParser.IF)
            self.state = 355
            self.expression(0)
            self.state = 356
            self.match(ReqBlockParser.THEN)
            self.state = 359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 21, 24, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 53, 56, 57, 59, 60, 63, 70, 76]:
                self.state = 357
                self.header_rule()
                pass
            elif token in [65, 66]:
                self.state = 358
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 361
                self.header_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_else" ):
                listener.enterHeader_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_else" ):
                listener.exitHeader_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_else" ):
                return visitor.visitHeader_else(self)
            else:
                return visitor.visitChildren(self)




    def header_else(self):

        localctx = ReqBlockParser.Header_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_header_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(ReqBlockParser.ELSE)
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 21, 24, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 53, 56, 57, 59, 60, 63, 70, 76]:
                self.state = 365
                self.header_rule()
                pass
            elif token in [65, 66]:
                self.state = 366
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule_group" ):
                listener.enterHeader_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule_group" ):
                listener.exitHeader_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule_group" ):
                return visitor.visitHeader_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def header_rule_group(self):

        localctx = ReqBlockParser.Header_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_header_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.begin_if()
            self.state = 371 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 370
                self.header_rule()
                self.state = 373 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & -7265716055767515072) != 0 or _la==70 or _la==76):
                    break

            self.state = 375
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_header(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_headerContext,0)


        def header_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_class_creditContext,0)


        def header_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_conditionalContext,0)


        def header_maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxclassContext,0)


        def header_maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxcreditContext,0)


        def header_maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxpassfailContext,0)


        def header_maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxperdiscContext,0)


        def header_maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtermContext,0)


        def header_maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtransferContext,0)


        def header_minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minclassContext,0)


        def header_mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mincreditContext,0)


        def header_mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingpaContext,0)


        def header_mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingradeContext,0)


        def header_minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minperdiscContext,0)


        def header_minres(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minresContext,0)


        def header_minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mintermContext,0)


        def header_share(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_shareContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def optional(self):
            return self.getTypedRuleContext(ReqBlockParser.OptionalContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def standalone(self):
            return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,0)


        def under(self):
            return self.getTypedRuleContext(ReqBlockParser.UnderContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule" ):
                listener.enterHeader_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule" ):
                listener.exitHeader_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule" ):
                return visitor.visitHeader_rule(self)
            else:
                return visitor.visitChildren(self)




    def header_rule(self):

        localctx = ReqBlockParser.Header_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_header_rule)
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                self.copy_header()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.header_class_credit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 379
                self.header_conditional()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 380
                self.header_maxclass()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 381
                self.header_maxcredit()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 382
                self.header_maxpassfail()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 383
                self.header_maxperdisc()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 384
                self.header_maxterm()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 385
                self.header_maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 386
                self.header_minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 387
                self.header_mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 388
                self.header_mingpa()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 389
                self.header_mingrade()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 390
                self.header_minperdisc()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 391
                self.header_minres()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 392
                self.header_minterm()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 393
                self.header_share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 394
                self.header_tag()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 395
                self.lastres()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 396
                self.noncourse()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 397
                self.optional()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 398
                self.proxy_advice()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 399
                self.rule_complete()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 400
                self.standalone()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 401
                self.under()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def body_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_conditional" ):
                listener.enterBody_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_conditional" ):
                listener.exitBody_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_conditional" ):
                return visitor.visitBody_conditional(self)
            else:
                return visitor.visitChildren(self)




    def body_conditional(self):

        localctx = ReqBlockParser.Body_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_body_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(ReqBlockParser.IF)
            self.state = 405
            self.expression(0)
            self.state = 406
            self.match(ReqBlockParser.THEN)
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 6, 17, 18, 22, 53, 55, 56, 57, 70, 71, 76, 77, 78, 79, 97]:
                self.state = 407
                self.body_rule()
                pass
            elif token in [65, 66]:
                self.state = 408
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 411
                self.body_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_else" ):
                listener.enterBody_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_else" ):
                listener.exitBody_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_else" ):
                return visitor.visitBody_else(self)
            else:
                return visitor.visitChildren(self)




    def body_else(self):

        localctx = ReqBlockParser.Body_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_body_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(ReqBlockParser.ELSE)
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 6, 17, 18, 22, 53, 55, 56, 57, 70, 71, 76, 77, 78, 79, 97]:
                self.state = 415
                self.body_rule()
                pass
            elif token in [65, 66]:
                self.state = 416
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.begin_if()
            self.state = 421 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 420
                self.body_rule()
                self.state = 423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 261208778392076354) != 0 or (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134218691) != 0):
                    break

            self.state = 425
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def body_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_body_rule)
        try:
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.blocktype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.body_conditional()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.course_list_rule()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.copy_rules()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.group_requirement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.noncourse()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.proxy_advice()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 436
                self.remark()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 437
                self.rule_complete()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 438
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def group_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_listContext,0)


        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_requirement" ):
                listener.enterGroup_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_requirement" ):
                listener.exitGroup_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_requirement" ):
                return visitor.visitGroup_requirement(self)
            else:
                return visitor.visitChildren(self)




    def group_requirement(self):

        localctx = ReqBlockParser.Group_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(ReqBlockParser.NUMBER)
            self.state = 442
            self.match(ReqBlockParser.GROUP)
            self.state = 443
            self.group_list()
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 452
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                    if la_ == 1:
                        self.state = 444
                        self.qualifier()
                        self.state = 446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 445
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 448
                        self.hide_rule()
                        pass

                    elif la_ == 3:
                        self.state = 449
                        self.proxy_advice()
                        pass

                    elif la_ == 4:
                        self.state = 450
                        self.remark()
                        pass

                    elif la_ == 5:
                        self.state = 451
                        self.label()
                        pass

             
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_list" ):
                listener.enterGroup_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_list" ):
                listener.exitGroup_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_list" ):
                return visitor.visitGroup_list(self)
            else:
                return visitor.visitChildren(self)




    def group_list(self):

        localctx = ReqBlockParser.Group_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_group_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.group()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74 or _la==75:
                self.state = 458
                self.logical_op()
                self.state = 459
                self.group()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(ReqBlockParser.LP)
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 467
                self.block()
                pass

            elif la_ == 2:
                self.state = 468
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 469
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.state = 470
                self.course_list_rule()
                pass

            elif la_ == 5:
                self.state = 471
                self.group_requirement()
                pass

            elif la_ == 6:
                self.state = 472
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 473
                self.rule_complete()
                pass


            self.state = 476
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def body_conditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_conditionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def body_class_credit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_class_creditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 488 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.body_conditional()
                    pass

                elif la_ == 2:
                    self.state = 480
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 481
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 482
                    self.body_class_credit()
                    pass

                elif la_ == 5:
                    self.state = 483
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 484
                    self.course_list_rule()
                    pass

                elif la_ == 7:
                    self.state = 485
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 486
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 487
                    self.rule_complete()
                    pass


                self.state = 490 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 216172782118240258) != 0 or (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134218691) != 0):
                    break

            self.state = 492
            self.match(ReqBlockParser.ENDSUB)
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 501
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 493
                        self.qualifier()
                        self.state = 495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 494
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 497
                        self.hide_rule()
                        pass

                    elif la_ == 3:
                        self.state = 498
                        self.proxy_advice()
                        pass

                    elif la_ == 4:
                        self.state = 499
                        self.remark()
                        pass

                    elif la_ == 5:
                        self.state = 500
                        self.label()
                        pass

             
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(ReqBlockParser.NUMBER)
            self.state = 507
            self.match(ReqBlockParser.BLOCK)
            self.state = 508
            self.expression(0)
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 513
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 509
                        self.hide_rule()
                        pass
                    elif token in [6, 53]:
                        self.state = 510
                        self.proxy_advice()
                        pass
                    elif token in [58]:
                        self.state = 511
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 512
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(ReqBlockParser.NUMBER)
            self.state = 519
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 520
            self.expression(0)
            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 521
                        self.hide_rule()
                        pass
                    elif token in [6, 53]:
                        self.state = 522
                        self.proxy_advice()
                        pass
                    elif token in [58]:
                        self.state = 523
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 524
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_noncourse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(ReqBlockParser.NUMBER)
            self.state = 531
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 532
                self.match(ReqBlockParser.LP)
                self.state = 533
                self.expression(0)
                self.state = 534
                self.match(ReqBlockParser.RP)


            self.state = 544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 542
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 538
                        self.hide_rule()
                        pass
                    elif token in [6, 53]:
                        self.state = 539
                        self.proxy_advice()
                        pass
                    elif token in [58]:
                        self.state = 540
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 541
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            _la = self._input.LA(1)
            if not(_la==56 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 552
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 548
                        self.hide_rule()
                        pass
                    elif token in [6, 53]:
                        self.state = 549
                        self.proxy_advice()
                        pass
                    elif token in [58]:
                        self.state = 550
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 551
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_labelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_under)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(ReqBlockParser.UNDER)
            self.state = 558
            self.match(ReqBlockParser.NUMBER)
            self.state = 559
            self.class_or_credit()
            self.state = 560
            self.course_list()
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [6, 53]:
                        self.state = 561
                        self.proxy_advice()
                        pass
                    elif token in [32]:
                        self.state = 562
                        self.header_label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(ReqBlockParser.LP)
            self.state = 569
            self.allow()
            self.state = 570
            self.match(ReqBlockParser.NUMBER)
            self.state = 571
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_class_credit" ):
                listener.enterHeader_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_class_credit" ):
                listener.exitHeader_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_class_credit" ):
                return visitor.visitHeader_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def header_class_credit(self):

        localctx = ReqBlockParser.Header_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_header_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 573
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 574
                self.num_credits()
                pass


            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74 or _la==75:
                self.state = 577
                self.logical_op()
                self.state = 580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 578
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 579
                    self.num_credits()
                    pass




            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 591
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [54, 71]:
                        self.state = 585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==71:
                            self.state = 584
                            self.match(ReqBlockParser.IS)


                        self.state = 587
                        self.pseudo()
                        pass
                    elif token in [6, 53]:
                        self.state = 588
                        self.proxy_advice()
                        pass
                    elif token in [29]:
                        self.state = 589
                        self.header_tag()
                        pass
                    elif token in [61]:
                        self.state = 590
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 596
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def hide_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Hide_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Hide_ruleContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_class_credit" ):
                listener.enterBody_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_class_credit" ):
                listener.exitBody_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_class_credit" ):
                return visitor.visitBody_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def body_class_credit(self):

        localctx = ReqBlockParser.Body_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_body_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 599
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 600
                self.num_credits()
                pass


            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74 or _la==75:
                self.state = 603
                self.logical_op()
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 605
                    self.num_credits()
                    pass




            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 610
                self.course_list_body()


            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 622
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [30]:
                        self.state = 613
                        self.hide_rule()
                        pass
                    elif token in [6, 53]:
                        self.state = 614
                        self.proxy_advice()
                        pass
                    elif token in [24, 60]:
                        self.state = 615
                        self.share()
                        pass
                    elif token in [58]:
                        self.state = 616
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 617
                        self.label()
                        self.state = 619
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                        if la_ == 1:
                            self.state = 618
                            self.remark()


                        pass
                    elif token in [61]:
                        self.state = 621
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxclass" ):
                listener.enterHeader_maxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxclass" ):
                listener.exitHeader_maxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxclass" ):
                return visitor.visitHeader_maxclass(self)
            else:
                return visitor.visitChildren(self)




    def header_maxclass(self):

        localctx = ReqBlockParser.Header_maxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_header_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.maxclass()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 628
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxcredit" ):
                listener.enterHeader_maxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxcredit" ):
                listener.exitHeader_maxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxcredit" ):
                return visitor.visitHeader_maxcredit(self)
            else:
                return visitor.visitChildren(self)




    def header_maxcredit(self):

        localctx = ReqBlockParser.Header_maxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_header_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.maxcredit()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 632
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxpassfail" ):
                listener.enterHeader_maxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxpassfail" ):
                listener.exitHeader_maxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxpassfail" ):
                return visitor.visitHeader_maxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def header_maxpassfail(self):

        localctx = ReqBlockParser.Header_maxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_header_maxpassfail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.maxpassfail()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 636
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxperdisc" ):
                listener.enterHeader_maxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxperdisc" ):
                listener.exitHeader_maxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxperdisc" ):
                return visitor.visitHeader_maxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_maxperdisc(self):

        localctx = ReqBlockParser.Header_maxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_header_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.maxperdisc()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 640
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxterm" ):
                listener.enterHeader_maxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxterm" ):
                listener.exitHeader_maxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxterm" ):
                return visitor.visitHeader_maxterm(self)
            else:
                return visitor.visitChildren(self)




    def header_maxterm(self):

        localctx = ReqBlockParser.Header_maxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_header_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.maxterm()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 644
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxtransfer" ):
                listener.enterHeader_maxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxtransfer" ):
                listener.exitHeader_maxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxtransfer" ):
                return visitor.visitHeader_maxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def header_maxtransfer(self):

        localctx = ReqBlockParser.Header_maxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_header_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.maxtransfer()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 648
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minclass" ):
                listener.enterHeader_minclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minclass" ):
                listener.exitHeader_minclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minclass" ):
                return visitor.visitHeader_minclass(self)
            else:
                return visitor.visitChildren(self)




    def header_minclass(self):

        localctx = ReqBlockParser.Header_minclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_header_minclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.minclass()
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 652
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mincredit" ):
                listener.enterHeader_mincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mincredit" ):
                listener.exitHeader_mincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mincredit" ):
                return visitor.visitHeader_mincredit(self)
            else:
                return visitor.visitChildren(self)




    def header_mincredit(self):

        localctx = ReqBlockParser.Header_mincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_header_mincredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.mincredit()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 656
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingpa" ):
                listener.enterHeader_mingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingpa" ):
                listener.exitHeader_mingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingpa" ):
                return visitor.visitHeader_mingpa(self)
            else:
                return visitor.visitChildren(self)




    def header_mingpa(self):

        localctx = ReqBlockParser.Header_mingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_header_mingpa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.mingpa()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 660
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingrade" ):
                listener.enterHeader_mingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingrade" ):
                listener.exitHeader_mingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingrade" ):
                return visitor.visitHeader_mingrade(self)
            else:
                return visitor.visitChildren(self)




    def header_mingrade(self):

        localctx = ReqBlockParser.Header_mingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_header_mingrade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.mingrade()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 664
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minperdisc" ):
                listener.enterHeader_minperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minperdisc" ):
                listener.exitHeader_minperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minperdisc" ):
                return visitor.visitHeader_minperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_minperdisc(self):

        localctx = ReqBlockParser.Header_minperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_header_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.minperdisc()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 668
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minres" ):
                listener.enterHeader_minres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minres" ):
                listener.exitHeader_minres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minres" ):
                return visitor.visitHeader_minres(self)
            else:
                return visitor.visitChildren(self)




    def header_minres(self):

        localctx = ReqBlockParser.Header_minresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_header_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.minres()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 672
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minterm" ):
                listener.enterHeader_minterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minterm" ):
                listener.exitHeader_minterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minterm" ):
                return visitor.visitHeader_minterm(self)
            else:
                return visitor.visitChildren(self)




    def header_minterm(self):

        localctx = ReqBlockParser.Header_mintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_header_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.minterm()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 676
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_share" ):
                listener.enterHeader_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_share" ):
                listener.exitHeader_share(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_share" ):
                return visitor.visitHeader_share(self)
            else:
                return visitor.visitChildren(self)




    def header_share(self):

        localctx = ReqBlockParser.Header_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_header_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.share()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 680
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            _la = self._input.LA(1)
            if not(_la==14 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_end" ):
                listener.enterArea_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_end" ):
                listener.exitArea_end(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_end" ):
                return visitor.visitArea_end(self)
            else:
                return visitor.visitChildren(self)




    def area_end(self):

        localctx = ReqBlockParser.Area_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_area_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(ReqBlockParser.R_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_start" ):
                listener.enterArea_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_start" ):
                listener.exitArea_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_start" ):
                return visitor.visitArea_start(self)
            else:
                return visitor.visitChildren(self)




    def area_start(self):

        localctx = ReqBlockParser.Area_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_area_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(ReqBlockParser.L_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            _la = self._input.LA(1)
            if not(_la==20 or _la==23):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_HEADER(self):
            return self.getToken(ReqBlockParser.COPY_HEADER, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_header" ):
                listener.enterCopy_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_header" ):
                listener.exitCopy_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_header" ):
                return visitor.visitCopy_header(self)
            else:
                return visitor.visitChildren(self)




    def copy_header(self):

        localctx = ReqBlockParser.Copy_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_copy_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(ReqBlockParser.COPY_HEADER)
            self.state = 692
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_copy_rules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 695
            self.expression(0)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 696
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_ADVICE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PROXY_ADVICE)
            else:
                return self.getToken(ReqBlockParser.PROXY_ADVICE, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdvice" ):
                listener.enterAdvice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdvice" ):
                listener.exitAdvice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdvice" ):
                return visitor.visitAdvice(self)
            else:
                return visitor.visitChildren(self)




    def advice(self):

        localctx = ReqBlockParser.AdviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_advice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 699
                    self.match(ReqBlockParser.PROXY_ADVICE)
                    self.state = 700
                    self.string()

                else:
                    raise NoViableAltException(self)
                self.state = 703 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.DISPLAY)
            else:
                return self.getToken(ReqBlockParser.DISPLAY, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 705
                    self.match(ReqBlockParser.DISPLAY)
                    self.state = 706
                    self.string()

                else:
                    raise NoViableAltException(self)
                self.state = 709 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_adviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def display(self):
            return self.getTypedRuleContext(ReqBlockParser.DisplayContext,0)


        def advice(self):
            return self.getTypedRuleContext(ReqBlockParser.AdviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_proxy_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_advice" ):
                listener.enterProxy_advice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_advice" ):
                listener.exitProxy_advice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProxy_advice" ):
                return visitor.visitProxy_advice(self)
            else:
                return visitor.visitChildren(self)




    def proxy_advice(self):

        localctx = ReqBlockParser.Proxy_adviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proxy_advice)
        try:
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.display()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.display()
                self.state = 713
                self.advice()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 715
                self.advice()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.HEADER_TAG)
            else:
                return self.getToken(ReqBlockParser.HEADER_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 718
                    self.match(ReqBlockParser.HEADER_TAG)
                    self.state = 719
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 722 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_label" ):
                listener.enterHeader_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_label" ):
                listener.exitHeader_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_label" ):
                return visitor.visitHeader_label(self)
            else:
                return visitor.visitChildren(self)




    def header_label(self):

        localctx = ReqBlockParser.Header_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_header_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(ReqBlockParser.LABEL)
            self.state = 725
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hide_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HIDE_RULE(self):
            return self.getToken(ReqBlockParser.HIDE_RULE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_hide_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHide_rule" ):
                listener.enterHide_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHide_rule" ):
                listener.exitHide_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHide_rule" ):
                return visitor.visitHide_rule(self)
            else:
                return visitor.visitChildren(self)




    def hide_rule(self):

        localctx = ReqBlockParser.Hide_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_hide_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(ReqBlockParser.HIDE_RULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(ReqBlockParser.LABEL)
            self.state = 730
            self.string()
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 731
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(ReqBlockParser.LASTRES)
            self.state = 735
            self.match(ReqBlockParser.NUMBER)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 736
                self.match(ReqBlockParser.OF)
                self.state = 737
                self.match(ReqBlockParser.NUMBER)


            self.state = 740
            self.class_or_credit()
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 741
                self.course_list()


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 744
                self.tag()


            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 747
                self.proxy_advice()


            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 750
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 754
            self.match(ReqBlockParser.NUMBER)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 755
                self.course_list()


            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 758
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 762
            self.match(ReqBlockParser.NUMBER)
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 763
                self.course_list()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 766
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 770
            self.match(ReqBlockParser.NUMBER)
            self.state = 771
            self.class_or_credit()
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 772
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 776
            self.match(ReqBlockParser.NUMBER)
            self.state = 777
            self.class_or_credit()
            self.state = 778
            self.match(ReqBlockParser.LP)
            self.state = 779
            self.match(ReqBlockParser.SYMBOL)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==87:
                self.state = 780
                self.list_or()
                self.state = 781
                self.match(ReqBlockParser.SYMBOL)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 788
            self.match(ReqBlockParser.RP)
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 789
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 793
            self.match(ReqBlockParser.NUMBER)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 794
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_maxterm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(ReqBlockParser.MAXTERM)
            self.state = 798
            self.match(ReqBlockParser.NUMBER)
            self.state = 799
            self.class_or_credit()
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 800
                self.course_list()


            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 803
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 807
            self.match(ReqBlockParser.NUMBER)
            self.state = 808
            self.class_or_credit()
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 809
                self.match(ReqBlockParser.LP)
                self.state = 810
                self.match(ReqBlockParser.SYMBOL)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==75 or _la==87:
                    self.state = 811
                    self.list_or()
                    self.state = 812
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 819
                self.match(ReqBlockParser.RP)


            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 822
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(ReqBlockParser.MINAREA)
            self.state = 826
            self.match(ReqBlockParser.NUMBER)
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 827
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ReqBlockParser.MINCLASS)
            self.state = 831
            self.match(ReqBlockParser.NUMBER)
            self.state = 832
            self.course_list()
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 833
                self.tag()


            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 836
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 840
            self.match(ReqBlockParser.NUMBER)
            self.state = 841
            self.course_list()
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 842
                self.tag()


            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 845
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(ReqBlockParser.MINGPA)
            self.state = 849
            self.match(ReqBlockParser.NUMBER)
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 850
                self.course_list()

            elif la_ == 2:
                self.state = 851
                self.expression(0)


            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 854
                self.tag()


            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 857
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(ReqBlockParser.MINGRADE)
            self.state = 861
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 864
            self.match(ReqBlockParser.NUMBER)
            self.state = 865
            self.class_or_credit()
            self.state = 866
            self.match(ReqBlockParser.LP)
            self.state = 867
            self.match(ReqBlockParser.SYMBOL)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==87:
                self.state = 868
                self.list_or()
                self.state = 869
                self.match(ReqBlockParser.SYMBOL)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 876
            self.match(ReqBlockParser.RP)
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 877
                self.tag()


            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 880
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(ReqBlockParser.MINRES)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 884
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 885
                self.num_credits()
                pass


            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 888
                self.proxy_advice()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 891
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 895
            self.match(ReqBlockParser.NUMBER)
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 896
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(ReqBlockParser.MINTERM)
            self.state = 900
            self.match(ReqBlockParser.NUMBER)
            self.state = 901
            self.class_or_credit()
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 902
                self.course_list()


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 905
                self.tag()


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 908
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(ReqBlockParser.NUMBER)
            self.state = 912
            self.match(ReqBlockParser.CLASS)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 913
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(ReqBlockParser.NUMBER)
            self.state = 917
            self.match(ReqBlockParser.CREDIT)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 918
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nv_lhs(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_lhsContext,0)


        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def nv_rhs(self):
            return self.getTypedRuleContext(ReqBlockParser.Nv_rhsContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.nv_lhs()
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 922
                self.match(ReqBlockParser.EQ)


            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 925
                self.nv_rhs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_lhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_lhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_lhs" ):
                listener.enterNv_lhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_lhs" ):
                listener.exitNv_lhs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_lhs" ):
                return visitor.visitNv_lhs(self)
            else:
                return visitor.visitChildren(self)




    def nv_lhs(self):

        localctx = ReqBlockParser.Nv_lhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_nv_lhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_rhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_rhs" ):
                listener.enterNv_rhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_rhs" ):
                listener.exitNv_rhs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_rhs" ):
                return visitor.visitNv_rhs(self)
            else:
                return visitor.visitChildren(self)




    def nv_rhs(self):

        localctx = ReqBlockParser.Nv_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_nv_rhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 930
                self.string()
                pass
            elif token in [79]:
                self.state = 931
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pseudo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(ReqBlockParser.PSEUDO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_remark)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 938
                    self.match(ReqBlockParser.REMARK)
                    self.state = 939
                    self.string()
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==104:
                        self.state = 940
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 945 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RULE_TAG)
            else:
                return self.getToken(ReqBlockParser.RULE_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 947
                    self.match(ReqBlockParser.RULE_TAG)
                    self.state = 948
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 951 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 954
            self.expression(0)
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 955
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            _la = self._input.LA(1)
            if not(_la==24 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 959
                self.match(ReqBlockParser.NUMBER)
                self.state = 960
                self.class_or_credit()


            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 963
                self.expression(0)


            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 966
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(ReqBlockParser.TAG)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 976
                self.match(ReqBlockParser.EQ)
                self.state = 977
                _la = self._input.LA(1)
                if not((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 11) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(ReqBlockParser.LP)
            self.state = 981
            self.match(ReqBlockParser.WITH)
            self.state = 982
            self.expression(0)
            self.state = 983
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 986
                self.match(ReqBlockParser.NONCOURSE)
                self.state = 987
                self.expression(12)
                pass

            elif la_ == 2:
                self.state = 988
                self.full_course()
                pass

            elif la_ == 3:
                self.state = 989
                self.discipline()
                pass

            elif la_ == 4:
                self.state = 990
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 5:
                self.state = 991
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 6:
                self.state = 992
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 7:
                self.state = 993
                self.string()
                pass

            elif la_ == 8:
                self.state = 994
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 9:
                self.state = 995
                self.match(ReqBlockParser.LP)
                self.state = 996
                self.expression(0)
                self.state = 997
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1012
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1001
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1002
                        self.relational_op()
                        self.state = 1003
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1005
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1006
                        self.logical_op()
                        self.state = 1007
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1009
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1010
                        self.match(ReqBlockParser.COMMA)
                        self.state = 1011
                        self.expression(10)
                        pass

             
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNOT(self):
            return self.getToken(ReqBlockParser.ISNOT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            _la = self._input.LA(1)
            if not((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 161218563) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            _la = self._input.LA(1)
            if not(_la==75 or _la==87):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            _la = self._input.LA(1)
            if not(_la==74 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[97] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




