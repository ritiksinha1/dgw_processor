# Generated from ReqBlock.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,107,1060,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,1,0,5,0,202,8,0,10,0,12,0,205,9,0,1,0,1,0,1,0,
        1,0,3,0,211,8,0,1,0,1,0,5,0,215,8,0,10,0,12,0,218,9,0,1,0,1,0,1,
        1,5,1,223,8,1,10,1,12,1,226,9,1,1,2,5,2,229,8,2,10,2,12,2,232,9,
        2,1,3,1,3,1,3,3,3,237,8,3,1,3,1,3,5,3,241,8,3,10,3,12,3,244,9,3,
        1,3,3,3,247,8,3,1,4,1,4,1,4,5,4,252,8,4,10,4,12,4,255,9,4,1,5,3,
        5,258,8,5,1,5,3,5,261,8,5,1,5,1,5,5,5,265,8,5,10,5,12,5,268,9,5,
        1,5,3,5,271,8,5,1,6,1,6,3,6,275,8,6,1,6,1,6,4,6,279,8,6,11,6,12,
        6,280,1,7,1,7,3,7,285,8,7,1,7,1,7,4,7,289,8,7,11,7,12,7,290,1,8,
        1,8,1,8,1,8,3,8,297,8,8,1,9,1,9,1,9,1,9,3,9,303,8,9,1,10,1,10,1,
        10,1,10,3,10,309,8,10,1,11,1,11,1,11,1,11,1,11,3,11,316,8,11,1,12,
        1,12,1,12,3,12,321,8,12,1,12,1,12,5,12,325,8,12,10,12,12,12,328,
        9,12,1,13,1,13,3,13,332,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,350,8,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,361,8,17,1,17,3,17,
        364,8,17,1,18,1,18,1,18,3,18,369,8,18,1,19,1,19,4,19,373,8,19,11,
        19,12,19,374,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,3,20,403,8,20,1,21,1,21,1,21,1,21,1,21,3,21,410,8,21,
        1,21,3,21,413,8,21,1,22,1,22,1,22,3,22,418,8,22,1,23,1,23,4,23,422,
        8,23,11,23,12,23,423,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,440,8,24,1,25,1,25,1,25,1,25,1,25,
        3,25,447,8,25,1,25,1,25,1,25,5,25,452,8,25,10,25,12,25,455,9,25,
        1,26,1,26,1,26,1,26,5,26,461,8,26,10,26,12,26,464,9,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,3,27,474,8,27,1,27,1,27,3,27,478,8,
        27,1,27,1,27,1,27,5,27,483,8,27,10,27,12,27,486,9,27,1,27,1,27,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,4,28,500,8,28,11,
        28,12,28,501,1,28,1,28,1,28,3,28,507,8,28,1,28,1,28,1,28,5,28,512,
        8,28,10,28,12,28,515,9,28,1,29,1,29,1,29,1,29,3,29,521,8,29,1,29,
        3,29,524,8,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,532,8,30,1,30,1,
        30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,3,32,543,8,32,1,32,1,32,1,
        32,3,32,548,8,32,3,32,550,8,32,1,32,3,32,553,8,32,1,32,1,32,1,32,
        1,32,1,32,5,32,560,8,32,10,32,12,32,563,9,32,1,32,3,32,566,8,32,
        1,33,1,33,3,33,570,8,33,1,33,1,33,1,33,3,33,575,8,33,3,33,577,8,
        33,1,33,3,33,580,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,589,
        8,33,10,33,12,33,592,9,33,1,34,1,34,3,34,596,8,34,1,35,1,35,3,35,
        600,8,35,1,36,1,36,3,36,604,8,36,1,37,1,37,3,37,608,8,37,1,38,1,
        38,3,38,612,8,38,1,39,1,39,3,39,616,8,39,1,40,1,40,3,40,620,8,40,
        1,41,1,41,3,41,624,8,41,1,42,1,42,3,42,628,8,42,1,43,1,43,3,43,632,
        8,43,1,44,1,44,3,44,636,8,44,1,45,1,45,3,45,640,8,45,1,46,1,46,3,
        46,644,8,46,1,47,1,47,3,47,648,8,47,1,48,1,48,3,48,652,8,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,3,53,665,8,53,
        1,54,1,54,1,54,3,54,670,8,54,1,55,1,55,4,55,674,8,55,11,55,12,55,
        675,1,56,1,56,1,56,1,57,1,57,1,57,3,57,684,8,57,1,58,1,58,1,58,1,
        58,3,58,690,8,58,1,58,1,58,3,58,694,8,58,1,58,3,58,697,8,58,1,58,
        5,58,700,8,58,10,58,12,58,703,9,58,1,58,3,58,706,8,58,1,59,1,59,
        1,59,3,59,711,8,59,1,59,3,59,714,8,59,1,60,1,60,1,60,3,60,719,8,
        60,1,60,3,60,722,8,60,1,61,1,61,1,61,1,61,3,61,728,8,61,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,5,62,738,8,62,10,62,12,62,741,9,62,
        1,62,1,62,3,62,745,8,62,1,63,1,63,1,63,3,63,750,8,63,1,64,1,64,1,
        64,1,64,3,64,756,8,64,1,64,3,64,759,8,64,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,5,65,769,8,65,10,65,12,65,772,9,65,1,65,3,65,775,
        8,65,1,65,3,65,778,8,65,1,66,1,66,1,66,3,66,783,8,66,1,67,1,67,1,
        67,1,67,3,67,789,8,67,1,67,5,67,792,8,67,10,67,12,67,795,9,67,1,
        67,3,67,798,8,67,1,68,1,68,1,68,1,68,3,68,804,8,68,1,68,5,68,807,
        8,68,10,68,12,68,810,9,68,1,68,3,68,813,8,68,1,69,1,69,1,69,1,69,
        3,69,819,8,69,1,69,3,69,822,8,69,1,69,5,69,825,8,69,10,69,12,69,
        828,9,69,1,69,3,69,831,8,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,5,71,844,8,71,10,71,12,71,847,9,71,1,71,1,71,3,
        71,851,8,71,1,71,5,71,854,8,71,10,71,12,71,857,9,71,1,72,1,72,1,
        72,3,72,862,8,72,1,72,5,72,865,8,72,10,72,12,72,868,9,72,1,72,3,
        72,871,8,72,1,72,3,72,874,8,72,1,73,1,73,1,73,3,73,879,8,73,1,74,
        1,74,1,74,1,74,3,74,885,8,74,1,74,3,74,888,8,74,1,74,5,74,891,8,
        74,10,74,12,74,894,9,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,902,8,
        75,1,75,1,75,5,75,906,8,75,10,75,12,75,909,9,75,1,75,3,75,912,8,
        75,1,76,1,76,1,76,3,76,917,8,76,1,77,1,77,1,77,3,77,922,8,77,1,78,
        1,78,1,78,3,78,927,8,78,4,78,929,8,78,11,78,12,78,930,1,79,1,79,
        1,80,1,80,1,81,1,81,1,82,1,82,4,82,941,8,82,11,82,12,82,942,1,83,
        1,83,1,84,1,84,1,84,3,84,950,8,84,4,84,952,8,84,11,84,12,84,953,
        1,85,1,85,1,85,1,85,5,85,960,8,85,10,85,12,85,963,9,85,1,86,1,86,
        4,86,967,8,86,11,86,12,86,968,1,87,1,87,1,87,3,87,974,8,87,1,88,
        1,88,1,88,3,88,979,8,88,1,88,3,88,982,8,88,1,88,3,88,985,8,88,1,
        89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,3,92,996,8,92,1,93,1,
        93,1,93,1,93,1,93,5,93,1003,8,93,10,93,12,93,1006,9,93,1,93,3,93,
        1009,8,93,1,93,3,93,1012,8,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1029,8,95,1,95,1,95,
        1,95,3,95,1034,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,5,95,1047,8,95,10,95,12,95,1050,9,95,1,96,1,96,1,97,1,
        97,1,98,1,98,1,99,1,99,1,99,2,203,216,1,190,100,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,0,13,1,0,66,67,1,0,69,70,1,0,16,17,2,0,22,22,24,24,2,0,1,1,80,
        80,1,0,54,55,1,0,57,58,2,0,25,25,61,61,2,0,77,78,80,80,1,0,75,76,
        4,0,72,73,90,92,95,96,99,99,2,0,76,76,88,88,2,0,75,75,101,101,1200,
        0,203,1,0,0,0,2,224,1,0,0,0,4,230,1,0,0,0,6,233,1,0,0,0,8,248,1,
        0,0,0,10,257,1,0,0,0,12,278,1,0,0,0,14,288,1,0,0,0,16,292,1,0,0,
        0,18,298,1,0,0,0,20,308,1,0,0,0,22,315,1,0,0,0,24,317,1,0,0,0,26,
        329,1,0,0,0,28,349,1,0,0,0,30,351,1,0,0,0,32,353,1,0,0,0,34,355,
        1,0,0,0,36,365,1,0,0,0,38,370,1,0,0,0,40,402,1,0,0,0,42,404,1,0,
        0,0,44,414,1,0,0,0,46,419,1,0,0,0,48,439,1,0,0,0,50,441,1,0,0,0,
        52,456,1,0,0,0,54,465,1,0,0,0,56,489,1,0,0,0,58,516,1,0,0,0,60,527,
        1,0,0,0,62,535,1,0,0,0,64,542,1,0,0,0,66,569,1,0,0,0,68,593,1,0,
        0,0,70,597,1,0,0,0,72,601,1,0,0,0,74,605,1,0,0,0,76,609,1,0,0,0,
        78,613,1,0,0,0,80,617,1,0,0,0,82,621,1,0,0,0,84,625,1,0,0,0,86,629,
        1,0,0,0,88,633,1,0,0,0,90,637,1,0,0,0,92,641,1,0,0,0,94,645,1,0,
        0,0,96,649,1,0,0,0,98,653,1,0,0,0,100,655,1,0,0,0,102,657,1,0,0,
        0,104,659,1,0,0,0,106,661,1,0,0,0,108,666,1,0,0,0,110,673,1,0,0,
        0,112,677,1,0,0,0,114,680,1,0,0,0,116,685,1,0,0,0,118,707,1,0,0,
        0,120,715,1,0,0,0,122,723,1,0,0,0,124,729,1,0,0,0,126,746,1,0,0,
        0,128,751,1,0,0,0,130,760,1,0,0,0,132,779,1,0,0,0,134,784,1,0,0,
        0,136,799,1,0,0,0,138,814,1,0,0,0,140,832,1,0,0,0,142,835,1,0,0,
        0,144,858,1,0,0,0,146,875,1,0,0,0,148,880,1,0,0,0,150,895,1,0,0,
        0,152,913,1,0,0,0,154,918,1,0,0,0,156,928,1,0,0,0,158,932,1,0,0,
        0,160,934,1,0,0,0,162,936,1,0,0,0,164,940,1,0,0,0,166,944,1,0,0,
        0,168,951,1,0,0,0,170,955,1,0,0,0,172,966,1,0,0,0,174,970,1,0,0,
        0,176,975,1,0,0,0,178,986,1,0,0,0,180,988,1,0,0,0,182,990,1,0,0,
        0,184,992,1,0,0,0,186,997,1,0,0,0,188,1013,1,0,0,0,190,1033,1,0,
        0,0,192,1051,1,0,0,0,194,1053,1,0,0,0,196,1055,1,0,0,0,198,1057,
        1,0,0,0,200,202,9,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,204,
        1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,
        5,18,0,0,207,210,3,2,1,0,208,209,5,105,0,0,209,211,3,4,2,0,210,208,
        1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,216,5,26,0,0,213,215,
        9,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,217,1,0,0,0,216,214,
        1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,5,0,0,1,220,1,1,
        0,0,0,221,223,3,40,20,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,
        1,0,0,0,224,225,1,0,0,0,225,3,1,0,0,0,226,224,1,0,0,0,227,229,3,
        48,24,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,
        1,0,0,0,231,5,1,0,0,0,232,230,1,0,0,0,233,236,3,10,5,0,234,237,3,
        12,6,0,235,237,3,14,7,0,236,234,1,0,0,0,236,235,1,0,0,0,236,237,
        1,0,0,0,237,242,1,0,0,0,238,241,3,16,8,0,239,241,3,18,9,0,240,238,
        1,0,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,
        1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,245,247,3,164,82,0,246,245,
        1,0,0,0,246,247,1,0,0,0,247,7,1,0,0,0,248,249,3,22,11,0,249,253,
        3,20,10,0,250,252,3,188,94,0,251,250,1,0,0,0,252,255,1,0,0,0,253,
        251,1,0,0,0,253,254,1,0,0,0,254,9,1,0,0,0,255,253,1,0,0,0,256,258,
        3,102,51,0,257,256,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,261,
        3,22,11,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,266,
        3,20,10,0,263,265,3,188,94,0,264,263,1,0,0,0,265,268,1,0,0,0,266,
        264,1,0,0,0,266,267,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,269,
        271,3,100,50,0,270,269,1,0,0,0,270,271,1,0,0,0,271,11,1,0,0,0,272,
        274,3,198,99,0,273,275,3,100,50,0,274,273,1,0,0,0,274,275,1,0,0,
        0,275,276,1,0,0,0,276,277,3,10,5,0,277,279,1,0,0,0,278,272,1,0,0,
        0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,13,1,0,0,0,
        282,284,3,196,98,0,283,285,3,100,50,0,284,283,1,0,0,0,284,285,1,
        0,0,0,285,286,1,0,0,0,286,287,3,10,5,0,287,289,1,0,0,0,288,282,1,
        0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,15,1,0,
        0,0,292,293,5,28,0,0,293,296,3,10,5,0,294,297,3,12,6,0,295,297,3,
        14,7,0,296,294,1,0,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,17,1,
        0,0,0,298,299,5,31,0,0,299,302,3,10,5,0,300,303,3,12,6,0,301,303,
        3,14,7,0,302,300,1,0,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,19,
        1,0,0,0,304,309,3,182,91,0,305,309,5,77,0,0,306,309,5,78,0,0,307,
        309,5,79,0,0,308,304,1,0,0,0,308,305,1,0,0,0,308,306,1,0,0,0,308,
        307,1,0,0,0,309,21,1,0,0,0,310,316,3,182,91,0,311,316,3,180,90,0,
        312,316,5,79,0,0,313,316,5,20,0,0,314,316,5,72,0,0,315,310,1,0,0,
        0,315,311,1,0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,
        0,316,23,1,0,0,0,317,326,3,6,3,0,318,320,3,28,14,0,319,321,3,184,
        92,0,320,319,1,0,0,0,320,321,1,0,0,0,321,325,1,0,0,0,322,325,3,164,
        82,0,323,325,3,168,84,0,324,318,1,0,0,0,324,322,1,0,0,0,324,323,
        1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,25,1,
        0,0,0,328,326,1,0,0,0,329,331,3,24,12,0,330,332,3,114,57,0,331,330,
        1,0,0,0,331,332,1,0,0,0,332,27,1,0,0,0,333,350,3,122,61,0,334,350,
        3,124,62,0,335,350,3,126,63,0,336,350,3,130,65,0,337,350,3,128,64,
        0,338,350,3,132,66,0,339,350,3,134,67,0,340,350,3,136,68,0,341,350,
        3,138,69,0,342,350,3,140,70,0,343,350,3,142,71,0,344,350,3,146,73,
        0,345,350,3,164,82,0,346,350,3,172,86,0,347,350,3,174,87,0,348,350,
        3,176,88,0,349,333,1,0,0,0,349,334,1,0,0,0,349,335,1,0,0,0,349,336,
        1,0,0,0,349,337,1,0,0,0,349,338,1,0,0,0,349,339,1,0,0,0,349,340,
        1,0,0,0,349,341,1,0,0,0,349,342,1,0,0,0,349,343,1,0,0,0,349,344,
        1,0,0,0,349,345,1,0,0,0,349,346,1,0,0,0,349,347,1,0,0,0,349,348,
        1,0,0,0,350,29,1,0,0,0,351,352,7,0,0,0,352,31,1,0,0,0,353,354,7,
        1,0,0,354,33,1,0,0,0,355,356,5,71,0,0,356,357,3,190,95,0,357,360,
        5,74,0,0,358,361,3,40,20,0,359,361,3,38,19,0,360,358,1,0,0,0,360,
        359,1,0,0,0,361,363,1,0,0,0,362,364,3,36,18,0,363,362,1,0,0,0,363,
        364,1,0,0,0,364,35,1,0,0,0,365,368,5,68,0,0,366,369,3,40,20,0,367,
        369,3,38,19,0,368,366,1,0,0,0,368,367,1,0,0,0,369,37,1,0,0,0,370,
        372,3,30,15,0,371,373,3,40,20,0,372,371,1,0,0,0,373,374,1,0,0,0,
        374,372,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,377,3,32,16,
        0,377,39,1,0,0,0,378,403,3,64,32,0,379,403,3,34,17,0,380,403,3,68,
        34,0,381,403,3,70,35,0,382,403,3,72,36,0,383,403,3,74,37,0,384,403,
        3,76,38,0,385,403,3,78,39,0,386,403,3,80,40,0,387,403,3,82,41,0,
        388,403,3,84,42,0,389,403,3,86,43,0,390,403,3,88,44,0,391,403,3,
        90,45,0,392,403,3,92,46,0,393,403,3,94,47,0,394,403,3,96,48,0,395,
        403,3,110,55,0,396,403,3,150,75,0,397,403,3,162,81,0,398,403,3,164,
        82,0,399,403,3,168,84,0,400,403,3,170,85,0,401,403,3,178,89,0,402,
        378,1,0,0,0,402,379,1,0,0,0,402,380,1,0,0,0,402,381,1,0,0,0,402,
        382,1,0,0,0,402,383,1,0,0,0,402,384,1,0,0,0,402,385,1,0,0,0,402,
        386,1,0,0,0,402,387,1,0,0,0,402,388,1,0,0,0,402,389,1,0,0,0,402,
        390,1,0,0,0,402,391,1,0,0,0,402,392,1,0,0,0,402,393,1,0,0,0,402,
        394,1,0,0,0,402,395,1,0,0,0,402,396,1,0,0,0,402,397,1,0,0,0,402,
        398,1,0,0,0,402,399,1,0,0,0,402,400,1,0,0,0,402,401,1,0,0,0,403,
        41,1,0,0,0,404,405,5,71,0,0,405,406,3,190,95,0,406,409,5,74,0,0,
        407,410,3,48,24,0,408,410,3,46,23,0,409,407,1,0,0,0,409,408,1,0,
        0,0,410,412,1,0,0,0,411,413,3,44,22,0,412,411,1,0,0,0,412,413,1,
        0,0,0,413,43,1,0,0,0,414,417,5,68,0,0,415,418,3,48,24,0,416,418,
        3,46,23,0,417,415,1,0,0,0,417,416,1,0,0,0,418,45,1,0,0,0,419,421,
        3,30,15,0,420,422,3,48,24,0,421,420,1,0,0,0,422,423,1,0,0,0,423,
        421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,32,16,0,426,
        47,1,0,0,0,427,440,3,58,29,0,428,440,3,60,30,0,429,440,3,66,33,0,
        430,440,3,42,21,0,431,440,3,26,13,0,432,440,3,106,53,0,433,440,3,
        50,25,0,434,440,3,150,75,0,435,440,3,164,82,0,436,440,3,168,84,0,
        437,440,3,170,85,0,438,440,3,56,28,0,439,427,1,0,0,0,439,428,1,0,
        0,0,439,429,1,0,0,0,439,430,1,0,0,0,439,431,1,0,0,0,439,432,1,0,
        0,0,439,433,1,0,0,0,439,434,1,0,0,0,439,435,1,0,0,0,439,436,1,0,
        0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,49,1,0,0,0,441,442,5,77,
        0,0,442,443,5,29,0,0,443,453,3,52,26,0,444,446,3,28,14,0,445,447,
        3,184,92,0,446,445,1,0,0,0,446,447,1,0,0,0,447,452,1,0,0,0,448,452,
        3,164,82,0,449,452,3,168,84,0,450,452,3,114,57,0,451,444,1,0,0,0,
        451,448,1,0,0,0,451,449,1,0,0,0,451,450,1,0,0,0,452,455,1,0,0,0,
        453,451,1,0,0,0,453,454,1,0,0,0,454,51,1,0,0,0,455,453,1,0,0,0,456,
        462,3,54,27,0,457,458,3,192,96,0,458,459,3,54,27,0,459,461,1,0,0,
        0,460,457,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,
        0,463,53,1,0,0,0,464,462,1,0,0,0,465,473,5,97,0,0,466,474,3,58,29,
        0,467,474,3,60,30,0,468,474,3,66,33,0,469,474,3,26,13,0,470,474,
        3,50,25,0,471,474,3,150,75,0,472,474,3,170,85,0,473,466,1,0,0,0,
        473,467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,0,
        473,471,1,0,0,0,473,472,1,0,0,0,474,484,1,0,0,0,475,477,3,28,14,
        0,476,478,3,184,92,0,477,476,1,0,0,0,477,478,1,0,0,0,478,483,1,0,
        0,0,479,483,3,164,82,0,480,483,3,168,84,0,481,483,3,114,57,0,482,
        475,1,0,0,0,482,479,1,0,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,
        486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,
        484,1,0,0,0,487,488,5,103,0,0,488,55,1,0,0,0,489,499,5,19,0,0,490,
        500,3,42,21,0,491,500,3,58,29,0,492,500,3,60,30,0,493,500,3,66,33,
        0,494,500,3,106,53,0,495,500,3,26,13,0,496,500,3,50,25,0,497,500,
        3,150,75,0,498,500,3,170,85,0,499,490,1,0,0,0,499,491,1,0,0,0,499,
        492,1,0,0,0,499,493,1,0,0,0,499,494,1,0,0,0,499,495,1,0,0,0,499,
        496,1,0,0,0,499,497,1,0,0,0,499,498,1,0,0,0,500,501,1,0,0,0,501,
        499,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,513,5,27,0,0,504,
        506,3,28,14,0,505,507,3,184,92,0,506,505,1,0,0,0,506,507,1,0,0,0,
        507,512,1,0,0,0,508,512,3,164,82,0,509,512,3,168,84,0,510,512,3,
        114,57,0,511,504,1,0,0,0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,
        1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,57,1,
        0,0,0,515,513,1,0,0,0,516,517,5,77,0,0,517,518,5,20,0,0,518,520,
        3,190,95,0,519,521,3,172,86,0,520,519,1,0,0,0,520,521,1,0,0,0,521,
        523,1,0,0,0,522,524,3,164,82,0,523,522,1,0,0,0,523,524,1,0,0,0,524,
        525,1,0,0,0,525,526,3,114,57,0,526,59,1,0,0,0,527,528,5,77,0,0,528,
        529,5,21,0,0,529,531,3,190,95,0,530,532,3,164,82,0,531,530,1,0,0,
        0,531,532,1,0,0,0,532,533,1,0,0,0,533,534,3,114,57,0,534,61,1,0,
        0,0,535,536,5,97,0,0,536,537,3,98,49,0,537,538,5,77,0,0,538,539,
        5,103,0,0,539,63,1,0,0,0,540,543,3,152,76,0,541,543,3,154,77,0,542,
        540,1,0,0,0,542,541,1,0,0,0,543,549,1,0,0,0,544,547,3,192,96,0,545,
        548,3,152,76,0,546,548,3,154,77,0,547,545,1,0,0,0,547,546,1,0,0,
        0,548,550,1,0,0,0,549,544,1,0,0,0,549,550,1,0,0,0,550,561,1,0,0,
        0,551,553,5,72,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,
        0,554,560,3,166,83,0,555,560,3,108,54,0,556,560,3,164,82,0,557,560,
        3,110,55,0,558,560,3,184,92,0,559,552,1,0,0,0,559,555,1,0,0,0,559,
        556,1,0,0,0,559,557,1,0,0,0,559,558,1,0,0,0,560,563,1,0,0,0,561,
        559,1,0,0,0,561,562,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,564,
        566,3,112,56,0,565,564,1,0,0,0,565,566,1,0,0,0,566,65,1,0,0,0,567,
        570,3,152,76,0,568,570,3,154,77,0,569,567,1,0,0,0,569,568,1,0,0,
        0,570,576,1,0,0,0,571,574,3,192,96,0,572,575,3,152,76,0,573,575,
        3,154,77,0,574,572,1,0,0,0,574,573,1,0,0,0,575,577,1,0,0,0,576,571,
        1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,24,12,0,579,578,
        1,0,0,0,579,580,1,0,0,0,580,590,1,0,0,0,581,589,3,108,54,0,582,589,
        3,164,82,0,583,589,3,168,84,0,584,589,3,176,88,0,585,589,3,172,86,
        0,586,589,3,114,57,0,587,589,3,184,92,0,588,581,1,0,0,0,588,582,
        1,0,0,0,588,583,1,0,0,0,588,584,1,0,0,0,588,585,1,0,0,0,588,586,
        1,0,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,
        1,0,0,0,591,67,1,0,0,0,592,590,1,0,0,0,593,595,3,116,58,0,594,596,
        3,112,56,0,595,594,1,0,0,0,595,596,1,0,0,0,596,69,1,0,0,0,597,599,
        3,118,59,0,598,600,3,112,56,0,599,598,1,0,0,0,599,600,1,0,0,0,600,
        71,1,0,0,0,601,603,3,120,60,0,602,604,3,112,56,0,603,602,1,0,0,0,
        603,604,1,0,0,0,604,73,1,0,0,0,605,607,3,122,61,0,606,608,3,112,
        56,0,607,606,1,0,0,0,607,608,1,0,0,0,608,75,1,0,0,0,609,611,3,124,
        62,0,610,612,3,112,56,0,611,610,1,0,0,0,611,612,1,0,0,0,612,77,1,
        0,0,0,613,615,3,128,64,0,614,616,3,112,56,0,615,614,1,0,0,0,615,
        616,1,0,0,0,616,79,1,0,0,0,617,619,3,130,65,0,618,620,3,112,56,0,
        619,618,1,0,0,0,619,620,1,0,0,0,620,81,1,0,0,0,621,623,3,134,67,
        0,622,624,3,112,56,0,623,622,1,0,0,0,623,624,1,0,0,0,624,83,1,0,
        0,0,625,627,3,136,68,0,626,628,3,112,56,0,627,626,1,0,0,0,627,628,
        1,0,0,0,628,85,1,0,0,0,629,631,3,138,69,0,630,632,3,112,56,0,631,
        630,1,0,0,0,631,632,1,0,0,0,632,87,1,0,0,0,633,635,3,140,70,0,634,
        636,3,112,56,0,635,634,1,0,0,0,635,636,1,0,0,0,636,89,1,0,0,0,637,
        639,3,142,71,0,638,640,3,112,56,0,639,638,1,0,0,0,639,640,1,0,0,
        0,640,91,1,0,0,0,641,643,3,144,72,0,642,644,3,112,56,0,643,642,1,
        0,0,0,643,644,1,0,0,0,644,93,1,0,0,0,645,647,3,148,74,0,646,648,
        3,112,56,0,647,646,1,0,0,0,647,648,1,0,0,0,648,95,1,0,0,0,649,651,
        3,176,88,0,650,652,3,112,56,0,651,650,1,0,0,0,651,652,1,0,0,0,652,
        97,1,0,0,0,653,654,7,2,0,0,654,99,1,0,0,0,655,656,5,104,0,0,656,
        101,1,0,0,0,657,658,5,98,0,0,658,103,1,0,0,0,659,660,7,3,0,0,660,
        105,1,0,0,0,661,662,5,23,0,0,662,664,3,190,95,0,663,665,5,105,0,
        0,664,663,1,0,0,0,664,665,1,0,0,0,665,107,1,0,0,0,666,667,5,6,0,
        0,667,669,3,180,90,0,668,670,5,105,0,0,669,668,1,0,0,0,669,670,1,
        0,0,0,670,109,1,0,0,0,671,672,5,30,0,0,672,674,3,156,78,0,673,671,
        1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,111,
        1,0,0,0,677,678,5,32,0,0,678,679,3,180,90,0,679,113,1,0,0,0,680,
        681,5,32,0,0,681,683,3,180,90,0,682,684,5,105,0,0,683,682,1,0,0,
        0,683,684,1,0,0,0,684,115,1,0,0,0,685,686,5,33,0,0,686,689,5,77,
        0,0,687,688,5,52,0,0,688,690,5,77,0,0,689,687,1,0,0,0,689,690,1,
        0,0,0,690,691,1,0,0,0,691,693,3,104,52,0,692,694,3,6,3,0,693,692,
        1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,697,3,184,92,0,696,695,
        1,0,0,0,696,697,1,0,0,0,697,701,1,0,0,0,698,700,3,108,54,0,699,698,
        1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,705,
        1,0,0,0,703,701,1,0,0,0,704,706,3,164,82,0,705,704,1,0,0,0,705,706,
        1,0,0,0,706,117,1,0,0,0,707,708,5,34,0,0,708,710,5,77,0,0,709,711,
        3,6,3,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,714,
        3,184,92,0,713,712,1,0,0,0,713,714,1,0,0,0,714,119,1,0,0,0,715,716,
        5,35,0,0,716,718,5,77,0,0,717,719,3,6,3,0,718,717,1,0,0,0,718,719,
        1,0,0,0,719,721,1,0,0,0,720,722,3,184,92,0,721,720,1,0,0,0,721,722,
        1,0,0,0,722,121,1,0,0,0,723,724,5,36,0,0,724,725,5,77,0,0,725,727,
        3,104,52,0,726,728,3,184,92,0,727,726,1,0,0,0,727,728,1,0,0,0,728,
        123,1,0,0,0,729,730,5,37,0,0,730,731,5,77,0,0,731,732,3,104,52,0,
        732,733,5,97,0,0,733,739,5,80,0,0,734,735,3,196,98,0,735,736,5,80,
        0,0,736,738,1,0,0,0,737,734,1,0,0,0,738,741,1,0,0,0,739,737,1,0,
        0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,739,1,0,0,0,742,744,5,103,
        0,0,743,745,3,184,92,0,744,743,1,0,0,0,744,745,1,0,0,0,745,125,1,
        0,0,0,746,747,5,38,0,0,747,749,5,77,0,0,748,750,3,184,92,0,749,748,
        1,0,0,0,749,750,1,0,0,0,750,127,1,0,0,0,751,752,5,39,0,0,752,753,
        5,77,0,0,753,755,3,104,52,0,754,756,3,6,3,0,755,754,1,0,0,0,755,
        756,1,0,0,0,756,758,1,0,0,0,757,759,3,184,92,0,758,757,1,0,0,0,758,
        759,1,0,0,0,759,129,1,0,0,0,760,761,5,40,0,0,761,762,5,77,0,0,762,
        774,3,104,52,0,763,764,5,97,0,0,764,770,5,80,0,0,765,766,3,196,98,
        0,766,767,5,80,0,0,767,769,1,0,0,0,768,765,1,0,0,0,769,772,1,0,0,
        0,770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,770,1,0,0,
        0,773,775,5,103,0,0,774,763,1,0,0,0,774,775,1,0,0,0,775,777,1,0,
        0,0,776,778,3,184,92,0,777,776,1,0,0,0,777,778,1,0,0,0,778,131,1,
        0,0,0,779,780,5,41,0,0,780,782,5,77,0,0,781,783,3,184,92,0,782,781,
        1,0,0,0,782,783,1,0,0,0,783,133,1,0,0,0,784,785,5,44,0,0,785,786,
        5,77,0,0,786,788,3,6,3,0,787,789,3,184,92,0,788,787,1,0,0,0,788,
        789,1,0,0,0,789,793,1,0,0,0,790,792,3,108,54,0,791,790,1,0,0,0,792,
        795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,794,797,1,0,0,0,795,
        793,1,0,0,0,796,798,3,164,82,0,797,796,1,0,0,0,797,798,1,0,0,0,798,
        135,1,0,0,0,799,800,5,45,0,0,800,801,5,77,0,0,801,803,3,6,3,0,802,
        804,3,184,92,0,803,802,1,0,0,0,803,804,1,0,0,0,804,808,1,0,0,0,805,
        807,3,108,54,0,806,805,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,
        809,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,811,813,3,164,82,0,812,
        811,1,0,0,0,812,813,1,0,0,0,813,137,1,0,0,0,814,815,5,42,0,0,815,
        818,5,77,0,0,816,819,3,6,3,0,817,819,3,190,95,0,818,816,1,0,0,0,
        818,817,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,822,3,184,92,
        0,821,820,1,0,0,0,821,822,1,0,0,0,822,826,1,0,0,0,823,825,3,108,
        54,0,824,823,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,
        0,0,827,830,1,0,0,0,828,826,1,0,0,0,829,831,3,164,82,0,830,829,1,
        0,0,0,830,831,1,0,0,0,831,139,1,0,0,0,832,833,5,43,0,0,833,834,5,
        77,0,0,834,141,1,0,0,0,835,836,5,46,0,0,836,837,5,77,0,0,837,838,
        3,104,52,0,838,839,5,97,0,0,839,845,5,80,0,0,840,841,3,196,98,0,
        841,842,5,80,0,0,842,844,1,0,0,0,843,840,1,0,0,0,844,847,1,0,0,0,
        845,843,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,845,1,0,0,0,
        848,850,5,103,0,0,849,851,3,184,92,0,850,849,1,0,0,0,850,851,1,0,
        0,0,851,855,1,0,0,0,852,854,3,108,54,0,853,852,1,0,0,0,854,857,1,
        0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,143,1,0,0,0,857,855,1,
        0,0,0,858,861,5,47,0,0,859,862,3,152,76,0,860,862,3,154,77,0,861,
        859,1,0,0,0,861,860,1,0,0,0,862,866,1,0,0,0,863,865,3,108,54,0,864,
        863,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,
        870,1,0,0,0,868,866,1,0,0,0,869,871,3,164,82,0,870,869,1,0,0,0,870,
        871,1,0,0,0,871,873,1,0,0,0,872,874,3,184,92,0,873,872,1,0,0,0,873,
        874,1,0,0,0,874,145,1,0,0,0,875,876,5,48,0,0,876,878,5,77,0,0,877,
        879,3,184,92,0,878,877,1,0,0,0,878,879,1,0,0,0,879,147,1,0,0,0,880,
        881,5,49,0,0,881,882,5,77,0,0,882,884,3,104,52,0,883,885,3,6,3,0,
        884,883,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,888,3,184,92,
        0,887,886,1,0,0,0,887,888,1,0,0,0,888,892,1,0,0,0,889,891,3,108,
        54,0,890,889,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,
        0,0,893,149,1,0,0,0,894,892,1,0,0,0,895,896,5,77,0,0,896,901,5,50,
        0,0,897,898,5,97,0,0,898,899,3,190,95,0,899,900,5,103,0,0,900,902,
        1,0,0,0,901,897,1,0,0,0,901,902,1,0,0,0,902,907,1,0,0,0,903,906,
        3,164,82,0,904,906,3,172,86,0,905,903,1,0,0,0,905,904,1,0,0,0,906,
        909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,911,1,0,0,0,909,
        907,1,0,0,0,910,912,3,114,57,0,911,910,1,0,0,0,911,912,1,0,0,0,912,
        151,1,0,0,0,913,914,5,77,0,0,914,916,5,22,0,0,915,917,3,62,31,0,
        916,915,1,0,0,0,916,917,1,0,0,0,917,153,1,0,0,0,918,919,5,77,0,0,
        919,921,5,24,0,0,920,922,3,62,31,0,921,920,1,0,0,0,921,922,1,0,0,
        0,922,155,1,0,0,0,923,924,3,158,79,0,924,926,5,90,0,0,925,927,3,
        160,80,0,926,925,1,0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,923,
        1,0,0,0,929,930,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,157,
        1,0,0,0,932,933,5,80,0,0,933,159,1,0,0,0,934,935,7,4,0,0,935,161,
        1,0,0,0,936,937,5,51,0,0,937,163,1,0,0,0,938,939,5,53,0,0,939,941,
        5,1,0,0,940,938,1,0,0,0,941,942,1,0,0,0,942,940,1,0,0,0,942,943,
        1,0,0,0,943,165,1,0,0,0,944,945,7,5,0,0,945,167,1,0,0,0,946,947,
        5,56,0,0,947,949,3,180,90,0,948,950,5,105,0,0,949,948,1,0,0,0,949,
        950,1,0,0,0,950,952,1,0,0,0,951,946,1,0,0,0,952,953,1,0,0,0,953,
        951,1,0,0,0,953,954,1,0,0,0,954,169,1,0,0,0,955,961,7,6,0,0,956,
        960,3,164,82,0,957,960,3,172,86,0,958,960,3,114,57,0,959,956,1,0,
        0,0,959,957,1,0,0,0,959,958,1,0,0,0,960,963,1,0,0,0,961,959,1,0,
        0,0,961,962,1,0,0,0,962,171,1,0,0,0,963,961,1,0,0,0,964,965,5,59,
        0,0,965,967,3,156,78,0,966,964,1,0,0,0,967,968,1,0,0,0,968,966,1,
        0,0,0,968,969,1,0,0,0,969,173,1,0,0,0,970,971,5,63,0,0,971,973,3,
        190,95,0,972,974,3,184,92,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
        175,1,0,0,0,975,978,7,7,0,0,976,977,5,77,0,0,977,979,3,104,52,0,
        978,976,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,982,3,190,95,
        0,981,980,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,985,3,184,
        92,0,984,983,1,0,0,0,984,985,1,0,0,0,985,177,1,0,0,0,986,987,5,60,
        0,0,987,179,1,0,0,0,988,989,5,1,0,0,989,181,1,0,0,0,990,991,5,80,
        0,0,991,183,1,0,0,0,992,995,5,62,0,0,993,994,5,90,0,0,994,996,7,
        8,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,185,1,0,0,0,997,998,5,
        64,0,0,998,999,5,77,0,0,999,1000,3,104,52,0,1000,1004,3,6,3,0,1001,
        1003,3,108,54,0,1002,1001,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,
        0,0,0,1004,1005,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1007,
        1009,3,164,82,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,
        0,0,0,1010,1012,3,114,57,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
        187,1,0,0,0,1013,1014,5,97,0,0,1014,1015,5,65,0,0,1015,1016,3,190,
        95,0,1016,1017,5,103,0,0,1017,189,1,0,0,0,1018,1019,6,95,-1,0,1019,
        1034,3,8,4,0,1020,1034,3,22,11,0,1021,1034,5,77,0,0,1022,1034,5,
        102,0,0,1023,1034,5,80,0,0,1024,1034,3,180,90,0,1025,1034,5,78,0,
        0,1026,1028,5,97,0,0,1027,1029,5,50,0,0,1028,1027,1,0,0,0,1028,1029,
        1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,190,95,0,1031,1032,5,103,0,
        0,1032,1034,1,0,0,0,1033,1018,1,0,0,0,1033,1020,1,0,0,0,1033,1021,
        1,0,0,0,1033,1022,1,0,0,0,1033,1023,1,0,0,0,1033,1024,1,0,0,0,1033,
        1025,1,0,0,0,1033,1026,1,0,0,0,1034,1048,1,0,0,0,1035,1036,10,11,
        0,0,1036,1037,3,194,97,0,1037,1038,3,190,95,12,1038,1047,1,0,0,0,
        1039,1040,10,10,0,0,1040,1041,3,192,96,0,1041,1042,3,190,95,11,1042,
        1047,1,0,0,0,1043,1044,10,9,0,0,1044,1045,5,88,0,0,1045,1047,3,190,
        95,10,1046,1035,1,0,0,0,1046,1039,1,0,0,0,1046,1043,1,0,0,0,1047,
        1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,191,1,0,0,
        0,1050,1048,1,0,0,0,1051,1052,7,9,0,0,1052,193,1,0,0,0,1053,1054,
        7,10,0,0,1054,195,1,0,0,0,1055,1056,7,11,0,0,1056,197,1,0,0,0,1057,
        1058,7,12,0,0,1058,199,1,0,0,0,151,203,210,216,224,230,236,240,242,
        246,253,257,260,266,270,274,280,284,290,296,302,308,315,320,324,
        326,331,349,360,363,368,374,402,409,412,417,423,439,446,451,453,
        462,473,477,482,484,499,501,506,511,513,520,523,531,542,547,549,
        552,559,561,565,569,574,576,579,588,590,595,599,603,607,611,615,
        619,623,627,631,635,639,643,647,651,664,669,675,683,689,693,696,
        701,705,710,713,718,721,727,739,744,749,755,758,770,774,777,782,
        788,793,797,803,808,812,818,821,826,830,845,850,855,861,866,870,
        873,878,884,887,892,901,905,907,911,916,921,926,930,942,949,953,
        959,961,968,973,978,981,984,995,1004,1008,1011,1028,1033,1046,1048
    ]

class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'*'", "<INVALID>", "'!'", "'`'", 
                     "'\\'", "':'", "','", "'\"'", "'='", "'>='", "'>'", 
                     "'#'", "'-'", "'<='", "'<'", "'('", "'['", "'<>'", 
                     "'%'", "'+'", "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOCOUNT", "NOTGPA", "WHITESPACE", "ACCEPT", "ALLOW", 
                      "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", 
                      "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", 
                      "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", 
                      "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PROXY_ADVICE", "PSEUDO", "PSUEDO", 
                      "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", "RULE_TAG", 
                      "STANDALONE", "SHARE", "TAG", "SAME_DISC", "UNDER", 
                      "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNT", "THEN", "AND", "OR", 
                      "NUMBER", "CATALOG_NUMBER", "WILD", "SYMBOL", "AMPERSAND", 
                      "ASTERISK", "AT", "BANG", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "DBL_QUOTE", "EQ", "GE", "GT", "HASH", 
                      "HYPHEN", "LE", "LT", "LP", "L_SQB", "NE", "PERCENT", 
                      "PLUS", "QUESTION_MARK", "RP", "R_SQB", "SEMICOLON", 
                      "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_header = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_full_course = 4
    RULE_course_item = 5
    RULE_and_list = 6
    RULE_or_list = 7
    RULE_except_list = 8
    RULE_include_list = 9
    RULE_catalog_number = 10
    RULE_discipline = 11
    RULE_course_list_body = 12
    RULE_course_list_rule = 13
    RULE_qualifier = 14
    RULE_begin_if = 15
    RULE_end_if = 16
    RULE_header_conditional = 17
    RULE_header_else = 18
    RULE_header_rule_group = 19
    RULE_header_rule = 20
    RULE_body_conditional = 21
    RULE_body_else = 22
    RULE_body_rule_group = 23
    RULE_body_rule = 24
    RULE_group_requirement = 25
    RULE_groups = 26
    RULE_group = 27
    RULE_subset = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_allow_clause = 31
    RULE_header_class_credit = 32
    RULE_body_class_credit = 33
    RULE_header_lastres = 34
    RULE_header_maxclass = 35
    RULE_header_maxcredit = 36
    RULE_header_maxpassfail = 37
    RULE_header_maxperdisc = 38
    RULE_header_maxterm = 39
    RULE_header_maxtransfer = 40
    RULE_header_minclass = 41
    RULE_header_mincredit = 42
    RULE_header_mingpa = 43
    RULE_header_mingrade = 44
    RULE_header_minperdisc = 45
    RULE_header_minres = 46
    RULE_header_minterm = 47
    RULE_header_share = 48
    RULE_allow = 49
    RULE_area_end = 50
    RULE_area_start = 51
    RULE_class_or_credit = 52
    RULE_copy_rules = 53
    RULE_display = 54
    RULE_header_tag = 55
    RULE_header_label = 56
    RULE_label = 57
    RULE_lastres = 58
    RULE_maxclass = 59
    RULE_maxcredit = 60
    RULE_maxpassfail = 61
    RULE_maxperdisc = 62
    RULE_maxspread = 63
    RULE_maxterm = 64
    RULE_maxtransfer = 65
    RULE_minarea = 66
    RULE_minclass = 67
    RULE_mincredit = 68
    RULE_mingpa = 69
    RULE_mingrade = 70
    RULE_minperdisc = 71
    RULE_minres = 72
    RULE_minspread = 73
    RULE_minterm = 74
    RULE_noncourse = 75
    RULE_num_classes = 76
    RULE_num_credits = 77
    RULE_nv_pair = 78
    RULE_nv_lhs = 79
    RULE_nv_rhs = 80
    RULE_optional = 81
    RULE_proxy_advice = 82
    RULE_pseudo = 83
    RULE_remark = 84
    RULE_rule_complete = 85
    RULE_rule_tag = 86
    RULE_samedisc = 87
    RULE_share = 88
    RULE_standalone = 89
    RULE_string = 90
    RULE_symbol = 91
    RULE_tag = 92
    RULE_under = 93
    RULE_with_clause = 94
    RULE_expression = 95
    RULE_logical_op = 96
    RULE_relational_op = 97
    RULE_list_or = 98
    RULE_list_and = 99

    ruleNames =  [ "req_block", "header", "body", "course_list", "full_course", 
                   "course_item", "and_list", "or_list", "except_list", 
                   "include_list", "catalog_number", "discipline", "course_list_body", 
                   "course_list_rule", "qualifier", "begin_if", "end_if", 
                   "header_conditional", "header_else", "header_rule_group", 
                   "header_rule", "body_conditional", "body_else", "body_rule_group", 
                   "body_rule", "group_requirement", "groups", "group", 
                   "subset", "block", "blocktype", "allow_clause", "header_class_credit", 
                   "body_class_credit", "header_lastres", "header_maxclass", 
                   "header_maxcredit", "header_maxpassfail", "header_maxperdisc", 
                   "header_maxterm", "header_maxtransfer", "header_minclass", 
                   "header_mincredit", "header_mingpa", "header_mingrade", 
                   "header_minperdisc", "header_minres", "header_minterm", 
                   "header_share", "allow", "area_end", "area_start", "class_or_credit", 
                   "copy_rules", "display", "header_tag", "header_label", 
                   "label", "lastres", "maxclass", "maxcredit", "maxpassfail", 
                   "maxperdisc", "maxspread", "maxterm", "maxtransfer", 
                   "minarea", "minclass", "mincredit", "mingpa", "mingrade", 
                   "minperdisc", "minres", "minspread", "minterm", "noncourse", 
                   "num_classes", "num_credits", "nv_pair", "nv_lhs", "nv_rhs", 
                   "optional", "proxy_advice", "pseudo", "remark", "rule_complete", 
                   "rule_tag", "samedisc", "share", "standalone", "string", 
                   "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOCOUNT=13
    NOTGPA=14
    WHITESPACE=15
    ACCEPT=16
    ALLOW=17
    BEGIN=18
    BEGINSUB=19
    BLOCK=20
    BLOCKTYPE=21
    CLASS=22
    COPY_RULES=23
    CREDIT=24
    DONT_SHARE=25
    ENDOT=26
    ENDSUB=27
    EXCEPT=28
    GROUP=29
    HEADER_TAG=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PROXY_ADVICE=53
    PSEUDO=54
    PSUEDO=55
    REMARK=56
    RULE_COMPLETE=57
    RULE_INCOMPLETE=58
    RULE_TAG=59
    STANDALONE=60
    SHARE=61
    TAG=62
    SAME_DISC=63
    UNDER=64
    WITH=65
    BEGINELSE=66
    BEGINIF=67
    ELSE=68
    ENDELSE=69
    ENDIF=70
    IF=71
    IS=72
    ISNT=73
    THEN=74
    AND=75
    OR=76
    NUMBER=77
    CATALOG_NUMBER=78
    WILD=79
    SYMBOL=80
    AMPERSAND=81
    ASTERISK=82
    AT=83
    BANG=84
    BACKQUOTE=85
    BACKSLASH=86
    COLON=87
    COMMA=88
    DBL_QUOTE=89
    EQ=90
    GE=91
    GT=92
    HASH=93
    HYPHEN=94
    LE=95
    LT=96
    LP=97
    L_SQB=98
    NE=99
    PERCENT=100
    PLUS=101
    QUESTION_MARK=102
    RP=103
    R_SQB=104
    SEMICOLON=105
    SLASH=106
    UNDERSCORE=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def header(self):
            return self.getTypedRuleContext(ReqBlockParser.HeaderContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 200
                    self.matchWildcard() 
                self.state = 205
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 206
            self.match(ReqBlockParser.BEGIN)
            self.state = 207
            self.header()
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 208
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 209
                self.body()


            self.state = 212
            self.match(ReqBlockParser.ENDOT)
            self.state = 216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 213
                    self.matchWildcard() 
                self.state = 218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 219
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = ReqBlockParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4574086843784993) != 0:
                self.state = 221
                self.header_rule()
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 513410357530198018) != 0 or (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 134218691) != 0:
                self.state = 227
                self.body_rule()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Except_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Except_listContext,i)


        def include_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Include_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Include_listContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.course_item()
            self.state = 236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75, 101]:
                self.state = 234
                self.and_list()
                pass
            elif token in [76, 88]:
                self.state = 235
                self.or_list()
                pass
            elif token in [-1, 1, 6, 19, 20, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 77, 78, 79, 80, 98, 103, 105]:
                pass
            else:
                pass
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28 or _la==31:
                self.state = 240
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 238
                    self.except_list()
                    pass
                elif token in [31]:
                    self.state = 239
                    self.include_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 245
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.discipline()
            self.state = 249
            self.catalog_number()
            self.state = 253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 250
                    self.with_clause() 
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def area_start(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_startContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def area_end(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_endContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 256
                self.area_start()


            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 259
                self.discipline()


            self.state = 262
            self.catalog_number()
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97:
                self.state = 263
                self.with_clause()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 269
                self.area_end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 272
                self.list_and()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 273
                    self.area_end()


                self.state = 276
                self.course_item()
                self.state = 280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==75 or _la==101):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 282
                self.list_or()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 283
                    self.area_end()


                self.state = 286
                self.course_item()
                self.state = 290 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76 or _la==88):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(ReqBlockParser.EXCEPT)
            self.state = 293
            self.course_item()
            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75, 101]:
                self.state = 294
                self.and_list()
                pass
            elif token in [76, 88]:
                self.state = 295
                self.or_list()
                pass
            elif token in [-1, 1, 6, 19, 20, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 77, 78, 79, 80, 98, 103, 105]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(ReqBlockParser.INCLUDING)
            self.state = 299
            self.course_item()
            self.state = 302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75, 101]:
                self.state = 300
                self.and_list()
                pass
            elif token in [76, 88]:
                self.state = 301
                self.or_list()
                pass
            elif token in [-1, 1, 6, 19, 20, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 77, 78, 79, 80, 98, 103, 105]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_catalog_number)
        try:
            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.symbol()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 307
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_discipline)
        try:
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.symbol()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self.string()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 313
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 5)
                self.state = 314
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.course_list()
            self.state = 326
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 324
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                    if la_ == 1:
                        self.state = 318
                        self.qualifier()
                        self.state = 320
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                        if la_ == 1:
                            self.state = 319
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 322
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 323
                        self.remark()
                        pass

             
                self.state = 328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_rule" ):
                listener.enterCourse_list_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_rule" ):
                listener.exitCourse_list_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_rule" ):
                return visitor.visitCourse_list_rule(self)
            else:
                return visitor.visitChildren(self)




    def course_list_rule(self):

        localctx = ReqBlockParser.Course_list_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_course_list_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.course_list_body()
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 330
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ReqBlockParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qualifier)
        try:
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.maxpassfail()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.maxperdisc()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.maxspread()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 336
                self.maxtransfer()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 5)
                self.state = 337
                self.maxterm()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 6)
                self.state = 338
                self.minarea()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 7)
                self.state = 339
                self.minclass()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 8)
                self.state = 340
                self.mincredit()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 9)
                self.state = 341
                self.mingpa()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 10)
                self.state = 342
                self.mingrade()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 11)
                self.state = 343
                self.minperdisc()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 12)
                self.state = 344
                self.minspread()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 13)
                self.state = 345
                self.proxy_advice()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 14)
                self.state = 346
                self.rule_tag()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 15)
                self.state = 347
                self.samedisc()
                pass
            elif token in [25, 61]:
                self.enterOuterAlt(localctx, 16)
                self.state = 348
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            _la = self._input.LA(1)
            if not(_la==66 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            _la = self._input.LA(1)
            if not(_la==69 or _la==70):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def header_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_conditional" ):
                listener.enterHeader_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_conditional" ):
                listener.exitHeader_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_conditional" ):
                return visitor.visitHeader_conditional(self)
            else:
                return visitor.visitChildren(self)




    def header_conditional(self):

        localctx = ReqBlockParser.Header_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_header_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(ReqBlockParser.IF)
            self.state = 356
            self.expression(0)
            self.state = 357
            self.match(ReqBlockParser.THEN)
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 30, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 53, 56, 57, 58, 60, 61, 71, 77]:
                self.state = 358
                self.header_rule()
                pass
            elif token in [66, 67]:
                self.state = 359
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 362
                self.header_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_else" ):
                listener.enterHeader_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_else" ):
                listener.exitHeader_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_else" ):
                return visitor.visitHeader_else(self)
            else:
                return visitor.visitChildren(self)




    def header_else(self):

        localctx = ReqBlockParser.Header_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_header_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(ReqBlockParser.ELSE)
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 30, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 53, 56, 57, 58, 60, 61, 71, 77]:
                self.state = 366
                self.header_rule()
                pass
            elif token in [66, 67]:
                self.state = 367
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule_group" ):
                listener.enterHeader_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule_group" ):
                listener.exitHeader_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule_group" ):
                return visitor.visitHeader_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def header_rule_group(self):

        localctx = ReqBlockParser.Header_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_header_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.begin_if()
            self.state = 372 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 371
                self.header_rule()
                self.state = 374 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4574086843784993) != 0):
                    break

            self.state = 376
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_class_creditContext,0)


        def header_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_conditionalContext,0)


        def header_lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_lastresContext,0)


        def header_maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxclassContext,0)


        def header_maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxcreditContext,0)


        def header_maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxpassfailContext,0)


        def header_maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxperdiscContext,0)


        def header_maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtermContext,0)


        def header_maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtransferContext,0)


        def header_minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minclassContext,0)


        def header_mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mincreditContext,0)


        def header_mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingpaContext,0)


        def header_mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingradeContext,0)


        def header_minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minperdiscContext,0)


        def header_minres(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minresContext,0)


        def header_minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mintermContext,0)


        def header_share(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_shareContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def optional(self):
            return self.getTypedRuleContext(ReqBlockParser.OptionalContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def standalone(self):
            return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule" ):
                listener.enterHeader_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule" ):
                listener.exitHeader_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule" ):
                return visitor.visitHeader_rule(self)
            else:
                return visitor.visitChildren(self)




    def header_rule(self):

        localctx = ReqBlockParser.Header_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_header_rule)
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.header_class_credit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 379
                self.header_conditional()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 380
                self.header_lastres()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 381
                self.header_maxclass()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 382
                self.header_maxcredit()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 383
                self.header_maxpassfail()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 384
                self.header_maxperdisc()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 385
                self.header_maxterm()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 386
                self.header_maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 387
                self.header_minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 388
                self.header_mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 389
                self.header_mingpa()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 390
                self.header_mingrade()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 391
                self.header_minperdisc()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 392
                self.header_minres()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 393
                self.header_minterm()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 394
                self.header_share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 395
                self.header_tag()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 396
                self.noncourse()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 397
                self.optional()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 398
                self.proxy_advice()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 399
                self.remark()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 400
                self.rule_complete()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 401
                self.standalone()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def body_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_conditional" ):
                listener.enterBody_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_conditional" ):
                listener.exitBody_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_conditional" ):
                return visitor.visitBody_conditional(self)
            else:
                return visitor.visitChildren(self)




    def body_conditional(self):

        localctx = ReqBlockParser.Body_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_body_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(ReqBlockParser.IF)
            self.state = 405
            self.expression(0)
            self.state = 406
            self.match(ReqBlockParser.THEN)
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 19, 20, 23, 53, 56, 57, 58, 71, 72, 77, 78, 79, 80, 98]:
                self.state = 407
                self.body_rule()
                pass
            elif token in [66, 67]:
                self.state = 408
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 411
                self.body_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_else" ):
                listener.enterBody_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_else" ):
                listener.exitBody_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_else" ):
                return visitor.visitBody_else(self)
            else:
                return visitor.visitChildren(self)




    def body_else(self):

        localctx = ReqBlockParser.Body_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_body_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(ReqBlockParser.ELSE)
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 19, 20, 23, 53, 56, 57, 58, 71, 72, 77, 78, 79, 80, 98]:
                self.state = 415
                self.body_rule()
                pass
            elif token in [66, 67]:
                self.state = 416
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.begin_if()
            self.state = 421 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 420
                self.body_rule()
                self.state = 423 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 513410357530198018) != 0 or (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 134218691) != 0):
                    break

            self.state = 425
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def body_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_body_rule)
        try:
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.blocktype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.body_conditional()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.course_list_rule()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.copy_rules()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.group_requirement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.noncourse()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.proxy_advice()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 436
                self.remark()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 437
                self.rule_complete()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 438
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def groups(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupsContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_requirement" ):
                listener.enterGroup_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_requirement" ):
                listener.exitGroup_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_requirement" ):
                return visitor.visitGroup_requirement(self)
            else:
                return visitor.visitChildren(self)




    def group_requirement(self):

        localctx = ReqBlockParser.Group_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(ReqBlockParser.NUMBER)
            self.state = 442
            self.match(ReqBlockParser.GROUP)
            self.state = 443
            self.groups()
            self.state = 453
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 444
                        self.qualifier()
                        self.state = 446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==62:
                            self.state = 445
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 448
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 449
                        self.remark()
                        pass

                    elif la_ == 4:
                        self.state = 450
                        self.label()
                        pass

             
                self.state = 455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroups" ):
                listener.enterGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroups" ):
                listener.exitGroups(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroups" ):
                return visitor.visitGroups(self)
            else:
                return visitor.visitChildren(self)




    def groups(self):

        localctx = ReqBlockParser.GroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.group()
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==76:
                self.state = 457
                self.logical_op()
                self.state = 458
                self.group()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(ReqBlockParser.LP)
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 466
                self.block()
                pass

            elif la_ == 2:
                self.state = 467
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 468
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.state = 469
                self.course_list_rule()
                pass

            elif la_ == 5:
                self.state = 470
                self.group_requirement()
                pass

            elif la_ == 6:
                self.state = 471
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 472
                self.rule_complete()
                pass


            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -6259581333970878464) != 0:
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 475
                    self.qualifier()
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 476
                        self.tag()


                    pass

                elif la_ == 2:
                    self.state = 479
                    self.proxy_advice()
                    pass

                elif la_ == 3:
                    self.state = 480
                    self.remark()
                    pass

                elif la_ == 4:
                    self.state = 481
                    self.label()
                    pass


                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def body_conditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_conditionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def body_class_credit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_class_creditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self.body_conditional()
                    pass

                elif la_ == 2:
                    self.state = 491
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 492
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 493
                    self.body_class_credit()
                    pass

                elif la_ == 5:
                    self.state = 494
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 495
                    self.course_list_rule()
                    pass

                elif la_ == 7:
                    self.state = 496
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 497
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 498
                    self.rule_complete()
                    pass


                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 432345564237004802) != 0 or (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 134218691) != 0):
                    break

            self.state = 503
            self.match(ReqBlockParser.ENDSUB)
            self.state = 513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 504
                        self.qualifier()
                        self.state = 506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==62:
                            self.state = 505
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 508
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 509
                        self.remark()
                        pass

                    elif la_ == 4:
                        self.state = 510
                        self.label()
                        pass

             
                self.state = 515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(ReqBlockParser.NUMBER)
            self.state = 517
            self.match(ReqBlockParser.BLOCK)
            self.state = 518
            self.expression(0)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 519
                self.rule_tag()


            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 522
                self.proxy_advice()


            self.state = 525
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(ReqBlockParser.NUMBER)
            self.state = 528
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 529
            self.expression(0)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 530
                self.proxy_advice()


            self.state = 533
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(ReqBlockParser.LP)
            self.state = 536
            self.allow()
            self.state = 537
            self.match(ReqBlockParser.NUMBER)
            self.state = 538
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_class_credit" ):
                listener.enterHeader_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_class_credit" ):
                listener.exitHeader_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_class_credit" ):
                return visitor.visitHeader_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def header_class_credit(self):

        localctx = ReqBlockParser.Header_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_header_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 540
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 541
                self.num_credits()
                pass


            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==76:
                self.state = 544
                self.logical_op()
                self.state = 547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 545
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 546
                    self.num_credits()
                    pass




            self.state = 561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [54, 55, 72]:
                        self.state = 552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==72:
                            self.state = 551
                            self.match(ReqBlockParser.IS)


                        self.state = 554
                        self.pseudo()
                        pass
                    elif token in [6]:
                        self.state = 555
                        self.display()
                        pass
                    elif token in [53]:
                        self.state = 556
                        self.proxy_advice()
                        pass
                    elif token in [30]:
                        self.state = 557
                        self.header_tag()
                        pass
                    elif token in [62]:
                        self.state = 558
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 564
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_class_credit" ):
                listener.enterBody_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_class_credit" ):
                listener.exitBody_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_class_credit" ):
                return visitor.visitBody_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def body_class_credit(self):

        localctx = ReqBlockParser.Body_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_body_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 567
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 568
                self.num_credits()
                pass


            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==76:
                self.state = 571
                self.logical_op()
                self.state = 574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 572
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 573
                    self.num_credits()
                    pass




            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 578
                self.course_list_body()


            self.state = 590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 588
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [6]:
                        self.state = 581
                        self.display()
                        pass
                    elif token in [53]:
                        self.state = 582
                        self.proxy_advice()
                        pass
                    elif token in [56]:
                        self.state = 583
                        self.remark()
                        pass
                    elif token in [25, 61]:
                        self.state = 584
                        self.share()
                        pass
                    elif token in [59]:
                        self.state = 585
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 586
                        self.label()
                        pass
                    elif token in [62]:
                        self.state = 587
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_lastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_lastres" ):
                listener.enterHeader_lastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_lastres" ):
                listener.exitHeader_lastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_lastres" ):
                return visitor.visitHeader_lastres(self)
            else:
                return visitor.visitChildren(self)




    def header_lastres(self):

        localctx = ReqBlockParser.Header_lastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_header_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.lastres()
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 594
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxclass" ):
                listener.enterHeader_maxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxclass" ):
                listener.exitHeader_maxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxclass" ):
                return visitor.visitHeader_maxclass(self)
            else:
                return visitor.visitChildren(self)




    def header_maxclass(self):

        localctx = ReqBlockParser.Header_maxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_header_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.maxclass()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 598
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxcredit" ):
                listener.enterHeader_maxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxcredit" ):
                listener.exitHeader_maxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxcredit" ):
                return visitor.visitHeader_maxcredit(self)
            else:
                return visitor.visitChildren(self)




    def header_maxcredit(self):

        localctx = ReqBlockParser.Header_maxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_header_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.maxcredit()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 602
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxpassfail" ):
                listener.enterHeader_maxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxpassfail" ):
                listener.exitHeader_maxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxpassfail" ):
                return visitor.visitHeader_maxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def header_maxpassfail(self):

        localctx = ReqBlockParser.Header_maxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_header_maxpassfail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.maxpassfail()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 606
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxperdisc" ):
                listener.enterHeader_maxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxperdisc" ):
                listener.exitHeader_maxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxperdisc" ):
                return visitor.visitHeader_maxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_maxperdisc(self):

        localctx = ReqBlockParser.Header_maxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_header_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.maxperdisc()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 610
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxterm" ):
                listener.enterHeader_maxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxterm" ):
                listener.exitHeader_maxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxterm" ):
                return visitor.visitHeader_maxterm(self)
            else:
                return visitor.visitChildren(self)




    def header_maxterm(self):

        localctx = ReqBlockParser.Header_maxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_header_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.maxterm()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 614
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxtransfer" ):
                listener.enterHeader_maxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxtransfer" ):
                listener.exitHeader_maxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxtransfer" ):
                return visitor.visitHeader_maxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def header_maxtransfer(self):

        localctx = ReqBlockParser.Header_maxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_header_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.maxtransfer()
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 618
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minclass" ):
                listener.enterHeader_minclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minclass" ):
                listener.exitHeader_minclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minclass" ):
                return visitor.visitHeader_minclass(self)
            else:
                return visitor.visitChildren(self)




    def header_minclass(self):

        localctx = ReqBlockParser.Header_minclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_header_minclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.minclass()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 622
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mincredit" ):
                listener.enterHeader_mincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mincredit" ):
                listener.exitHeader_mincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mincredit" ):
                return visitor.visitHeader_mincredit(self)
            else:
                return visitor.visitChildren(self)




    def header_mincredit(self):

        localctx = ReqBlockParser.Header_mincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_header_mincredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.mincredit()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 626
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingpa" ):
                listener.enterHeader_mingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingpa" ):
                listener.exitHeader_mingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingpa" ):
                return visitor.visitHeader_mingpa(self)
            else:
                return visitor.visitChildren(self)




    def header_mingpa(self):

        localctx = ReqBlockParser.Header_mingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_header_mingpa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.mingpa()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 630
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingrade" ):
                listener.enterHeader_mingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingrade" ):
                listener.exitHeader_mingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingrade" ):
                return visitor.visitHeader_mingrade(self)
            else:
                return visitor.visitChildren(self)




    def header_mingrade(self):

        localctx = ReqBlockParser.Header_mingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_header_mingrade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.mingrade()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 634
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minperdisc" ):
                listener.enterHeader_minperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minperdisc" ):
                listener.exitHeader_minperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minperdisc" ):
                return visitor.visitHeader_minperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_minperdisc(self):

        localctx = ReqBlockParser.Header_minperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_header_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.minperdisc()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 638
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minres" ):
                listener.enterHeader_minres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minres" ):
                listener.exitHeader_minres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minres" ):
                return visitor.visitHeader_minres(self)
            else:
                return visitor.visitChildren(self)




    def header_minres(self):

        localctx = ReqBlockParser.Header_minresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_header_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.minres()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 642
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minterm" ):
                listener.enterHeader_minterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minterm" ):
                listener.exitHeader_minterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minterm" ):
                return visitor.visitHeader_minterm(self)
            else:
                return visitor.visitChildren(self)




    def header_minterm(self):

        localctx = ReqBlockParser.Header_mintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_header_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.minterm()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 646
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_share" ):
                listener.enterHeader_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_share" ):
                listener.exitHeader_share(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_share" ):
                return visitor.visitHeader_share(self)
            else:
                return visitor.visitChildren(self)




    def header_share(self):

        localctx = ReqBlockParser.Header_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_header_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.share()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 650
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_end" ):
                listener.enterArea_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_end" ):
                listener.exitArea_end(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_end" ):
                return visitor.visitArea_end(self)
            else:
                return visitor.visitChildren(self)




    def area_end(self):

        localctx = ReqBlockParser.Area_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_area_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(ReqBlockParser.R_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_start" ):
                listener.enterArea_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_start" ):
                listener.exitArea_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_start" ):
                return visitor.visitArea_start(self)
            else:
                return visitor.visitChildren(self)




    def area_start(self):

        localctx = ReqBlockParser.Area_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_area_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(ReqBlockParser.L_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            _la = self._input.LA(1)
            if not(_la==22 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_copy_rules)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 662
            self.expression(0)
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 663
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(ReqBlockParser.DISPLAY)
            self.state = 667
            self.string()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 668
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.HEADER_TAG)
            else:
                return self.getToken(ReqBlockParser.HEADER_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 671
                    self.match(ReqBlockParser.HEADER_TAG)
                    self.state = 672
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 675 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_label" ):
                listener.enterHeader_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_label" ):
                listener.exitHeader_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_label" ):
                return visitor.visitHeader_label(self)
            else:
                return visitor.visitChildren(self)




    def header_label(self):

        localctx = ReqBlockParser.Header_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_header_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(ReqBlockParser.LABEL)
            self.state = 678
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(ReqBlockParser.LABEL)
            self.state = 681
            self.string()
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 682
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(ReqBlockParser.LASTRES)
            self.state = 686
            self.match(ReqBlockParser.NUMBER)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 687
                self.match(ReqBlockParser.OF)
                self.state = 688
                self.match(ReqBlockParser.NUMBER)


            self.state = 691
            self.class_or_credit()
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 692
                self.course_list()


            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 695
                self.tag()


            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 698
                self.display()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 704
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 708
            self.match(ReqBlockParser.NUMBER)
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 709
                self.course_list()


            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 712
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 716
            self.match(ReqBlockParser.NUMBER)
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 717
                self.course_list()


            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 720
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 724
            self.match(ReqBlockParser.NUMBER)
            self.state = 725
            self.class_or_credit()
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 726
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 730
            self.match(ReqBlockParser.NUMBER)
            self.state = 731
            self.class_or_credit()
            self.state = 732
            self.match(ReqBlockParser.LP)
            self.state = 733
            self.match(ReqBlockParser.SYMBOL)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76 or _la==88:
                self.state = 734
                self.list_or()
                self.state = 735
                self.match(ReqBlockParser.SYMBOL)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(ReqBlockParser.RP)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 743
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 747
            self.match(ReqBlockParser.NUMBER)
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 748
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_maxterm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(ReqBlockParser.MAXTERM)
            self.state = 752
            self.match(ReqBlockParser.NUMBER)
            self.state = 753
            self.class_or_credit()
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 754
                self.course_list()


            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 757
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 761
            self.match(ReqBlockParser.NUMBER)
            self.state = 762
            self.class_or_credit()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 763
                self.match(ReqBlockParser.LP)
                self.state = 764
                self.match(ReqBlockParser.SYMBOL)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==76 or _la==88:
                    self.state = 765
                    self.list_or()
                    self.state = 766
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 773
                self.match(ReqBlockParser.RP)


            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 776
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(ReqBlockParser.MINAREA)
            self.state = 780
            self.match(ReqBlockParser.NUMBER)
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 781
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(ReqBlockParser.MINCLASS)
            self.state = 785
            self.match(ReqBlockParser.NUMBER)
            self.state = 786
            self.course_list()
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 787
                self.tag()


            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 790
                    self.display() 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 796
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 800
            self.match(ReqBlockParser.NUMBER)
            self.state = 801
            self.course_list()
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 802
                self.tag()


            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 805
                    self.display() 
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 811
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ReqBlockParser.MINGPA)
            self.state = 815
            self.match(ReqBlockParser.NUMBER)
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 816
                self.course_list()

            elif la_ == 2:
                self.state = 817
                self.expression(0)


            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 820
                self.tag()


            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 823
                    self.display() 
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 829
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(ReqBlockParser.MINGRADE)
            self.state = 833
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 836
            self.match(ReqBlockParser.NUMBER)
            self.state = 837
            self.class_or_credit()
            self.state = 838
            self.match(ReqBlockParser.LP)
            self.state = 839
            self.match(ReqBlockParser.SYMBOL)
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76 or _la==88:
                self.state = 840
                self.list_or()
                self.state = 841
                self.match(ReqBlockParser.SYMBOL)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 848
            self.match(ReqBlockParser.RP)
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 849
                self.tag()


            self.state = 855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 852
                    self.display() 
                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(ReqBlockParser.MINRES)
            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 859
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 860
                self.num_credits()
                pass


            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 863
                self.display()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 869
                self.proxy_advice()


            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 872
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 876
            self.match(ReqBlockParser.NUMBER)
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 877
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(ReqBlockParser.MINTERM)
            self.state = 881
            self.match(ReqBlockParser.NUMBER)
            self.state = 882
            self.class_or_credit()
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 883
                self.course_list()


            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 886
                self.tag()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 889
                self.display()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_noncourse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(ReqBlockParser.NUMBER)
            self.state = 896
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 897
                self.match(ReqBlockParser.LP)
                self.state = 898
                self.expression(0)
                self.state = 899
                self.match(ReqBlockParser.RP)


            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 905
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 903
                        self.proxy_advice()
                        pass
                    elif token in [59]:
                        self.state = 904
                        self.rule_tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 910
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(ReqBlockParser.NUMBER)
            self.state = 914
            self.match(ReqBlockParser.CLASS)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 915
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(ReqBlockParser.NUMBER)
            self.state = 919
            self.match(ReqBlockParser.CREDIT)
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 920
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nv_lhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_lhsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_lhsContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.EQ)
            else:
                return self.getToken(ReqBlockParser.EQ, i)

        def nv_rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_rhsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_rhsContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_nv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 923
                    self.nv_lhs()
                    self.state = 924
                    self.match(ReqBlockParser.EQ)
                    self.state = 926
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        self.state = 925
                        self.nv_rhs()



                else:
                    raise NoViableAltException(self)
                self.state = 930 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_lhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_lhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_lhs" ):
                listener.enterNv_lhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_lhs" ):
                listener.exitNv_lhs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_lhs" ):
                return visitor.visitNv_lhs(self)
            else:
                return visitor.visitChildren(self)




    def nv_lhs(self):

        localctx = ReqBlockParser.Nv_lhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_nv_lhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_rhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_rhs" ):
                listener.enterNv_rhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_rhs" ):
                listener.exitNv_rhs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_rhs" ):
                return visitor.visitNv_rhs(self)
            else:
                return visitor.visitChildren(self)




    def nv_rhs(self):

        localctx = ReqBlockParser.Nv_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_nv_rhs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            _la = self._input.LA(1)
            if not(_la==1 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_adviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_ADVICE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PROXY_ADVICE)
            else:
                return self.getToken(ReqBlockParser.PROXY_ADVICE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.STRING)
            else:
                return self.getToken(ReqBlockParser.STRING, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_proxy_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_advice" ):
                listener.enterProxy_advice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_advice" ):
                listener.exitProxy_advice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProxy_advice" ):
                return visitor.visitProxy_advice(self)
            else:
                return visitor.visitChildren(self)




    def proxy_advice(self):

        localctx = ReqBlockParser.Proxy_adviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_proxy_advice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 938
                    self.match(ReqBlockParser.PROXY_ADVICE)
                    self.state = 939
                    self.match(ReqBlockParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 942 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 946
                    self.match(ReqBlockParser.REMARK)
                    self.state = 947
                    self.string()
                    self.state = 949
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 948
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 953 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            _la = self._input.LA(1)
            if not(_la==57 or _la==58):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 956
                        self.proxy_advice()
                        pass
                    elif token in [59]:
                        self.state = 957
                        self.rule_tag()
                        pass
                    elif token in [32]:
                        self.state = 958
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RULE_TAG)
            else:
                return self.getToken(ReqBlockParser.RULE_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 964
                    self.match(ReqBlockParser.RULE_TAG)
                    self.state = 965
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 968 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 971
            self.expression(0)
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 972
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not(_la==25 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 976
                self.match(ReqBlockParser.NUMBER)
                self.state = 977
                self.class_or_credit()


            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 980
                self.expression(0)


            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 983
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(ReqBlockParser.TAG)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 993
                self.match(ReqBlockParser.EQ)
                self.state = 994
                _la = self._input.LA(1)
                if not((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 11) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(ReqBlockParser.UNDER)
            self.state = 998
            self.match(ReqBlockParser.NUMBER)
            self.state = 999
            self.class_or_credit()
            self.state = 1000
            self.course_list()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1001
                self.display()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1007
                self.proxy_advice()


            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1010
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(ReqBlockParser.LP)
            self.state = 1014
            self.match(ReqBlockParser.WITH)
            self.state = 1015
            self.expression(0)
            self.state = 1016
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 190
        self.enterRecursionRule(localctx, 190, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1019
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 1020
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 1021
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 1022
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 1023
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 1024
                self.string()
                pass

            elif la_ == 7:
                self.state = 1025
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 1026
                self.match(ReqBlockParser.LP)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1027
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 1030
                self.expression(0)
                self.state = 1031
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1046
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1035
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1036
                        self.relational_op()
                        self.state = 1037
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1039
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1040
                        self.logical_op()
                        self.state = 1041
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1043
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1044
                        self.match(ReqBlockParser.COMMA)
                        self.state = 1045
                        self.expression(10)
                        pass

             
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(_la==75 or _la==76):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 161218563) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            _la = self._input.LA(1)
            if not(_la==76 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not(_la==75 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[95] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




