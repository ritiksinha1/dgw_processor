# Generated from ReqBlock.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3m")
        buf.write("\u042b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\3\2\7\2\u00b6\n\2\f\2\16\2\u00b9")
        buf.write("\13\2\3\2\3\2\3\2\3\2\5\2\u00bf\n\2\3\2\3\2\7\2\u00c3")
        buf.write("\n\2\f\2\16\2\u00c6\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\7\3\u00df\n\3\f\3\16\3\u00e2\13\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u00f0\n\4\f\4")
        buf.write("\16\4\u00f3\13\4\3\5\3\5\3\5\5\5\u00f8\n\5\3\5\3\5\7\5")
        buf.write("\u00fc\n\5\f\5\16\5\u00ff\13\5\3\5\5\5\u0102\n\5\3\5\5")
        buf.write("\5\u0105\n\5\3\6\3\6\3\6\7\6\u010a\n\6\f\6\16\6\u010d")
        buf.write("\13\6\3\7\5\7\u0110\n\7\3\7\5\7\u0113\n\7\3\7\3\7\7\7")
        buf.write("\u0117\n\7\f\7\16\7\u011a\13\7\3\7\5\7\u011d\n\7\3\b\3")
        buf.write("\b\5\b\u0121\n\b\3\b\3\b\6\b\u0125\n\b\r\b\16\b\u0126")
        buf.write("\3\t\3\t\5\t\u012b\n\t\3\t\3\t\6\t\u012f\n\t\r\t\16\t")
        buf.write("\u0130\3\n\3\n\3\n\3\n\5\n\u0137\n\n\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u013d\n\13\3\f\3\f\3\f\3\f\5\f\u0143\n\f\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u014a\n\r\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\5\16\u0153\n\16\3\17\3\17\3\17\5\17\u0158\n")
        buf.write("\17\3\17\7\17\u015b\n\17\f\17\16\17\u015e\13\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u016f\n\20\3\21\3\21\3\22\3\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u017a\n\23\3\23\3\23\7\23")
        buf.write("\u017e\n\23\f\23\16\23\u0181\13\23\3\23\5\23\u0184\n\23")
        buf.write("\3\24\3\24\3\24\5\24\u0189\n\24\3\24\3\24\7\24\u018d\n")
        buf.write("\24\f\24\16\24\u0190\13\24\3\25\3\25\6\25\u0194\n\25\r")
        buf.write("\25\16\25\u0195\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\5\26\u01b0\n\26\3\27\3\27\3")
        buf.write("\27\3\27\3\27\5\27\u01b7\n\27\3\27\7\27\u01ba\n\27\f\27")
        buf.write("\16\27\u01bd\13\27\3\27\5\27\u01c0\n\27\3\27\5\27\u01c3")
        buf.write("\n\27\3\30\3\30\3\30\5\30\u01c8\n\30\3\30\7\30\u01cb\n")
        buf.write("\30\f\30\16\30\u01ce\13\30\3\30\5\30\u01d1\n\30\3\31\3")
        buf.write("\31\6\31\u01d5\n\31\r\31\16\31\u01d6\3\31\3\31\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u01ee\n\32\3")
        buf.write("\33\3\33\3\33\3\33\7\33\u01f4\n\33\f\33\16\33\u01f7\13")
        buf.write("\33\3\33\5\33\u01fa\n\33\3\34\3\34\3\34\3\34\7\34\u0200")
        buf.write("\n\34\f\34\16\34\u0203\13\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\5\35\u020d\n\35\3\35\7\35\u0210\n\35\f")
        buf.write("\35\16\35\u0213\13\35\3\35\5\35\u0216\n\35\3\35\3\35\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\6\36")
        buf.write("\u0224\n\36\r\36\16\36\u0225\3\36\3\36\7\36\u022a\n\36")
        buf.write("\f\36\16\36\u022d\13\36\3\36\3\36\7\36\u0231\n\36\f\36")
        buf.write("\16\36\u0234\13\36\3\37\3\37\3\37\3\37\5\37\u023a\n\37")
        buf.write("\3\37\5\37\u023d\n\37\3\37\3\37\3 \3 \3 \3 \5 \u0245\n")
        buf.write(" \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\5\"\u0250\n\"\3\"\3\"\3")
        buf.write("\"\5\"\u0255\n\"\5\"\u0257\n\"\3\"\5\"\u025a\n\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\7\"\u0262\n\"\f\"\16\"\u0265\13\"\3")
        buf.write("#\3#\5#\u0269\n#\3#\3#\3#\5#\u026e\n#\5#\u0270\n#\3#\5")
        buf.write("#\u0273\n#\3#\5#\u0276\n#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u0280")
        buf.write("\n#\f#\16#\u0283\13#\3$\3$\5$\u0287\n$\3%\3%\5%\u028b")
        buf.write("\n%\3&\3&\5&\u028f\n&\3\'\3\'\5\'\u0293\n\'\3(\3(\5(\u0297")
        buf.write("\n(\3)\3)\5)\u029b\n)\3*\3*\5*\u029f\n*\3+\3+\3,\3,\3")
        buf.write("-\3-\3.\3.\3/\3/\3/\5/\u02ac\n/\3\60\3\60\3\60\5\60\u02b1")
        buf.write("\n\60\3\61\3\61\6\61\u02b5\n\61\r\61\16\61\u02b6\3\62")
        buf.write("\3\62\3\62\5\62\u02bc\n\62\3\63\3\63\3\63\3\63\5\63\u02c2")
        buf.write("\n\63\3\63\3\63\5\63\u02c6\n\63\3\63\5\63\u02c9\n\63\3")
        buf.write("\63\7\63\u02cc\n\63\f\63\16\63\u02cf\13\63\3\63\5\63\u02d2")
        buf.write("\n\63\3\63\5\63\u02d5\n\63\3\64\3\64\3\64\5\64\u02da\n")
        buf.write("\64\3\64\5\64\u02dd\n\64\3\65\3\65\3\65\5\65\u02e2\n\65")
        buf.write("\3\65\5\65\u02e5\n\65\3\66\3\66\3\66\3\66\5\66\u02eb\n")
        buf.write("\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u02f5")
        buf.write("\n\67\f\67\16\67\u02f8\13\67\3\67\3\67\5\67\u02fc\n\67")
        buf.write("\38\38\38\58\u0301\n8\39\39\39\39\39\59\u0308\n9\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\7:\u0312\n:\f:\16:\u0315\13:\3:\5")
        buf.write(":\u0318\n:\3:\5:\u031b\n:\3;\3;\3;\5;\u0320\n;\3<\3<\3")
        buf.write("<\3<\5<\u0326\n<\3<\7<\u0329\n<\f<\16<\u032c\13<\3<\5")
        buf.write("<\u032f\n<\3=\3=\3=\3=\5=\u0335\n=\3=\7=\u0338\n=\f=\16")
        buf.write("=\u033b\13=\3=\5=\u033e\n=\3>\3>\3>\3>\5>\u0344\n>\3>")
        buf.write("\5>\u0347\n>\3>\7>\u034a\n>\f>\16>\u034d\13>\3>\5>\u0350")
        buf.write("\n>\3>\5>\u0353\n>\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\7")
        buf.write("@\u0360\n@\f@\16@\u0363\13@\3@\3@\5@\u0367\n@\3@\7@\u036a")
        buf.write("\n@\f@\16@\u036d\13@\3A\3A\3A\5A\u0372\nA\3A\7A\u0375")
        buf.write("\nA\fA\16A\u0378\13A\3A\5A\u037b\nA\3A\5A\u037e\nA\3A")
        buf.write("\5A\u0381\nA\3B\3B\3B\5B\u0386\nB\3C\3C\3C\3C\5C\u038c")
        buf.write("\nC\3C\5C\u038f\nC\3C\7C\u0392\nC\fC\16C\u0395\13C\3D")
        buf.write("\3D\3D\3D\3D\3D\5D\u039d\nD\3D\5D\u03a0\nD\3E\3E\3E\5")
        buf.write("E\u03a5\nE\3F\3F\3F\5F\u03aa\nF\3G\3G\3G\3G\3H\3H\3I\3")
        buf.write("I\6I\u03b4\nI\rI\16I\u03b5\3J\3J\3K\3K\3K\5K\u03bd\nK")
        buf.write("\6K\u03bf\nK\rK\16K\u03c0\3L\3L\3L\3L\7L\u03c7\nL\fL\16")
        buf.write("L\u03ca\13L\3M\3M\6M\u03ce\nM\rM\16M\u03cf\3N\3N\3N\5")
        buf.write("N\u03d5\nN\3O\3O\3O\5O\u03da\nO\3O\5O\u03dd\nO\3O\5O\u03e0")
        buf.write("\nO\3P\3P\3Q\3Q\3R\3R\3S\3S\3S\5S\u03eb\nS\3T\3T\3T\3")
        buf.write("T\3T\7T\u03f2\nT\fT\16T\u03f5\13T\3T\5T\u03f8\nT\3T\5")
        buf.write("T\u03fb\nT\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\5V\u040c\nV\3V\3V\3V\5V\u0411\nV\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\7V\u041e\nV\fV\16V\u0421\13V\3W\3W\3X\3")
        buf.write("X\3Y\3Y\3Z\3Z\3Z\4\u00b7\u00c4\3\u00aa[\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\2\17\3\2DE\3\2GH\3\2\22\23\4")
        buf.write("\2\30\30\32\32\4\2\3\3RR\3\289\3\2;<\4\2\33\33??\4\2O")
        buf.write("PRR\3\2MN\6\2JK\\^abee\4\2NNZZ\4\2MMgg\2\u04e2\2\u00b7")
        buf.write("\3\2\2\2\4\u00e0\3\2\2\2\6\u00f1\3\2\2\2\b\u00f4\3\2\2")
        buf.write("\2\n\u0106\3\2\2\2\f\u010f\3\2\2\2\16\u0124\3\2\2\2\20")
        buf.write("\u012e\3\2\2\2\22\u0132\3\2\2\2\24\u0138\3\2\2\2\26\u0142")
        buf.write("\3\2\2\2\30\u0149\3\2\2\2\32\u0152\3\2\2\2\34\u0154\3")
        buf.write("\2\2\2\36\u016e\3\2\2\2 \u0170\3\2\2\2\"\u0172\3\2\2\2")
        buf.write("$\u0174\3\2\2\2&\u0185\3\2\2\2(\u0191\3\2\2\2*\u01af\3")
        buf.write("\2\2\2,\u01b1\3\2\2\2.\u01c4\3\2\2\2\60\u01d2\3\2\2\2")
        buf.write("\62\u01ed\3\2\2\2\64\u01ef\3\2\2\2\66\u01fb\3\2\2\28\u0204")
        buf.write("\3\2\2\2:\u0219\3\2\2\2<\u0235\3\2\2\2>\u0240\3\2\2\2")
        buf.write("@\u0248\3\2\2\2B\u024f\3\2\2\2D\u0268\3\2\2\2F\u0284\3")
        buf.write("\2\2\2H\u0288\3\2\2\2J\u028c\3\2\2\2L\u0290\3\2\2\2N\u0294")
        buf.write("\3\2\2\2P\u0298\3\2\2\2R\u029c\3\2\2\2T\u02a0\3\2\2\2")
        buf.write("V\u02a2\3\2\2\2X\u02a4\3\2\2\2Z\u02a6\3\2\2\2\\\u02a8")
        buf.write("\3\2\2\2^\u02ad\3\2\2\2`\u02b4\3\2\2\2b\u02b8\3\2\2\2")
        buf.write("d\u02bd\3\2\2\2f\u02d6\3\2\2\2h\u02de\3\2\2\2j\u02e6\3")
        buf.write("\2\2\2l\u02ec\3\2\2\2n\u02fd\3\2\2\2p\u0302\3\2\2\2r\u0309")
        buf.write("\3\2\2\2t\u031c\3\2\2\2v\u0321\3\2\2\2x\u0330\3\2\2\2")
        buf.write("z\u033f\3\2\2\2|\u0354\3\2\2\2~\u0357\3\2\2\2\u0080\u036e")
        buf.write("\3\2\2\2\u0082\u0382\3\2\2\2\u0084\u0387\3\2\2\2\u0086")
        buf.write("\u0396\3\2\2\2\u0088\u03a1\3\2\2\2\u008a\u03a6\3\2\2\2")
        buf.write("\u008c\u03ab\3\2\2\2\u008e\u03af\3\2\2\2\u0090\u03b3\3")
        buf.write("\2\2\2\u0092\u03b7\3\2\2\2\u0094\u03be\3\2\2\2\u0096\u03c2")
        buf.write("\3\2\2\2\u0098\u03cd\3\2\2\2\u009a\u03d1\3\2\2\2\u009c")
        buf.write("\u03d6\3\2\2\2\u009e\u03e1\3\2\2\2\u00a0\u03e3\3\2\2\2")
        buf.write("\u00a2\u03e5\3\2\2\2\u00a4\u03e7\3\2\2\2\u00a6\u03ec\3")
        buf.write("\2\2\2\u00a8\u03fc\3\2\2\2\u00aa\u0410\3\2\2\2\u00ac\u0422")
        buf.write("\3\2\2\2\u00ae\u0424\3\2\2\2\u00b0\u0426\3\2\2\2\u00b2")
        buf.write("\u0428\3\2\2\2\u00b4\u00b6\13\2\2\2\u00b5\u00b4\3\2\2")
        buf.write("\2\u00b6\u00b9\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b7\u00b5")
        buf.write("\3\2\2\2\u00b8\u00ba\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba")
        buf.write("\u00bb\7\24\2\2\u00bb\u00be\5\4\3\2\u00bc\u00bd\7k\2\2")
        buf.write("\u00bd\u00bf\5\6\4\2\u00be\u00bc\3\2\2\2\u00be\u00bf\3")
        buf.write("\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c4\7\34\2\2\u00c1")
        buf.write("\u00c3\13\2\2\2\u00c2\u00c1\3\2\2\2\u00c3\u00c6\3\2\2")
        buf.write("\2\u00c4\u00c5\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00c7")
        buf.write("\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7\u00c8\7\2\2\3\u00c8")
        buf.write("\3\3\2\2\2\u00c9\u00df\5B\"\2\u00ca\u00df\5$\23\2\u00cb")
        buf.write("\u00df\5d\63\2\u00cc\u00df\5f\64\2\u00cd\u00df\5h\65\2")
        buf.write("\u00ce\u00df\5F$\2\u00cf\u00df\5H%\2\u00d0\u00df\5p9\2")
        buf.write("\u00d1\u00df\5J&\2\u00d2\u00df\5|?\2\u00d3\u00df\5L\'")
        buf.write("\2\u00d4\u00df\5N(\2\u00d5\u00df\5z>\2\u00d6\u00df\5P")
        buf.write(")\2\u00d7\u00df\5\u0080A\2\u00d8\u00df\5\u008eH\2\u00d9")
        buf.write("\u00df\5\u0090I\2\u00da\u00df\5\u0094K\2\u00db\u00df\5")
        buf.write("R*\2\u00dc\u00df\5\u009eP\2\u00dd\u00df\5\u00a6T\2\u00de")
        buf.write("\u00c9\3\2\2\2\u00de\u00ca\3\2\2\2\u00de\u00cb\3\2\2\2")
        buf.write("\u00de\u00cc\3\2\2\2\u00de\u00cd\3\2\2\2\u00de\u00ce\3")
        buf.write("\2\2\2\u00de\u00cf\3\2\2\2\u00de\u00d0\3\2\2\2\u00de\u00d1")
        buf.write("\3\2\2\2\u00de\u00d2\3\2\2\2\u00de\u00d3\3\2\2\2\u00de")
        buf.write("\u00d4\3\2\2\2\u00de\u00d5\3\2\2\2\u00de\u00d6\3\2\2\2")
        buf.write("\u00de\u00d7\3\2\2\2\u00de\u00d8\3\2\2\2\u00de\u00d9\3")
        buf.write("\2\2\2\u00de\u00da\3\2\2\2\u00de\u00db\3\2\2\2\u00de\u00dc")
        buf.write("\3\2\2\2\u00de\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0")
        buf.write("\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\5\3\2\2\2\u00e2")
        buf.write("\u00e0\3\2\2\2\u00e3\u00f0\5<\37\2\u00e4\u00f0\5> \2\u00e5")
        buf.write("\u00f0\5D#\2\u00e6\u00f0\5,\27\2\u00e7\u00f0\5\\/\2\u00e8")
        buf.write("\u00f0\5\64\33\2\u00e9\u00f0\5b\62\2\u00ea\u00f0\5\u0086")
        buf.write("D\2\u00eb\u00f0\5\u0090I\2\u00ec\u00f0\5\u0094K\2\u00ed")
        buf.write("\u00f0\5\u0096L\2\u00ee\u00f0\5:\36\2\u00ef\u00e3\3\2")
        buf.write("\2\2\u00ef\u00e4\3\2\2\2\u00ef\u00e5\3\2\2\2\u00ef\u00e6")
        buf.write("\3\2\2\2\u00ef\u00e7\3\2\2\2\u00ef\u00e8\3\2\2\2\u00ef")
        buf.write("\u00e9\3\2\2\2\u00ef\u00ea\3\2\2\2\u00ef\u00eb\3\2\2\2")
        buf.write("\u00ef\u00ec\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00ee\3")
        buf.write("\2\2\2\u00f0\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2")
        buf.write("\3\2\2\2\u00f2\7\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f7")
        buf.write("\5\f\7\2\u00f5\u00f8\5\16\b\2\u00f6\u00f8\5\20\t\2\u00f7")
        buf.write("\u00f5\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8\u00fd\3\2\2\2\u00f9\u00fc\5\22\n\2\u00fa\u00fc")
        buf.write("\5\24\13\2\u00fb\u00f9\3\2\2\2\u00fb\u00fa\3\2\2\2\u00fc")
        buf.write("\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2")
        buf.write("\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u0102\5")
        buf.write("\u0090I\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\u0104\3\2\2\2\u0103\u0105\5b\62\2\u0104\u0103\3\2\2\2")
        buf.write("\u0104\u0105\3\2\2\2\u0105\t\3\2\2\2\u0106\u0107\5\30")
        buf.write("\r\2\u0107\u010b\5\26\f\2\u0108\u010a\5\u00a8U\2\u0109")
        buf.write("\u0108\3\2\2\2\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2")
        buf.write("\u010b\u010c\3\2\2\2\u010c\13\3\2\2\2\u010d\u010b\3\2")
        buf.write("\2\2\u010e\u0110\5X-\2\u010f\u010e\3\2\2\2\u010f\u0110")
        buf.write("\3\2\2\2\u0110\u0112\3\2\2\2\u0111\u0113\5\30\r\2\u0112")
        buf.write("\u0111\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0118\5\26\f\2\u0115\u0117\5\u00a8U\2\u0116\u0115")
        buf.write("\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011b\u011d\5V,\2\u011c\u011b\3\2\2\2\u011c\u011d\3\2")
        buf.write("\2\2\u011d\r\3\2\2\2\u011e\u0120\5\u00b2Z\2\u011f\u0121")
        buf.write("\5V,\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0122")
        buf.write("\3\2\2\2\u0122\u0123\5\f\7\2\u0123\u0125\3\2\2\2\u0124")
        buf.write("\u011e\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0124\3\2\2\2")
        buf.write("\u0126\u0127\3\2\2\2\u0127\17\3\2\2\2\u0128\u012a\5\u00b0")
        buf.write("Y\2\u0129\u012b\5V,\2\u012a\u0129\3\2\2\2\u012a\u012b")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\5\f\7\2\u012d")
        buf.write("\u012f\3\2\2\2\u012e\u0128\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\21\3\2")
        buf.write("\2\2\u0132\u0133\7\36\2\2\u0133\u0136\5\f\7\2\u0134\u0137")
        buf.write("\5\16\b\2\u0135\u0137\5\20\t\2\u0136\u0134\3\2\2\2\u0136")
        buf.write("\u0135\3\2\2\2\u0136\u0137\3\2\2\2\u0137\23\3\2\2\2\u0138")
        buf.write("\u0139\7!\2\2\u0139\u013c\5\f\7\2\u013a\u013d\5\16\b\2")
        buf.write("\u013b\u013d\5\20\t\2\u013c\u013a\3\2\2\2\u013c\u013b")
        buf.write("\3\2\2\2\u013c\u013d\3\2\2\2\u013d\25\3\2\2\2\u013e\u0143")
        buf.write("\5\u00a2R\2\u013f\u0143\7O\2\2\u0140\u0143\7P\2\2\u0141")
        buf.write("\u0143\7Q\2\2\u0142\u013e\3\2\2\2\u0142\u013f\3\2\2\2")
        buf.write("\u0142\u0140\3\2\2\2\u0142\u0141\3\2\2\2\u0143\27\3\2")
        buf.write("\2\2\u0144\u014a\5\u00a2R\2\u0145\u014a\5\u00a0Q\2\u0146")
        buf.write("\u014a\7Q\2\2\u0147\u014a\7\26\2\2\u0148\u014a\7J\2\2")
        buf.write("\u0149\u0144\3\2\2\2\u0149\u0145\3\2\2\2\u0149\u0146\3")
        buf.write("\2\2\2\u0149\u0147\3\2\2\2\u0149\u0148\3\2\2\2\u014a\31")
        buf.write("\3\2\2\2\u014b\u0153\5n8\2\u014c\u0153\5z>\2\u014d\u0153")
        buf.write("\5|?\2\u014e\u0153\5\u0082B\2\u014f\u0153\5`\61\2\u0150")
        buf.write("\u0153\5\u009aN\2\u0151\u0153\5\u009cO\2\u0152\u014b\3")
        buf.write("\2\2\2\u0152\u014c\3\2\2\2\u0152\u014d\3\2\2\2\u0152\u014e")
        buf.write("\3\2\2\2\u0152\u014f\3\2\2\2\u0152\u0150\3\2\2\2\u0152")
        buf.write("\u0151\3\2\2\2\u0153\33\3\2\2\2\u0154\u015c\5\b\5\2\u0155")
        buf.write("\u0157\5\36\20\2\u0156\u0158\5\u00a4S\2\u0157\u0156\3")
        buf.write("\2\2\2\u0157\u0158\3\2\2\2\u0158\u015b\3\2\2\2\u0159\u015b")
        buf.write("\5\u0090I\2\u015a\u0155\3\2\2\2\u015a\u0159\3\2\2\2\u015b")
        buf.write("\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\35\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u016f\5j\66")
        buf.write("\2\u0160\u016f\5l\67\2\u0161\u016f\5n8\2\u0162\u016f\5")
        buf.write("r:\2\u0163\u016f\5t;\2\u0164\u016f\5v<\2\u0165\u016f\5")
        buf.write("x=\2\u0166\u016f\5z>\2\u0167\u016f\5|?\2\u0168\u016f\5")
        buf.write("~@\2\u0169\u016f\5\u0082B\2\u016a\u016f\5\u0090I\2\u016b")
        buf.write("\u016f\5\u0098M\2\u016c\u016f\5\u009aN\2\u016d\u016f\5")
        buf.write("\u009cO\2\u016e\u015f\3\2\2\2\u016e\u0160\3\2\2\2\u016e")
        buf.write("\u0161\3\2\2\2\u016e\u0162\3\2\2\2\u016e\u0163\3\2\2\2")
        buf.write("\u016e\u0164\3\2\2\2\u016e\u0165\3\2\2\2\u016e\u0166\3")
        buf.write("\2\2\2\u016e\u0167\3\2\2\2\u016e\u0168\3\2\2\2\u016e\u0169")
        buf.write("\3\2\2\2\u016e\u016a\3\2\2\2\u016e\u016b\3\2\2\2\u016e")
        buf.write("\u016c\3\2\2\2\u016e\u016d\3\2\2\2\u016f\37\3\2\2\2\u0170")
        buf.write("\u0171\t\2\2\2\u0171!\3\2\2\2\u0172\u0173\t\3\2\2\u0173")
        buf.write("#\3\2\2\2\u0174\u0175\7I\2\2\u0175\u0176\5\u00aaV\2\u0176")
        buf.write("\u0179\7L\2\2\u0177\u017a\5*\26\2\u0178\u017a\5(\25\2")
        buf.write("\u0179\u0177\3\2\2\2\u0179\u0178\3\2\2\2\u017a\u017f\3")
        buf.write("\2\2\2\u017b\u017e\5\u0090I\2\u017c\u017e\5b\62\2\u017d")
        buf.write("\u017b\3\2\2\2\u017d\u017c\3\2\2\2\u017e\u0181\3\2\2\2")
        buf.write("\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0183\3")
        buf.write("\2\2\2\u0181\u017f\3\2\2\2\u0182\u0184\5&\24\2\u0183\u0182")
        buf.write("\3\2\2\2\u0183\u0184\3\2\2\2\u0184%\3\2\2\2\u0185\u0188")
        buf.write("\7F\2\2\u0186\u0189\5*\26\2\u0187\u0189\5(\25\2\u0188")
        buf.write("\u0186\3\2\2\2\u0188\u0187\3\2\2\2\u0189\u018e\3\2\2\2")
        buf.write("\u018a\u018d\5\u0090I\2\u018b\u018d\5b\62\2\u018c\u018a")
        buf.write("\3\2\2\2\u018c\u018b\3\2\2\2\u018d\u0190\3\2\2\2\u018e")
        buf.write("\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\'\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0191\u0193\5 \21\2\u0192\u0194\5*\26\2")
        buf.write("\u0193\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0193\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198")
        buf.write("\5\"\22\2\u0198)\3\2\2\2\u0199\u01b0\5$\23\2\u019a\u01b0")
        buf.write("\5<\37\2\u019b\u01b0\5> \2\u019c\u01b0\5B\"\2\u019d\u01b0")
        buf.write("\5\\/\2\u019e\u01b0\5d\63\2\u019f\u01b0\5h\65\2\u01a0")
        buf.write("\u01b0\5F$\2\u01a1\u01b0\5p9\2\u01a2\u01b0\5J&\2\u01a3")
        buf.write("\u01b0\5L\'\2\u01a4\u01b0\5N(\2\u01a5\u01b0\5z>\2\u01a6")
        buf.write("\u01b0\5|?\2\u01a7\u01b0\5P)\2\u01a8\u01b0\5\u0080A\2")
        buf.write("\u01a9\u01b0\5\u0084C\2\u01aa\u01b0\5\u0086D\2\u01ab\u01b0")
        buf.write("\5\u0090I\2\u01ac\u01b0\5\u0094K\2\u01ad\u01b0\5\u0096")
        buf.write("L\2\u01ae\u01b0\5R*\2\u01af\u0199\3\2\2\2\u01af\u019a")
        buf.write("\3\2\2\2\u01af\u019b\3\2\2\2\u01af\u019c\3\2\2\2\u01af")
        buf.write("\u019d\3\2\2\2\u01af\u019e\3\2\2\2\u01af\u019f\3\2\2\2")
        buf.write("\u01af\u01a0\3\2\2\2\u01af\u01a1\3\2\2\2\u01af\u01a2\3")
        buf.write("\2\2\2\u01af\u01a3\3\2\2\2\u01af\u01a4\3\2\2\2\u01af\u01a5")
        buf.write("\3\2\2\2\u01af\u01a6\3\2\2\2\u01af\u01a7\3\2\2\2\u01af")
        buf.write("\u01a8\3\2\2\2\u01af\u01a9\3\2\2\2\u01af\u01aa\3\2\2\2")
        buf.write("\u01af\u01ab\3\2\2\2\u01af\u01ac\3\2\2\2\u01af\u01ad\3")
        buf.write("\2\2\2\u01af\u01ae\3\2\2\2\u01b0+\3\2\2\2\u01b1\u01b2")
        buf.write("\7I\2\2\u01b2\u01b3\5\u00aaV\2\u01b3\u01b6\7L\2\2\u01b4")
        buf.write("\u01b7\5\62\32\2\u01b5\u01b7\5\60\31\2\u01b6\u01b4\3\2")
        buf.write("\2\2\u01b6\u01b5\3\2\2\2\u01b7\u01bb\3\2\2\2\u01b8\u01ba")
        buf.write("\5\36\20\2\u01b9\u01b8\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bf\3\2\2\2")
        buf.write("\u01bd\u01bb\3\2\2\2\u01be\u01c0\5b\62\2\u01bf\u01be\3")
        buf.write("\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01c3")
        buf.write("\5.\30\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("-\3\2\2\2\u01c4\u01c7\7F\2\2\u01c5\u01c8\5\62\32\2\u01c6")
        buf.write("\u01c8\5\60\31\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2")
        buf.write("\2\u01c8\u01cc\3\2\2\2\u01c9\u01cb\5\36\20\2\u01ca\u01c9")
        buf.write("\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cc")
        buf.write("\u01cd\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc\3\2\2\2")
        buf.write("\u01cf\u01d1\5b\62\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3")
        buf.write("\2\2\2\u01d1/\3\2\2\2\u01d2\u01d4\5 \21\2\u01d3\u01d5")
        buf.write("\5\62\32\2\u01d4\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6")
        buf.write("\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8\u01d9\5\"\22\2\u01d9\61\3\2\2\2\u01da\u01ee\5,")
        buf.write("\27\2\u01db\u01ee\5<\37\2\u01dc\u01ee\5> \2\u01dd\u01ee")
        buf.write("\5D#\2\u01de\u01ee\5\\/\2\u01df\u01ee\5\64\33\2\u01e0")
        buf.write("\u01ee\5d\63\2\u01e1\u01ee\5h\65\2\u01e2\u01ee\5r:\2\u01e3")
        buf.write("\u01ee\5v<\2\u01e4\u01ee\5x=\2\u01e5\u01ee\5|?\2\u01e6")
        buf.write("\u01ee\5\u0080A\2\u01e7\u01ee\5\u0086D\2\u01e8\u01ee\5")
        buf.write("\u0090I\2\u01e9\u01ee\5\u0094K\2\u01ea\u01ee\5\u0096L")
        buf.write("\2\u01eb\u01ee\5\u009cO\2\u01ec\u01ee\5:\36\2\u01ed\u01da")
        buf.write("\3\2\2\2\u01ed\u01db\3\2\2\2\u01ed\u01dc\3\2\2\2\u01ed")
        buf.write("\u01dd\3\2\2\2\u01ed\u01de\3\2\2\2\u01ed\u01df\3\2\2\2")
        buf.write("\u01ed\u01e0\3\2\2\2\u01ed\u01e1\3\2\2\2\u01ed\u01e2\3")
        buf.write("\2\2\2\u01ed\u01e3\3\2\2\2\u01ed\u01e4\3\2\2\2\u01ed\u01e5")
        buf.write("\3\2\2\2\u01ed\u01e6\3\2\2\2\u01ed\u01e7\3\2\2\2\u01ed")
        buf.write("\u01e8\3\2\2\2\u01ed\u01e9\3\2\2\2\u01ed\u01ea\3\2\2\2")
        buf.write("\u01ed\u01eb\3\2\2\2\u01ed\u01ec\3\2\2\2\u01ee\63\3\2")
        buf.write("\2\2\u01ef\u01f0\7O\2\2\u01f0\u01f1\7\37\2\2\u01f1\u01f5")
        buf.write("\5\66\34\2\u01f2\u01f4\5\36\20\2\u01f3\u01f2\3\2\2\2\u01f4")
        buf.write("\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8\u01fa\5")
        buf.write("b\62\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\65")
        buf.write("\3\2\2\2\u01fb\u0201\58\35\2\u01fc\u01fd\5\u00acW\2\u01fd")
        buf.write("\u01fe\58\35\2\u01fe\u0200\3\2\2\2\u01ff\u01fc\3\2\2\2")
        buf.write("\u0200\u0203\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3")
        buf.write("\2\2\2\u0202\67\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u020c")
        buf.write("\7c\2\2\u0205\u020d\5<\37\2\u0206\u020d\5> \2\u0207\u020d")
        buf.write("\5\b\5\2\u0208\u020d\5D#\2\u0209\u020d\5\64\33\2\u020a")
        buf.write("\u020d\5\u0086D\2\u020b\u020d\5\u0096L\2\u020c\u0205\3")
        buf.write("\2\2\2\u020c\u0206\3\2\2\2\u020c\u0207\3\2\2\2\u020c\u0208")
        buf.write("\3\2\2\2\u020c\u0209\3\2\2\2\u020c\u020a\3\2\2\2\u020c")
        buf.write("\u020b\3\2\2\2\u020d\u0211\3\2\2\2\u020e\u0210\5\36\20")
        buf.write("\2\u020f\u020e\3\2\2\2\u0210\u0213\3\2\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0215\3\2\2\2\u0213")
        buf.write("\u0211\3\2\2\2\u0214\u0216\5b\62\2\u0215\u0214\3\2\2\2")
        buf.write("\u0215\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\7")
        buf.write("i\2\2\u02189\3\2\2\2\u0219\u0223\7\25\2\2\u021a\u0224")
        buf.write("\5,\27\2\u021b\u0224\5<\37\2\u021c\u0224\5> \2\u021d\u0224")
        buf.write("\5D#\2\u021e\u0224\5\\/\2\u021f\u0224\5\b\5\2\u0220\u0224")
        buf.write("\5\64\33\2\u0221\u0224\5\u0086D\2\u0222\u0224\5\u0096")
        buf.write("L\2\u0223\u021a\3\2\2\2\u0223\u021b\3\2\2\2\u0223\u021c")
        buf.write("\3\2\2\2\u0223\u021d\3\2\2\2\u0223\u021e\3\2\2\2\u0223")
        buf.write("\u021f\3\2\2\2\u0223\u0220\3\2\2\2\u0223\u0221\3\2\2\2")
        buf.write("\u0223\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0223\3")
        buf.write("\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u022b")
        buf.write("\7\35\2\2\u0228\u022a\5\36\20\2\u0229\u0228\3\2\2\2\u022a")
        buf.write("\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2")
        buf.write("\u022c\u0232\3\2\2\2\u022d\u022b\3\2\2\2\u022e\u0231\5")
        buf.write("\u0094K\2\u022f\u0231\5b\62\2\u0230\u022e\3\2\2\2\u0230")
        buf.write("\u022f\3\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2")
        buf.write("\u0232\u0233\3\2\2\2\u0233;\3\2\2\2\u0234\u0232\3\2\2")
        buf.write("\2\u0235\u0236\7O\2\2\u0236\u0237\7\26\2\2\u0237\u0239")
        buf.write("\5\u00aaV\2\u0238\u023a\5\u0098M\2\u0239\u0238\3\2\2\2")
        buf.write("\u0239\u023a\3\2\2\2\u023a\u023c\3\2\2\2\u023b\u023d\5")
        buf.write("\u0090I\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("\u023e\3\2\2\2\u023e\u023f\5b\62\2\u023f=\3\2\2\2\u0240")
        buf.write("\u0241\7O\2\2\u0241\u0242\7\27\2\2\u0242\u0244\5\u00aa")
        buf.write("V\2\u0243\u0245\5\u0090I\2\u0244\u0243\3\2\2\2\u0244\u0245")
        buf.write("\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\5b\62\2\u0247")
        buf.write("?\3\2\2\2\u0248\u0249\7c\2\2\u0249\u024a\5T+\2\u024a\u024b")
        buf.write("\7O\2\2\u024b\u024c\7i\2\2\u024cA\3\2\2\2\u024d\u0250")
        buf.write("\5\u0088E\2\u024e\u0250\5\u008aF\2\u024f\u024d\3\2\2\2")
        buf.write("\u024f\u024e\3\2\2\2\u0250\u0256\3\2\2\2\u0251\u0254\5")
        buf.write("\u00acW\2\u0252\u0255\5\u0088E\2\u0253\u0255\5\u008aF")
        buf.write("\2\u0254\u0252\3\2\2\2\u0254\u0253\3\2\2\2\u0255\u0257")
        buf.write("\3\2\2\2\u0256\u0251\3\2\2\2\u0256\u0257\3\2\2\2\u0257")
        buf.write("\u0263\3\2\2\2\u0258\u025a\7J\2\2\u0259\u0258\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u0262\5")
        buf.write("\u0092J\2\u025c\u0262\5^\60\2\u025d\u0262\5\u0090I\2\u025e")
        buf.write("\u0262\5`\61\2\u025f\u0262\5b\62\2\u0260\u0262\5\u00a4")
        buf.write("S\2\u0261\u0259\3\2\2\2\u0261\u025c\3\2\2\2\u0261\u025d")
        buf.write("\3\2\2\2\u0261\u025e\3\2\2\2\u0261\u025f\3\2\2\2\u0261")
        buf.write("\u0260\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2")
        buf.write("\u0263\u0264\3\2\2\2\u0264C\3\2\2\2\u0265\u0263\3\2\2")
        buf.write("\2\u0266\u0269\5\u0088E\2\u0267\u0269\5\u008aF\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0267\3\2\2\2\u0269\u026f\3\2\2\2")
        buf.write("\u026a\u026d\5\u00acW\2\u026b\u026e\5\u0088E\2\u026c\u026e")
        buf.write("\5\u008aF\2\u026d\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e")
        buf.write("\u0270\3\2\2\2\u026f\u026a\3\2\2\2\u026f\u0270\3\2\2\2")
        buf.write("\u0270\u0272\3\2\2\2\u0271\u0273\5\34\17\2\u0272\u0271")
        buf.write("\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0281\3\2\2\2\u0274")
        buf.write("\u0276\7J\2\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write("\u0276\u0277\3\2\2\2\u0277\u0280\5\u0092J\2\u0278\u0280")
        buf.write("\5^\60\2\u0279\u0280\5b\62\2\u027a\u0280\5\u0090I\2\u027b")
        buf.write("\u0280\5\u0094K\2\u027c\u0280\5\u0098M\2\u027d\u0280\5")
        buf.write("\u009cO\2\u027e\u0280\5\u00a4S\2\u027f\u0275\3\2\2\2\u027f")
        buf.write("\u0278\3\2\2\2\u027f\u0279\3\2\2\2\u027f\u027a\3\2\2\2")
        buf.write("\u027f\u027b\3\2\2\2\u027f\u027c\3\2\2\2\u027f\u027d\3")
        buf.write("\2\2\2\u027f\u027e\3\2\2\2\u0280\u0283\3\2\2\2\u0281\u027f")
        buf.write("\3\2\2\2\u0281\u0282\3\2\2\2\u0282E\3\2\2\2\u0283\u0281")
        buf.write("\3\2\2\2\u0284\u0286\5j\66\2\u0285\u0287\5b\62\2\u0286")
        buf.write("\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287G\3\2\2\2\u0288")
        buf.write("\u028a\5l\67\2\u0289\u028b\5b\62\2\u028a\u0289\3\2\2\2")
        buf.write("\u028a\u028b\3\2\2\2\u028bI\3\2\2\2\u028c\u028e\5r:\2")
        buf.write("\u028d\u028f\5b\62\2\u028e\u028d\3\2\2\2\u028e\u028f\3")
        buf.write("\2\2\2\u028fK\3\2\2\2\u0290\u0292\5v<\2\u0291\u0293\5")
        buf.write("b\62\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293M")
        buf.write("\3\2\2\2\u0294\u0296\5x=\2\u0295\u0297\5b\62\2\u0296\u0295")
        buf.write("\3\2\2\2\u0296\u0297\3\2\2\2\u0297O\3\2\2\2\u0298\u029a")
        buf.write("\5~@\2\u0299\u029b\5b\62\2\u029a\u0299\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029bQ\3\2\2\2\u029c\u029e\5\u009cO\2\u029d\u029f")
        buf.write("\5b\62\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("S\3\2\2\2\u02a0\u02a1\t\4\2\2\u02a1U\3\2\2\2\u02a2\u02a3")
        buf.write("\7j\2\2\u02a3W\3\2\2\2\u02a4\u02a5\7d\2\2\u02a5Y\3\2\2")
        buf.write("\2\u02a6\u02a7\t\5\2\2\u02a7[\3\2\2\2\u02a8\u02a9\7\31")
        buf.write("\2\2\u02a9\u02ab\5\u00aaV\2\u02aa\u02ac\7k\2\2\u02ab\u02aa")
        buf.write("\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac]\3\2\2\2\u02ad\u02ae")
        buf.write("\7\b\2\2\u02ae\u02b0\5\u00a0Q\2\u02af\u02b1\7k\2\2\u02b0")
        buf.write("\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1_\3\2\2\2\u02b2")
        buf.write("\u02b3\7 \2\2\u02b3\u02b5\5\u008cG\2\u02b4\u02b2\3\2\2")
        buf.write("\2\u02b5\u02b6\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7")
        buf.write("\3\2\2\2\u02b7a\3\2\2\2\u02b8\u02b9\7\"\2\2\u02b9\u02bb")
        buf.write("\5\u00a0Q\2\u02ba\u02bc\7k\2\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bcc\3\2\2\2\u02bd\u02be\7#\2\2\u02be")
        buf.write("\u02c1\7O\2\2\u02bf\u02c0\7\66\2\2\u02c0\u02c2\7O\2\2")
        buf.write("\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c3\3")
        buf.write("\2\2\2\u02c3\u02c5\5Z.\2\u02c4\u02c6\5\b\5\2\u02c5\u02c4")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c8\3\2\2\2\u02c7")
        buf.write("\u02c9\5\u00a4S\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2")
        buf.write("\2\2\u02c9\u02cd\3\2\2\2\u02ca\u02cc\5^\60\2\u02cb\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2")
        buf.write("\u02d0\u02d2\5\u0090I\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2\u02d4\3\2\2\2\u02d3\u02d5\5b\62\2\u02d4")
        buf.write("\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5e\3\2\2\2\u02d6")
        buf.write("\u02d7\7$\2\2\u02d7\u02d9\7O\2\2\u02d8\u02da\5\b\5\2\u02d9")
        buf.write("\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02dc\3\2\2\2")
        buf.write("\u02db\u02dd\5\u00a4S\2\u02dc\u02db\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02ddg\3\2\2\2\u02de\u02df\7%\2\2\u02df\u02e1")
        buf.write("\7O\2\2\u02e0\u02e2\5\b\5\2\u02e1\u02e0\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e5\5\u00a4")
        buf.write("S\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5i\3\2")
        buf.write("\2\2\u02e6\u02e7\7&\2\2\u02e7\u02e8\7O\2\2\u02e8\u02ea")
        buf.write("\5Z.\2\u02e9\u02eb\5\u00a4S\2\u02ea\u02e9\3\2\2\2\u02ea")
        buf.write("\u02eb\3\2\2\2\u02ebk\3\2\2\2\u02ec\u02ed\7\'\2\2\u02ed")
        buf.write("\u02ee\7O\2\2\u02ee\u02ef\5Z.\2\u02ef\u02f0\7c\2\2\u02f0")
        buf.write("\u02f6\7R\2\2\u02f1\u02f2\5\u00b0Y\2\u02f2\u02f3\7R\2")
        buf.write("\2\u02f3\u02f5\3\2\2\2\u02f4\u02f1\3\2\2\2\u02f5\u02f8")
        buf.write("\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7")
        buf.write("\u02f9\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f9\u02fb\7i\2\2")
        buf.write("\u02fa\u02fc\5\u00a4S\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fcm\3\2\2\2\u02fd\u02fe\7(\2\2\u02fe\u0300")
        buf.write("\7O\2\2\u02ff\u0301\5\u00a4S\2\u0300\u02ff\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301o\3\2\2\2\u0302\u0303\7)\2\2\u0303")
        buf.write("\u0304\7O\2\2\u0304\u0305\5Z.\2\u0305\u0307\5\b\5\2\u0306")
        buf.write("\u0308\5\u00a4S\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2")
        buf.write("\2\2\u0308q\3\2\2\2\u0309\u030a\7*\2\2\u030a\u030b\7O")
        buf.write("\2\2\u030b\u0317\5Z.\2\u030c\u030d\7c\2\2\u030d\u0313")
        buf.write("\7R\2\2\u030e\u030f\5\u00b0Y\2\u030f\u0310\7R\2\2\u0310")
        buf.write("\u0312\3\2\2\2\u0311\u030e\3\2\2\2\u0312\u0315\3\2\2\2")
        buf.write("\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316\3")
        buf.write("\2\2\2\u0315\u0313\3\2\2\2\u0316\u0318\7i\2\2\u0317\u030c")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031a\3\2\2\2\u0319")
        buf.write("\u031b\5\u00a4S\2\u031a\u0319\3\2\2\2\u031a\u031b\3\2")
        buf.write("\2\2\u031bs\3\2\2\2\u031c\u031d\7+\2\2\u031d\u031f\7O")
        buf.write("\2\2\u031e\u0320\5\u00a4S\2\u031f\u031e\3\2\2\2\u031f")
        buf.write("\u0320\3\2\2\2\u0320u\3\2\2\2\u0321\u0322\7.\2\2\u0322")
        buf.write("\u0323\7O\2\2\u0323\u0325\5\b\5\2\u0324\u0326\5\u00a4")
        buf.write("S\2\u0325\u0324\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u032a")
        buf.write("\3\2\2\2\u0327\u0329\5^\60\2\u0328\u0327\3\2\2\2\u0329")
        buf.write("\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2")
        buf.write("\u032b\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u032f\5")
        buf.write("\u0090I\2\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("w\3\2\2\2\u0330\u0331\7/\2\2\u0331\u0332\7O\2\2\u0332")
        buf.write("\u0334\5\b\5\2\u0333\u0335\5\u00a4S\2\u0334\u0333\3\2")
        buf.write("\2\2\u0334\u0335\3\2\2\2\u0335\u0339\3\2\2\2\u0336\u0338")
        buf.write("\5^\60\2\u0337\u0336\3\2\2\2\u0338\u033b\3\2\2\2\u0339")
        buf.write("\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033d\3\2\2\2")
        buf.write("\u033b\u0339\3\2\2\2\u033c\u033e\5\u0090I\2\u033d\u033c")
        buf.write("\3\2\2\2\u033d\u033e\3\2\2\2\u033ey\3\2\2\2\u033f\u0340")
        buf.write("\7,\2\2\u0340\u0343\7O\2\2\u0341\u0344\5\b\5\2\u0342\u0344")
        buf.write("\5\u00aaV\2\u0343\u0341\3\2\2\2\u0343\u0342\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0346\3\2\2\2\u0345\u0347\5\u00a4")
        buf.write("S\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u034b")
        buf.write("\3\2\2\2\u0348\u034a\5^\60\2\u0349\u0348\3\2\2\2\u034a")
        buf.write("\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u0350\5")
        buf.write("\u0090I\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0352\3\2\2\2\u0351\u0353\5b\62\2\u0352\u0351\3\2\2\2")
        buf.write("\u0352\u0353\3\2\2\2\u0353{\3\2\2\2\u0354\u0355\7-\2\2")
        buf.write("\u0355\u0356\7O\2\2\u0356}\3\2\2\2\u0357\u0358\7\60\2")
        buf.write("\2\u0358\u0359\7O\2\2\u0359\u035a\5Z.\2\u035a\u035b\7")
        buf.write("c\2\2\u035b\u0361\7R\2\2\u035c\u035d\5\u00b0Y\2\u035d")
        buf.write("\u035e\7R\2\2\u035e\u0360\3\2\2\2\u035f\u035c\3\2\2\2")
        buf.write("\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0362\3")
        buf.write("\2\2\2\u0362\u0364\3\2\2\2\u0363\u0361\3\2\2\2\u0364\u0366")
        buf.write("\7i\2\2\u0365\u0367\5\u00a4S\2\u0366\u0365\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u0367\u036b\3\2\2\2\u0368\u036a\5^\60\2")
        buf.write("\u0369\u0368\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036b\u036c\3\2\2\2\u036c\177\3\2\2\2\u036d\u036b")
        buf.write("\3\2\2\2\u036e\u0371\7\61\2\2\u036f\u0372\5\u0088E\2\u0370")
        buf.write("\u0372\5\u008aF\2\u0371\u036f\3\2\2\2\u0371\u0370\3\2")
        buf.write("\2\2\u0372\u0376\3\2\2\2\u0373\u0375\5^\60\2\u0374\u0373")
        buf.write("\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3\2\2\2\u0376")
        buf.write("\u0377\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2")
        buf.write("\u0379\u037b\5\u0090I\2\u037a\u0379\3\2\2\2\u037a\u037b")
        buf.write("\3\2\2\2\u037b\u037d\3\2\2\2\u037c\u037e\5\u00a4S\2\u037d")
        buf.write("\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0380\3\2\2\2")
        buf.write("\u037f\u0381\5b\62\2\u0380\u037f\3\2\2\2\u0380\u0381\3")
        buf.write("\2\2\2\u0381\u0081\3\2\2\2\u0382\u0383\7\62\2\2\u0383")
        buf.write("\u0385\7O\2\2\u0384\u0386\5\u00a4S\2\u0385\u0384\3\2\2")
        buf.write("\2\u0385\u0386\3\2\2\2\u0386\u0083\3\2\2\2\u0387\u0388")
        buf.write("\7\63\2\2\u0388\u0389\7O\2\2\u0389\u038b\5Z.\2\u038a\u038c")
        buf.write("\5\b\5\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write("\u038e\3\2\2\2\u038d\u038f\5\u00a4S\2\u038e\u038d\3\2")
        buf.write("\2\2\u038e\u038f\3\2\2\2\u038f\u0393\3\2\2\2\u0390\u0392")
        buf.write("\5^\60\2\u0391\u0390\3\2\2\2\u0392\u0395\3\2\2\2\u0393")
        buf.write("\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0085\3\2\2\2")
        buf.write("\u0395\u0393\3\2\2\2\u0396\u0397\7O\2\2\u0397\u0398\7")
        buf.write("\64\2\2\u0398\u0399\7c\2\2\u0399\u039a\5\u00aaV\2\u039a")
        buf.write("\u039c\7i\2\2\u039b\u039d\5\u0090I\2\u039c\u039b\3\2\2")
        buf.write("\2\u039c\u039d\3\2\2\2\u039d\u039f\3\2\2\2\u039e\u03a0")
        buf.write("\5b\62\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0")
        buf.write("\u0087\3\2\2\2\u03a1\u03a2\7O\2\2\u03a2\u03a4\7\30\2\2")
        buf.write("\u03a3\u03a5\5@!\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2")
        buf.write("\2\2\u03a5\u0089\3\2\2\2\u03a6\u03a7\7O\2\2\u03a7\u03a9")
        buf.write("\7\32\2\2\u03a8\u03aa\5@!\2\u03a9\u03a8\3\2\2\2\u03a9")
        buf.write("\u03aa\3\2\2\2\u03aa\u008b\3\2\2\2\u03ab\u03ac\7R\2\2")
        buf.write("\u03ac\u03ad\7\\\2\2\u03ad\u03ae\t\6\2\2\u03ae\u008d\3")
        buf.write("\2\2\2\u03af\u03b0\7\65\2\2\u03b0\u008f\3\2\2\2\u03b1")
        buf.write("\u03b2\7\67\2\2\u03b2\u03b4\7\3\2\2\u03b3\u03b1\3\2\2")
        buf.write("\2\u03b4\u03b5\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b5\u03b6")
        buf.write("\3\2\2\2\u03b6\u0091\3\2\2\2\u03b7\u03b8\t\7\2\2\u03b8")
        buf.write("\u0093\3\2\2\2\u03b9\u03ba\7:\2\2\u03ba\u03bc\5\u00a0")
        buf.write("Q\2\u03bb\u03bd\7k\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be\u03b9\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u0095\3\2\2\2\u03c2\u03c8\t\b\2\2\u03c3\u03c7\5")
        buf.write("\u0090I\2\u03c4\u03c7\5\u0098M\2\u03c5\u03c7\5b\62\2\u03c6")
        buf.write("\u03c3\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c5\3\2\2\2")
        buf.write("\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3")
        buf.write("\2\2\2\u03c9\u0097\3\2\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cc")
        buf.write("\7=\2\2\u03cc\u03ce\5\u008cG\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u0099\3\2\2\2\u03d1\u03d2\7A\2\2\u03d2\u03d4\5")
        buf.write("\u00aaV\2\u03d3\u03d5\5\u00a4S\2\u03d4\u03d3\3\2\2\2\u03d4")
        buf.write("\u03d5\3\2\2\2\u03d5\u009b\3\2\2\2\u03d6\u03d9\t\t\2\2")
        buf.write("\u03d7\u03d8\7O\2\2\u03d8\u03da\5Z.\2\u03d9\u03d7\3\2")
        buf.write("\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc\3\2\2\2\u03db\u03dd")
        buf.write("\5\u00aaV\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03df\3\2\2\2\u03de\u03e0\5\u00a4S\2\u03df\u03de\3\2")
        buf.write("\2\2\u03df\u03e0\3\2\2\2\u03e0\u009d\3\2\2\2\u03e1\u03e2")
        buf.write("\7>\2\2\u03e2\u009f\3\2\2\2\u03e3\u03e4\7\3\2\2\u03e4")
        buf.write("\u00a1\3\2\2\2\u03e5\u03e6\7R\2\2\u03e6\u00a3\3\2\2\2")
        buf.write("\u03e7\u03ea\7@\2\2\u03e8\u03e9\7\\\2\2\u03e9\u03eb\t")
        buf.write("\n\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u00a5")
        buf.write("\3\2\2\2\u03ec\u03ed\7B\2\2\u03ed\u03ee\7O\2\2\u03ee\u03ef")
        buf.write("\5Z.\2\u03ef\u03f3\5\b\5\2\u03f0\u03f2\5^\60\2\u03f1\u03f0")
        buf.write("\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f3")
        buf.write("\u03f4\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2")
        buf.write("\u03f6\u03f8\5\u0090I\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8")
        buf.write("\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03fb\5b\62\2\u03fa")
        buf.write("\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u00a7\3\2\2\2")
        buf.write("\u03fc\u03fd\7c\2\2\u03fd\u03fe\7C\2\2\u03fe\u03ff\5\u00aa")
        buf.write("V\2\u03ff\u0400\7i\2\2\u0400\u00a9\3\2\2\2\u0401\u0402")
        buf.write("\bV\1\2\u0402\u0411\5\n\6\2\u0403\u0411\5\30\r\2\u0404")
        buf.write("\u0411\7O\2\2\u0405\u0411\7h\2\2\u0406\u0411\7R\2\2\u0407")
        buf.write("\u0411\5\u00a0Q\2\u0408\u0411\7P\2\2\u0409\u040b\7c\2")
        buf.write("\2\u040a\u040c\7\64\2\2\u040b\u040a\3\2\2\2\u040b\u040c")
        buf.write("\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\5\u00aaV\2\u040e")
        buf.write("\u040f\7i\2\2\u040f\u0411\3\2\2\2\u0410\u0401\3\2\2\2")
        buf.write("\u0410\u0403\3\2\2\2\u0410\u0404\3\2\2\2\u0410\u0405\3")
        buf.write("\2\2\2\u0410\u0406\3\2\2\2\u0410\u0407\3\2\2\2\u0410\u0408")
        buf.write("\3\2\2\2\u0410\u0409\3\2\2\2\u0411\u041f\3\2\2\2\u0412")
        buf.write("\u0413\f\r\2\2\u0413\u0414\5\u00aeX\2\u0414\u0415\5\u00aa")
        buf.write("V\16\u0415\u041e\3\2\2\2\u0416\u0417\f\f\2\2\u0417\u0418")
        buf.write("\5\u00acW\2\u0418\u0419\5\u00aaV\r\u0419\u041e\3\2\2\2")
        buf.write("\u041a\u041b\f\13\2\2\u041b\u041c\7Z\2\2\u041c\u041e\5")
        buf.write("\u00aaV\f\u041d\u0412\3\2\2\2\u041d\u0416\3\2\2\2\u041d")
        buf.write("\u041a\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2")
        buf.write("\u041f\u0420\3\2\2\2\u0420\u00ab\3\2\2\2\u0421\u041f\3")
        buf.write("\2\2\2\u0422\u0423\t\13\2\2\u0423\u00ad\3\2\2\2\u0424")
        buf.write("\u0425\t\f\2\2\u0425\u00af\3\2\2\2\u0426\u0427\t\r\2\2")
        buf.write("\u0427\u00b1\3\2\2\2\u0428\u0429\t\16\2\2\u0429\u00b3")
        buf.write("\3\2\2\2\u0098\u00b7\u00be\u00c4\u00de\u00e0\u00ef\u00f1")
        buf.write("\u00f7\u00fb\u00fd\u0101\u0104\u010b\u010f\u0112\u0118")
        buf.write("\u011c\u0120\u0126\u012a\u0130\u0136\u013c\u0142\u0149")
        buf.write("\u0152\u0157\u015a\u015c\u016e\u0179\u017d\u017f\u0183")
        buf.write("\u0188\u018c\u018e\u0195\u01af\u01b6\u01bb\u01bf\u01c2")
        buf.write("\u01c7\u01cc\u01d0\u01d6\u01ed\u01f5\u01f9\u0201\u020c")
        buf.write("\u0211\u0215\u0223\u0225\u022b\u0230\u0232\u0239\u023c")
        buf.write("\u0244\u024f\u0254\u0256\u0259\u0261\u0263\u0268\u026d")
        buf.write("\u026f\u0272\u0275\u027f\u0281\u0286\u028a\u028e\u0292")
        buf.write("\u0296\u029a\u029e\u02ab\u02b0\u02b6\u02bb\u02c1\u02c5")
        buf.write("\u02c8\u02cd\u02d1\u02d4\u02d9\u02dc\u02e1\u02e4\u02ea")
        buf.write("\u02f6\u02fb\u0300\u0307\u0313\u0317\u031a\u031f\u0325")
        buf.write("\u032a\u032e\u0334\u0339\u033d\u0343\u0346\u034b\u034f")
        buf.write("\u0352\u0361\u0366\u036b\u0371\u0376\u037a\u037d\u0380")
        buf.write("\u0385\u038b\u038e\u0393\u039c\u039f\u03a4\u03a9\u03b5")
        buf.write("\u03bc\u03c0\u03c6\u03c8\u03cf\u03d4\u03d9\u03dc\u03df")
        buf.write("\u03ea\u03f3\u03f7\u03fa\u040b\u0410\u041d\u041f")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'*'", "<INVALID>", "'!'", "'`'", 
                     "'\\'", "':'", "','", "'\"'", "'='", "'>='", "'>'", 
                     "'#'", "'-'", "'<='", "'<'", "'('", "'['", "'<>'", 
                     "'%'", "'+'", "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOCOUNT", "NOTGPA", "WHITESPACE", "ACCEPT", "ALLOW", 
                      "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", 
                      "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", 
                      "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", 
                      "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PROXY_ADVICE", "PSEUDO", "PSUEDO", 
                      "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", "RULE_TAG", 
                      "STANDALONE", "SHARE", "TAG", "SAME_DISC", "UNDER", 
                      "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNT", "THEN", "AND", "OR", 
                      "NUMBER", "CATALOG_NUMBER", "WILD", "SYMBOL", "AMPERSAND", 
                      "ASTERISK", "AT", "BANG", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "DBL_QUOTE", "EQ", "GE", "GT", "HASH", 
                      "HYPHEN", "LE", "LT", "LP", "L_SQB", "NE", "PERCENT", 
                      "PLUS", "QUESTION_MARK", "RP", "R_SQB", "SEMICOLON", 
                      "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_head = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_full_course = 4
    RULE_course_item = 5
    RULE_and_list = 6
    RULE_or_list = 7
    RULE_except_list = 8
    RULE_include_list = 9
    RULE_catalog_number = 10
    RULE_discipline = 11
    RULE_course_list_head_qualifier = 12
    RULE_course_list_body = 13
    RULE_qualifier = 14
    RULE_begin_if = 15
    RULE_end_if = 16
    RULE_conditional_head = 17
    RULE_else_head = 18
    RULE_head_rule_group = 19
    RULE_head_rule = 20
    RULE_conditional_body = 21
    RULE_else_body = 22
    RULE_body_rule_group = 23
    RULE_body_rule = 24
    RULE_group_requirement = 25
    RULE_groups = 26
    RULE_group = 27
    RULE_subset = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_allow_clause = 31
    RULE_class_credit_head = 32
    RULE_class_credit_body = 33
    RULE_maxpassfail_head = 34
    RULE_maxperdisc_head = 35
    RULE_maxtransfer_head = 36
    RULE_minclass_head = 37
    RULE_mincredit_head = 38
    RULE_minperdisc_head = 39
    RULE_share_head = 40
    RULE_allow = 41
    RULE_area_end = 42
    RULE_area_start = 43
    RULE_class_or_credit = 44
    RULE_copy_rules = 45
    RULE_display = 46
    RULE_header_tag = 47
    RULE_label = 48
    RULE_lastres = 49
    RULE_maxclass = 50
    RULE_maxcredit = 51
    RULE_maxpassfail = 52
    RULE_maxperdisc = 53
    RULE_maxspread = 54
    RULE_maxterm = 55
    RULE_maxtransfer = 56
    RULE_minarea = 57
    RULE_minclass = 58
    RULE_mincredit = 59
    RULE_mingpa = 60
    RULE_mingrade = 61
    RULE_minperdisc = 62
    RULE_minres = 63
    RULE_minspread = 64
    RULE_minterm = 65
    RULE_noncourse = 66
    RULE_num_classes = 67
    RULE_num_credits = 68
    RULE_nv_pair = 69
    RULE_optional = 70
    RULE_proxy_advice = 71
    RULE_pseudo = 72
    RULE_remark = 73
    RULE_rule_complete = 74
    RULE_rule_tag = 75
    RULE_samedisc = 76
    RULE_share = 77
    RULE_standalone = 78
    RULE_string = 79
    RULE_symbol = 80
    RULE_tag = 81
    RULE_under = 82
    RULE_with_clause = 83
    RULE_expression = 84
    RULE_logical_op = 85
    RULE_relational_op = 86
    RULE_list_or = 87
    RULE_list_and = 88

    ruleNames =  [ "req_block", "head", "body", "course_list", "full_course", 
                   "course_item", "and_list", "or_list", "except_list", 
                   "include_list", "catalog_number", "discipline", "course_list_head_qualifier", 
                   "course_list_body", "qualifier", "begin_if", "end_if", 
                   "conditional_head", "else_head", "head_rule_group", "head_rule", 
                   "conditional_body", "else_body", "body_rule_group", "body_rule", 
                   "group_requirement", "groups", "group", "subset", "block", 
                   "blocktype", "allow_clause", "class_credit_head", "class_credit_body", 
                   "maxpassfail_head", "maxperdisc_head", "maxtransfer_head", 
                   "minclass_head", "mincredit_head", "minperdisc_head", 
                   "share_head", "allow", "area_end", "area_start", "class_or_credit", 
                   "copy_rules", "display", "header_tag", "label", "lastres", 
                   "maxclass", "maxcredit", "maxpassfail", "maxperdisc", 
                   "maxspread", "maxterm", "maxtransfer", "minarea", "minclass", 
                   "mincredit", "mingpa", "mingrade", "minperdisc", "minres", 
                   "minspread", "minterm", "noncourse", "num_classes", "num_credits", 
                   "nv_pair", "optional", "proxy_advice", "pseudo", "remark", 
                   "rule_complete", "rule_tag", "samedisc", "share", "standalone", 
                   "string", "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOCOUNT=13
    NOTGPA=14
    WHITESPACE=15
    ACCEPT=16
    ALLOW=17
    BEGIN=18
    BEGINSUB=19
    BLOCK=20
    BLOCKTYPE=21
    CLASS=22
    COPY_RULES=23
    CREDIT=24
    DONT_SHARE=25
    ENDOT=26
    ENDSUB=27
    EXCEPT=28
    GROUP=29
    HEADER_TAG=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PROXY_ADVICE=53
    PSEUDO=54
    PSUEDO=55
    REMARK=56
    RULE_COMPLETE=57
    RULE_INCOMPLETE=58
    RULE_TAG=59
    STANDALONE=60
    SHARE=61
    TAG=62
    SAME_DISC=63
    UNDER=64
    WITH=65
    BEGINELSE=66
    BEGINIF=67
    ELSE=68
    ENDELSE=69
    ENDIF=70
    IF=71
    IS=72
    ISNT=73
    THEN=74
    AND=75
    OR=76
    NUMBER=77
    CATALOG_NUMBER=78
    WILD=79
    SYMBOL=80
    AMPERSAND=81
    ASTERISK=82
    AT=83
    BANG=84
    BACKQUOTE=85
    BACKSLASH=86
    COLON=87
    COMMA=88
    DBL_QUOTE=89
    EQ=90
    GE=91
    GT=92
    HASH=93
    HYPHEN=94
    LE=95
    LT=96
    LP=97
    L_SQB=98
    NE=99
    PERCENT=100
    PLUS=101
    QUESTION_MARK=102
    RP=103
    R_SQB=104
    SEMICOLON=105
    SLASH=106
    UNDERSCORE=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def head(self):
            return self.getTypedRuleContext(ReqBlockParser.HeadContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 178
                    self.matchWildcard() 
                self.state = 183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 184
            self.match(ReqBlockParser.BEGIN)
            self.state = 185
            self.head()
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 186
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 187
                self.body()


            self.state = 190
            self.match(ReqBlockParser.ENDOT)
            self.state = 194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 191
                    self.matchWildcard() 
                self.state = 196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 197
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_credit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,i)


        def conditional_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_headContext,i)


        def lastres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LastresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LastresContext,i)


        def maxclass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxclassContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,i)


        def maxcredit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxcreditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,i)


        def maxpassfail_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxpassfail_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxpassfail_headContext,i)


        def maxperdisc_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxperdisc_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxperdisc_headContext,i)


        def maxterm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MaxtermContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,i)


        def maxtransfer_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Maxtransfer_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Maxtransfer_headContext,i)


        def mingrade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingradeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingradeContext,i)


        def minclass_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Minclass_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Minclass_headContext,i)


        def mincredit_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Mincredit_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Mincredit_headContext,i)


        def mingpa(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MingpaContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MingpaContext,i)


        def minperdisc_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Minperdisc_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Minperdisc_headContext,i)


        def minres(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.MinresContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.MinresContext,i)


        def optional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.OptionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.OptionalContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share_head(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Share_headContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Share_headContext,i)


        def standalone(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StandaloneContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,i)


        def under(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.UnderContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.UnderContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead" ):
                listener.enterHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead" ):
                listener.exitHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead" ):
                return visitor.visitHead(self)
            else:
                return visitor.visitChildren(self)




    def head(self):

        localctx = ReqBlockParser.HeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (ReqBlockParser.DONT_SHARE - 25)) | (1 << (ReqBlockParser.LASTRES - 25)) | (1 << (ReqBlockParser.MAXCLASS - 25)) | (1 << (ReqBlockParser.MAXCREDIT - 25)) | (1 << (ReqBlockParser.MAXPASSFAIL - 25)) | (1 << (ReqBlockParser.MAXPERDISC - 25)) | (1 << (ReqBlockParser.MAXTERM - 25)) | (1 << (ReqBlockParser.MAXTRANSFER - 25)) | (1 << (ReqBlockParser.MINGPA - 25)) | (1 << (ReqBlockParser.MINGRADE - 25)) | (1 << (ReqBlockParser.MINCLASS - 25)) | (1 << (ReqBlockParser.MINCREDIT - 25)) | (1 << (ReqBlockParser.MINPERDISC - 25)) | (1 << (ReqBlockParser.MINRES - 25)) | (1 << (ReqBlockParser.OPTIONAL - 25)) | (1 << (ReqBlockParser.PROXY_ADVICE - 25)) | (1 << (ReqBlockParser.REMARK - 25)) | (1 << (ReqBlockParser.STANDALONE - 25)) | (1 << (ReqBlockParser.SHARE - 25)) | (1 << (ReqBlockParser.UNDER - 25)) | (1 << (ReqBlockParser.IF - 25)) | (1 << (ReqBlockParser.NUMBER - 25)))) != 0):
                self.state = 220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.NUMBER]:
                    self.state = 199
                    self.class_credit_head()
                    pass
                elif token in [ReqBlockParser.IF]:
                    self.state = 200
                    self.conditional_head()
                    pass
                elif token in [ReqBlockParser.LASTRES]:
                    self.state = 201
                    self.lastres()
                    pass
                elif token in [ReqBlockParser.MAXCLASS]:
                    self.state = 202
                    self.maxclass()
                    pass
                elif token in [ReqBlockParser.MAXCREDIT]:
                    self.state = 203
                    self.maxcredit()
                    pass
                elif token in [ReqBlockParser.MAXPASSFAIL]:
                    self.state = 204
                    self.maxpassfail_head()
                    pass
                elif token in [ReqBlockParser.MAXPERDISC]:
                    self.state = 205
                    self.maxperdisc_head()
                    pass
                elif token in [ReqBlockParser.MAXTERM]:
                    self.state = 206
                    self.maxterm()
                    pass
                elif token in [ReqBlockParser.MAXTRANSFER]:
                    self.state = 207
                    self.maxtransfer_head()
                    pass
                elif token in [ReqBlockParser.MINGRADE]:
                    self.state = 208
                    self.mingrade()
                    pass
                elif token in [ReqBlockParser.MINCLASS]:
                    self.state = 209
                    self.minclass_head()
                    pass
                elif token in [ReqBlockParser.MINCREDIT]:
                    self.state = 210
                    self.mincredit_head()
                    pass
                elif token in [ReqBlockParser.MINGPA]:
                    self.state = 211
                    self.mingpa()
                    pass
                elif token in [ReqBlockParser.MINPERDISC]:
                    self.state = 212
                    self.minperdisc_head()
                    pass
                elif token in [ReqBlockParser.MINRES]:
                    self.state = 213
                    self.minres()
                    pass
                elif token in [ReqBlockParser.OPTIONAL]:
                    self.state = 214
                    self.optional()
                    pass
                elif token in [ReqBlockParser.PROXY_ADVICE]:
                    self.state = 215
                    self.proxy_advice()
                    pass
                elif token in [ReqBlockParser.REMARK]:
                    self.state = 216
                    self.remark()
                    pass
                elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                    self.state = 217
                    self.share_head()
                    pass
                elif token in [ReqBlockParser.STANDALONE]:
                    self.state = 218
                    self.standalone()
                    pass
                elif token in [ReqBlockParser.UNDER]:
                    self.state = 219
                    self.under()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def conditional_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def subset(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.SubsetContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.SubsetContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ReqBlockParser.BEGINSUB - 19)) | (1 << (ReqBlockParser.COPY_RULES - 19)) | (1 << (ReqBlockParser.LABEL - 19)) | (1 << (ReqBlockParser.PROXY_ADVICE - 19)) | (1 << (ReqBlockParser.REMARK - 19)) | (1 << (ReqBlockParser.RULE_COMPLETE - 19)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 19)) | (1 << (ReqBlockParser.IF - 19)) | (1 << (ReqBlockParser.NUMBER - 19)))) != 0):
                self.state = 237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 225
                    self.block()
                    pass

                elif la_ == 2:
                    self.state = 226
                    self.blocktype()
                    pass

                elif la_ == 3:
                    self.state = 227
                    self.class_credit_body()
                    pass

                elif la_ == 4:
                    self.state = 228
                    self.conditional_body()
                    pass

                elif la_ == 5:
                    self.state = 229
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 230
                    self.group_requirement()
                    pass

                elif la_ == 7:
                    self.state = 231
                    self.label()
                    pass

                elif la_ == 8:
                    self.state = 232
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 233
                    self.proxy_advice()
                    pass

                elif la_ == 10:
                    self.state = 234
                    self.remark()
                    pass

                elif la_ == 11:
                    self.state = 235
                    self.rule_complete()
                    pass

                elif la_ == 12:
                    self.state = 236
                    self.subset()
                    pass


                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Except_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Except_listContext,i)


        def include_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Include_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Include_listContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.course_item()
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 243
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 244
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.EXCEPT or _la==ReqBlockParser.INCLUDING:
                self.state = 249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.EXCEPT]:
                    self.state = 247
                    self.except_list()
                    pass
                elif token in [ReqBlockParser.INCLUDING]:
                    self.state = 248
                    self.include_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 254
                self.proxy_advice()


            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 257
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.discipline()
            self.state = 261
            self.catalog_number()
            self.state = 265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 262
                    self.with_clause() 
                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def area_start(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_startContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def area_end(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_endContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 268
                self.area_start()


            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 271
                self.discipline()


            self.state = 274
            self.catalog_number()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.LP:
                self.state = 275
                self.with_clause()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 281
                self.area_end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 284
                self.list_and()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 285
                    self.area_end()


                self.state = 288
                self.course_item()
                self.state = 292 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 294
                self.list_or()
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 295
                    self.area_end()


                self.state = 298
                self.course_item()
                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(ReqBlockParser.EXCEPT)
            self.state = 305
            self.course_item()
            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 306
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 307
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(ReqBlockParser.INCLUDING)
            self.state = 311
            self.course_item()
            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 312
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 313
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.UNDER, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_catalog_number)
        try:
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 319
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_discipline)
        try:
            self.state = 327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 323
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 324
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 325
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 326
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_head_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def header_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_head_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_head_qualifier" ):
                listener.enterCourse_list_head_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_head_qualifier" ):
                listener.exitCourse_list_head_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_head_qualifier" ):
                return visitor.visitCourse_list_head_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def course_list_head_qualifier(self):

        localctx = ReqBlockParser.Course_list_head_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_course_list_head_qualifier)
        try:
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 330
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 331
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 332
                self.minspread()
                pass
            elif token in [ReqBlockParser.HEADER_TAG]:
                self.enterOuterAlt(localctx, 5)
                self.state = 333
                self.header_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 334
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 335
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.course_list()
            self.state = 346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 344
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 339
                        self.qualifier()
                        self.state = 341
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                        if la_ == 1:
                            self.state = 340
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 343
                        self.proxy_advice()
                        pass

             
                self.state = 348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ReqBlockParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qualifier)
        try:
            self.state = 364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 351
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 352
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 353
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 354
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 355
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 356
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 357
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 358
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 359
                self.minspread()
                pass
            elif token in [ReqBlockParser.PROXY_ADVICE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 360
                self.proxy_advice()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 13)
                self.state = 361
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 14)
                self.state = 362
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 363
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def else_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_headContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_conditional_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_head" ):
                listener.enterConditional_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_head" ):
                listener.exitConditional_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_head" ):
                return visitor.visitConditional_head(self)
            else:
                return visitor.visitChildren(self)




    def conditional_head(self):

        localctx = ReqBlockParser.Conditional_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_conditional_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(ReqBlockParser.IF)
            self.state = 371
            self.expression(0)
            self.state = 372
            self.match(ReqBlockParser.THEN)
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 373
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 374
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 377
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 378
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 384
                self.else_head()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def head_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,0)


        def head_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Head_rule_groupContext,0)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_head" ):
                listener.enterElse_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_head" ):
                listener.exitElse_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_head" ):
                return visitor.visitElse_head(self)
            else:
                return visitor.visitChildren(self)




    def else_head(self):

        localctx = ReqBlockParser.Else_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_else_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(ReqBlockParser.ELSE)
            self.state = 390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 388
                self.head_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 389
                self.head_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 396
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 394
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 392
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 393
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 398
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def head_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Head_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Head_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule_group" ):
                listener.enterHead_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule_group" ):
                listener.exitHead_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule_group" ):
                return visitor.visitHead_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def head_rule_group(self):

        localctx = ReqBlockParser.Head_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_head_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.begin_if()
            self.state = 401 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 400
                self.head_rule()
                self.state = 403 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (ReqBlockParser.COPY_RULES - 23)) | (1 << (ReqBlockParser.DONT_SHARE - 23)) | (1 << (ReqBlockParser.LASTRES - 23)) | (1 << (ReqBlockParser.MAXCREDIT - 23)) | (1 << (ReqBlockParser.MAXPASSFAIL - 23)) | (1 << (ReqBlockParser.MAXTERM - 23)) | (1 << (ReqBlockParser.MAXTRANSFER - 23)) | (1 << (ReqBlockParser.MINGPA - 23)) | (1 << (ReqBlockParser.MINGRADE - 23)) | (1 << (ReqBlockParser.MINCLASS - 23)) | (1 << (ReqBlockParser.MINCREDIT - 23)) | (1 << (ReqBlockParser.MINPERDISC - 23)) | (1 << (ReqBlockParser.MINRES - 23)) | (1 << (ReqBlockParser.MINTERM - 23)) | (1 << (ReqBlockParser.PROXY_ADVICE - 23)) | (1 << (ReqBlockParser.REMARK - 23)) | (1 << (ReqBlockParser.RULE_COMPLETE - 23)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 23)) | (1 << (ReqBlockParser.SHARE - 23)) | (1 << (ReqBlockParser.IF - 23)) | (1 << (ReqBlockParser.NUMBER - 23)))) != 0)):
                    break

            self.state = 405
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Head_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Conditional_headContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_headContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxpassfail_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxpassfail_headContext,0)


        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def maxtransfer_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Maxtransfer_headContext,0)


        def minclass_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minclass_headContext,0)


        def mincredit_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Mincredit_headContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Minperdisc_headContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share_head(self):
            return self.getTypedRuleContext(ReqBlockParser.Share_headContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_head_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHead_rule" ):
                listener.enterHead_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHead_rule" ):
                listener.exitHead_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHead_rule" ):
                return visitor.visitHead_rule(self)
            else:
                return visitor.visitChildren(self)




    def head_rule(self):

        localctx = ReqBlockParser.Head_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_head_rule)
        try:
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.conditional_head()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 410
                self.class_credit_head()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 411
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 412
                self.lastres()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 413
                self.maxcredit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 414
                self.maxpassfail_head()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 415
                self.maxterm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 416
                self.maxtransfer_head()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 417
                self.minclass_head()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 418
                self.mincredit_head()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 419
                self.mingpa()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 420
                self.mingrade()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 421
                self.minperdisc_head()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 422
                self.minres()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 423
                self.minterm()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 424
                self.noncourse()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 425
                self.proxy_advice()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 426
                self.remark()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 427
                self.rule_complete()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 428
                self.share_head()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def else_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Else_bodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_conditional_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_body" ):
                listener.enterConditional_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_body" ):
                listener.exitConditional_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_body" ):
                return visitor.visitConditional_body(self)
            else:
                return visitor.visitChildren(self)




    def conditional_body(self):

        localctx = ReqBlockParser.Conditional_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conditional_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(ReqBlockParser.IF)
            self.state = 432
            self.expression(0)
            self.state = 433
            self.match(ReqBlockParser.THEN)
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 434
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 435
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 438
                    self.qualifier() 
                self.state = 443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 444
                self.label()


            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 447
                self.else_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_else_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_body" ):
                listener.enterElse_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_body" ):
                listener.exitElse_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_body" ):
                return visitor.visitElse_body(self)
            else:
                return visitor.visitChildren(self)




    def else_body(self):

        localctx = ReqBlockParser.Else_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_else_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(ReqBlockParser.ELSE)
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.BEGINSUB, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINRES, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 451
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 452
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self.qualifier() 
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 461
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.begin_if()
            self.state = 466 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 465
                self.body_rule()
                self.state = 468 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ReqBlockParser.BEGINSUB - 19)) | (1 << (ReqBlockParser.COPY_RULES - 19)) | (1 << (ReqBlockParser.DONT_SHARE - 19)) | (1 << (ReqBlockParser.LASTRES - 19)) | (1 << (ReqBlockParser.MAXCREDIT - 19)) | (1 << (ReqBlockParser.MAXTRANSFER - 19)) | (1 << (ReqBlockParser.MINGRADE - 19)) | (1 << (ReqBlockParser.MINCLASS - 19)) | (1 << (ReqBlockParser.MINCREDIT - 19)) | (1 << (ReqBlockParser.MINRES - 19)) | (1 << (ReqBlockParser.PROXY_ADVICE - 19)) | (1 << (ReqBlockParser.REMARK - 19)) | (1 << (ReqBlockParser.RULE_COMPLETE - 19)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 19)) | (1 << (ReqBlockParser.SHARE - 19)) | (1 << (ReqBlockParser.IF - 19)) | (1 << (ReqBlockParser.NUMBER - 19)))) != 0)):
                    break

            self.state = 470
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,0)


        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_body_rule)
        try:
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.conditional_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.blocktype()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 475
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 476
                self.copy_rules()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.group_requirement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 478
                self.lastres()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 479
                self.maxcredit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 480
                self.maxtransfer()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 481
                self.minclass()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 482
                self.mincredit()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 483
                self.mingrade()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 484
                self.minres()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 485
                self.noncourse()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 486
                self.proxy_advice()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 487
                self.remark()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 488
                self.rule_complete()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 489
                self.share()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 490
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def groups(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupsContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_requirement" ):
                listener.enterGroup_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_requirement" ):
                listener.exitGroup_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_requirement" ):
                return visitor.visitGroup_requirement(self)
            else:
                return visitor.visitChildren(self)




    def group_requirement(self):

        localctx = ReqBlockParser.Group_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(ReqBlockParser.NUMBER)
            self.state = 494
            self.match(ReqBlockParser.GROUP)
            self.state = 495
            self.groups()
            self.state = 499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.qualifier() 
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 502
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroups" ):
                listener.enterGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroups" ):
                listener.exitGroups(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroups" ):
                return visitor.visitGroups(self)
            else:
                return visitor.visitChildren(self)




    def groups(self):

        localctx = ReqBlockParser.GroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.group()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 506
                self.logical_op()
                self.state = 507
                self.group()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def class_credit_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(ReqBlockParser.LP)
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 515
                self.block()
                pass

            elif la_ == 2:
                self.state = 516
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 517
                self.course_list()
                pass

            elif la_ == 4:
                self.state = 518
                self.class_credit_body()
                pass

            elif la_ == 5:
                self.state = 519
                self.group_requirement()
                pass

            elif la_ == 6:
                self.state = 520
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 521
                self.rule_complete()
                pass


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXSPREAD) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINAREA) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.MINSPREAD) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 524
                self.qualifier()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 530
                self.label()


            self.state = 533
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def conditional_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Conditional_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Conditional_bodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def class_credit_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Class_credit_bodyContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Class_credit_bodyContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_listContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 545 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 536
                    self.conditional_body()
                    pass

                elif la_ == 2:
                    self.state = 537
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 538
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 539
                    self.class_credit_body()
                    pass

                elif la_ == 5:
                    self.state = 540
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 541
                    self.course_list()
                    pass

                elif la_ == 7:
                    self.state = 542
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 543
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 544
                    self.rule_complete()
                    pass


                self.state = 547 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 549
            self.match(ReqBlockParser.ENDSUB)
            self.state = 553
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 550
                    self.qualifier() 
                self.state = 555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 560
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 558
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.REMARK]:
                        self.state = 556
                        self.remark()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 557
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(ReqBlockParser.NUMBER)
            self.state = 564
            self.match(ReqBlockParser.BLOCK)
            self.state = 565
            self.expression(0)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 566
                self.rule_tag()


            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 569
                self.proxy_advice()


            self.state = 572
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(ReqBlockParser.NUMBER)
            self.state = 575
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 576
            self.expression(0)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 577
                self.proxy_advice()


            self.state = 580
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(ReqBlockParser.LP)
            self.state = 583
            self.allow()
            self.state = 584
            self.match(ReqBlockParser.NUMBER)
            self.state = 585
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_head" ):
                listener.enterClass_credit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_head" ):
                listener.exitClass_credit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_head" ):
                return visitor.visitClass_credit_head(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_head(self):

        localctx = ReqBlockParser.Class_credit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_credit_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 587
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 588
                self.num_credits()
                pass


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 591
                self.logical_op()
                self.state = 594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 592
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 593
                    self.num_credits()
                    pass




            self.state = 609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 598
                            self.match(ReqBlockParser.IS)


                        self.state = 601
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DISPLAY]:
                        self.state = 602
                        self.display()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 603
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.HEADER_TAG]:
                        self.state = 604
                        self.header_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 605
                        self.label()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 606
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_credit_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_credit_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_credit_body" ):
                listener.enterClass_credit_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_credit_body" ):
                listener.exitClass_credit_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_credit_body" ):
                return visitor.visitClass_credit_body(self)
            else:
                return visitor.visitChildren(self)




    def class_credit_body(self):

        localctx = ReqBlockParser.Class_credit_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_credit_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 612
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 613
                self.num_credits()
                pass


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 616
                self.logical_op()
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 617
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 618
                    self.num_credits()
                    pass




            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 623
                self.course_list_body()


            self.state = 639
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 637
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 626
                            self.match(ReqBlockParser.IS)


                        self.state = 629
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DISPLAY]:
                        self.state = 630
                        self.display()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 631
                        self.label()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 632
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.REMARK]:
                        self.state = 633
                        self.remark()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 634
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                        self.state = 635
                        self.share()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 636
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxpassfail_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail_head" ):
                listener.enterMaxpassfail_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail_head" ):
                listener.exitMaxpassfail_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail_head" ):
                return visitor.visitMaxpassfail_head(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail_head(self):

        localctx = ReqBlockParser.Maxpassfail_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_maxpassfail_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.maxpassfail()
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 643
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxperdisc_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc_head" ):
                listener.enterMaxperdisc_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc_head" ):
                listener.exitMaxperdisc_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc_head" ):
                return visitor.visitMaxperdisc_head(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc_head(self):

        localctx = ReqBlockParser.Maxperdisc_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_maxperdisc_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.maxperdisc()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 647
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maxtransfer_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer_head" ):
                listener.enterMaxtransfer_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer_head" ):
                listener.exitMaxtransfer_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer_head" ):
                return visitor.visitMaxtransfer_head(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer_head(self):

        localctx = ReqBlockParser.Maxtransfer_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_maxtransfer_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.maxtransfer()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 651
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minclass_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass_head" ):
                listener.enterMinclass_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass_head" ):
                listener.exitMinclass_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass_head" ):
                return visitor.visitMinclass_head(self)
            else:
                return visitor.visitChildren(self)




    def minclass_head(self):

        localctx = ReqBlockParser.Minclass_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_minclass_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.minclass()
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 655
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mincredit_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit_head" ):
                listener.enterMincredit_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit_head" ):
                listener.exitMincredit_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit_head" ):
                return visitor.visitMincredit_head(self)
            else:
                return visitor.visitChildren(self)




    def mincredit_head(self):

        localctx = ReqBlockParser.Mincredit_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mincredit_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.mincredit()
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 659
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Minperdisc_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc_head" ):
                listener.enterMinperdisc_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc_head" ):
                listener.exitMinperdisc_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc_head" ):
                return visitor.visitMinperdisc_head(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc_head(self):

        localctx = ReqBlockParser.Minperdisc_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_minperdisc_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.minperdisc()
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 663
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Share_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare_head" ):
                listener.enterShare_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare_head" ):
                listener.exitShare_head(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare_head" ):
                return visitor.visitShare_head(self)
            else:
                return visitor.visitChildren(self)




    def share_head(self):

        localctx = ReqBlockParser.Share_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_share_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.share()
            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 667
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ACCEPT or _la==ReqBlockParser.ALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_end" ):
                listener.enterArea_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_end" ):
                listener.exitArea_end(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_end" ):
                return visitor.visitArea_end(self)
            else:
                return visitor.visitChildren(self)




    def area_end(self):

        localctx = ReqBlockParser.Area_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_area_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(ReqBlockParser.R_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_start" ):
                listener.enterArea_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_start" ):
                listener.exitArea_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_start" ):
                return visitor.visitArea_start(self)
            else:
                return visitor.visitChildren(self)




    def area_start(self):

        localctx = ReqBlockParser.Area_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_area_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(ReqBlockParser.L_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 679
            self.expression(0)
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 680
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(ReqBlockParser.DISPLAY)
            self.state = 684
            self.string()
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 685
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.HEADER_TAG)
            else:
                return self.getToken(ReqBlockParser.HEADER_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 688
                    self.match(ReqBlockParser.HEADER_TAG)
                    self.state = 689
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 692 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(ReqBlockParser.LABEL)
            self.state = 695
            self.string()
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 696
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(ReqBlockParser.LASTRES)
            self.state = 700
            self.match(ReqBlockParser.NUMBER)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 701
                self.match(ReqBlockParser.OF)
                self.state = 702
                self.match(ReqBlockParser.NUMBER)


            self.state = 705
            self.class_or_credit()
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 706
                self.course_list()


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 709
                self.tag()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 712
                self.display()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 718
                self.proxy_advice()


            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 721
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 725
            self.match(ReqBlockParser.NUMBER)
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 726
                self.course_list()


            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 729
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 733
            self.match(ReqBlockParser.NUMBER)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 734
                self.course_list()


            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 737
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 741
            self.match(ReqBlockParser.NUMBER)
            self.state = 742
            self.class_or_credit()
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 743
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 747
            self.match(ReqBlockParser.NUMBER)
            self.state = 748
            self.class_or_credit()
            self.state = 749
            self.match(ReqBlockParser.LP)
            self.state = 750
            self.match(ReqBlockParser.SYMBOL)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 751
                self.list_or()
                self.state = 752
                self.match(ReqBlockParser.SYMBOL)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 759
            self.match(ReqBlockParser.RP)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 760
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 764
            self.match(ReqBlockParser.NUMBER)
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 765
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(ReqBlockParser.MAXTERM)
            self.state = 769
            self.match(ReqBlockParser.NUMBER)
            self.state = 770
            self.class_or_credit()
            self.state = 771
            self.course_list()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 772
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 776
            self.match(ReqBlockParser.NUMBER)
            self.state = 777
            self.class_or_credit()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 778
                self.match(ReqBlockParser.LP)
                self.state = 779
                self.match(ReqBlockParser.SYMBOL)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 780
                    self.list_or()
                    self.state = 781
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self.match(ReqBlockParser.RP)


            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 791
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(ReqBlockParser.MINAREA)
            self.state = 795
            self.match(ReqBlockParser.NUMBER)
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 796
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(ReqBlockParser.MINCLASS)
            self.state = 800
            self.match(ReqBlockParser.NUMBER)
            self.state = 801
            self.course_list()
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 802
                self.tag()


            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 805
                    self.display() 
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 811
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 815
            self.match(ReqBlockParser.NUMBER)
            self.state = 816
            self.course_list()
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 817
                self.tag()


            self.state = 823
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 820
                    self.display() 
                self.state = 825
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 826
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(ReqBlockParser.MINGPA)
            self.state = 830
            self.match(ReqBlockParser.NUMBER)
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 831
                self.course_list()

            elif la_ == 2:
                self.state = 832
                self.expression(0)


            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 835
                self.tag()


            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 838
                    self.display() 
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 844
                self.proxy_advice()


            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 847
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(ReqBlockParser.MINGRADE)
            self.state = 851
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 854
            self.match(ReqBlockParser.NUMBER)
            self.state = 855
            self.class_or_credit()
            self.state = 856
            self.match(ReqBlockParser.LP)
            self.state = 857
            self.match(ReqBlockParser.SYMBOL)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 858
                self.list_or()
                self.state = 859
                self.match(ReqBlockParser.SYMBOL)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.match(ReqBlockParser.RP)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 867
                self.tag()


            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.display() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(ReqBlockParser.MINRES)
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 877
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 878
                self.num_credits()
                pass


            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 881
                self.display()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 887
                self.proxy_advice()


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 890
                self.tag()


            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 893
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 897
            self.match(ReqBlockParser.NUMBER)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 898
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(ReqBlockParser.MINTERM)
            self.state = 902
            self.match(ReqBlockParser.NUMBER)
            self.state = 903
            self.class_or_credit()
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 904
                self.course_list()


            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 907
                self.tag()


            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 910
                self.display()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_noncourse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(ReqBlockParser.NUMBER)
            self.state = 917
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 918
            self.match(ReqBlockParser.LP)
            self.state = 919
            self.expression(0)
            self.state = 920
            self.match(ReqBlockParser.RP)
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 921
                self.proxy_advice()


            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 924
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(ReqBlockParser.NUMBER)
            self.state = 928
            self.match(ReqBlockParser.CLASS)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 929
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(ReqBlockParser.NUMBER)
            self.state = 933
            self.match(ReqBlockParser.CREDIT)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 934
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(ReqBlockParser.SYMBOL)
            self.state = 938
            self.match(ReqBlockParser.EQ)
            self.state = 939
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_adviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_ADVICE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PROXY_ADVICE)
            else:
                return self.getToken(ReqBlockParser.PROXY_ADVICE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.STRING)
            else:
                return self.getToken(ReqBlockParser.STRING, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_proxy_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_advice" ):
                listener.enterProxy_advice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_advice" ):
                listener.exitProxy_advice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProxy_advice" ):
                return visitor.visitProxy_advice(self)
            else:
                return visitor.visitChildren(self)




    def proxy_advice(self):

        localctx = ReqBlockParser.Proxy_adviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_proxy_advice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 943
                    self.match(ReqBlockParser.PROXY_ADVICE)
                    self.state = 944
                    self.match(ReqBlockParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 947 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 951
                    self.match(ReqBlockParser.REMARK)
                    self.state = 952
                    self.string()
                    self.state = 954
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        self.state = 953
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 958 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 964
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 961
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 962
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 963
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RULE_TAG)
            else:
                return self.getToken(ReqBlockParser.RULE_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 969
                    self.match(ReqBlockParser.RULE_TAG)
                    self.state = 970
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 973 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 976
            self.expression(0)
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 977
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 981
                self.match(ReqBlockParser.NUMBER)
                self.state = 982
                self.class_or_credit()


            self.state = 986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 985
                self.expression(0)


            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 988
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(ReqBlockParser.TAG)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 998
                self.match(ReqBlockParser.EQ)
                self.state = 999
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ReqBlockParser.NUMBER - 77)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 77)) | (1 << (ReqBlockParser.SYMBOL - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(ReqBlockParser.UNDER)
            self.state = 1003
            self.match(ReqBlockParser.NUMBER)
            self.state = 1004
            self.class_or_credit()
            self.state = 1005
            self.course_list()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 1006
                self.display()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.proxy_advice()


            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 1015
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(ReqBlockParser.LP)
            self.state = 1019
            self.match(ReqBlockParser.WITH)
            self.state = 1020
            self.expression(0)
            self.state = 1021
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 1025
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 1026
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 1027
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 1028
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 1029
                self.string()
                pass

            elif la_ == 7:
                self.state = 1030
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 1031
                self.match(ReqBlockParser.LP)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 1032
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 1035
                self.expression(0)
                self.state = 1036
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1051
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1040
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1041
                        self.relational_op()
                        self.state = 1042
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1044
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1045
                        self.logical_op()
                        self.state = 1046
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1048
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1049
                        self.match(ReqBlockParser.COMMA)
                        self.state = 1050
                        self.expression(10)
                        pass

             
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (ReqBlockParser.IS - 72)) | (1 << (ReqBlockParser.ISNT - 72)) | (1 << (ReqBlockParser.EQ - 72)) | (1 << (ReqBlockParser.GE - 72)) | (1 << (ReqBlockParser.GT - 72)) | (1 << (ReqBlockParser.LE - 72)) | (1 << (ReqBlockParser.LT - 72)) | (1 << (ReqBlockParser.NE - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[84] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




