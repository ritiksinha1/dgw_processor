# Generated from ReqBlock.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3m")
        buf.write("\u041b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\3\2\7\2\u00c8\n\2\f\2\16")
        buf.write("\2\u00cb\13\2\3\2\3\2\3\2\3\2\5\2\u00d1\n\2\3\2\3\2\7")
        buf.write("\2\u00d5\n\2\f\2\16\2\u00d8\13\2\3\2\3\2\3\3\7\3\u00dd")
        buf.write("\n\3\f\3\16\3\u00e0\13\3\3\4\7\4\u00e3\n\4\f\4\16\4\u00e6")
        buf.write("\13\4\3\5\3\5\3\5\5\5\u00eb\n\5\3\5\3\5\7\5\u00ef\n\5")
        buf.write("\f\5\16\5\u00f2\13\5\3\5\5\5\u00f5\n\5\3\6\3\6\3\6\7\6")
        buf.write("\u00fa\n\6\f\6\16\6\u00fd\13\6\3\7\5\7\u0100\n\7\3\7\5")
        buf.write("\7\u0103\n\7\3\7\3\7\7\7\u0107\n\7\f\7\16\7\u010a\13\7")
        buf.write("\3\7\5\7\u010d\n\7\3\b\3\b\5\b\u0111\n\b\3\b\3\b\6\b\u0115")
        buf.write("\n\b\r\b\16\b\u0116\3\t\3\t\5\t\u011b\n\t\3\t\3\t\6\t")
        buf.write("\u011f\n\t\r\t\16\t\u0120\3\n\3\n\3\n\3\n\5\n\u0127\n")
        buf.write("\n\3\13\3\13\3\13\3\13\5\13\u012d\n\13\3\f\3\f\3\f\3\f")
        buf.write("\5\f\u0133\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u013a\n\r\3\16")
        buf.write("\3\16\3\16\5\16\u013f\n\16\3\16\3\16\7\16\u0143\n\16\f")
        buf.write("\16\16\16\u0146\13\16\3\17\3\17\5\17\u014a\n\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u015b\n\20\3\21\3\21\3\22\3\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u0166\n\23\3\23\5\23\u0169")
        buf.write("\n\23\3\24\3\24\3\24\5\24\u016e\n\24\3\25\3\25\6\25\u0172")
        buf.write("\n\25\r\25\16\25\u0173\3\25\3\25\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0190")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\5\27\u0197\n\27\3\27\5")
        buf.write("\27\u019a\n\27\3\30\3\30\3\30\5\30\u019f\n\30\3\31\3\31")
        buf.write("\6\31\u01a3\n\31\r\31\16\31\u01a4\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u01b5\n\32\3\33\3\33\3\33\3\33\3\33\5\33\u01bc\n\33\3")
        buf.write("\33\3\33\7\33\u01c0\n\33\f\33\16\33\u01c3\13\33\3\33\5")
        buf.write("\33\u01c6\n\33\3\34\3\34\3\34\3\34\7\34\u01cc\n\34\f\34")
        buf.write("\16\34\u01cf\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\5\35\u01d9\n\35\3\35\3\35\5\35\u01dd\n\35\3\35\3")
        buf.write("\35\7\35\u01e1\n\35\f\35\16\35\u01e4\13\35\3\35\5\35\u01e7")
        buf.write("\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\6\36\u01f5\n\36\r\36\16\36\u01f6\3\36\3\36")
        buf.write("\3\36\5\36\u01fc\n\36\3\36\3\36\7\36\u0200\n\36\f\36\16")
        buf.write("\36\u0203\13\36\3\36\5\36\u0206\n\36\3\37\3\37\3\37\3")
        buf.write("\37\5\37\u020c\n\37\3\37\5\37\u020f\n\37\3\37\3\37\3 ")
        buf.write("\3 \3 \3 \5 \u0217\n \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\5\"")
        buf.write("\u0222\n\"\3\"\3\"\3\"\5\"\u0227\n\"\5\"\u0229\n\"\3\"")
        buf.write("\5\"\u022c\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u0233\n\"\f\"\16")
        buf.write("\"\u0236\13\"\3\"\5\"\u0239\n\"\3#\3#\5#\u023d\n#\3#\3")
        buf.write("#\3#\5#\u0242\n#\5#\u0244\n#\3#\5#\u0247\n#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\7#\u0250\n#\f#\16#\u0253\13#\3$\3$\5$\u0257")
        buf.write("\n$\3%\3%\5%\u025b\n%\3&\3&\5&\u025f\n&\3\'\3\'\5\'\u0263")
        buf.write("\n\'\3(\3(\5(\u0267\n(\3)\3)\5)\u026b\n)\3*\3*\5*\u026f")
        buf.write("\n*\3+\3+\5+\u0273\n+\3,\3,\5,\u0277\n,\3-\3-\5-\u027b")
        buf.write("\n-\3.\3.\5.\u027f\n.\3/\3/\5/\u0283\n/\3\60\3\60\5\60")
        buf.write("\u0287\n\60\3\61\3\61\5\61\u028b\n\61\3\62\3\62\5\62\u028f")
        buf.write("\n\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67")
        buf.write("\3\67\5\67\u029c\n\67\38\38\38\58\u02a1\n8\39\39\69\u02a5")
        buf.write("\n9\r9\169\u02a6\3:\3:\3:\3;\3;\3;\5;\u02af\n;\3<\3<\3")
        buf.write("<\3<\5<\u02b5\n<\3<\3<\5<\u02b9\n<\3<\5<\u02bc\n<\3<\7")
        buf.write("<\u02bf\n<\f<\16<\u02c2\13<\3<\5<\u02c5\n<\3=\3=\3=\5")
        buf.write("=\u02ca\n=\3=\5=\u02cd\n=\3>\3>\3>\5>\u02d2\n>\3>\5>\u02d5")
        buf.write("\n>\3?\3?\3?\3?\5?\u02db\n?\3@\3@\3@\3@\3@\3@\3@\3@\7")
        buf.write("@\u02e5\n@\f@\16@\u02e8\13@\3@\3@\5@\u02ec\n@\3A\3A\3")
        buf.write("A\5A\u02f1\nA\3B\3B\3B\3B\3B\5B\u02f8\nB\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\7C\u0302\nC\fC\16C\u0305\13C\3C\5C\u0308\n")
        buf.write("C\3C\5C\u030b\nC\3D\3D\3D\5D\u0310\nD\3E\3E\3E\3E\5E\u0316")
        buf.write("\nE\3E\7E\u0319\nE\fE\16E\u031c\13E\3E\5E\u031f\nE\3F")
        buf.write("\3F\3F\3F\5F\u0325\nF\3F\7F\u0328\nF\fF\16F\u032b\13F")
        buf.write("\3F\5F\u032e\nF\3G\3G\3G\3G\5G\u0334\nG\3G\5G\u0337\n")
        buf.write("G\3G\7G\u033a\nG\fG\16G\u033d\13G\3G\5G\u0340\nG\3H\3")
        buf.write("H\3H\3I\3I\3I\3I\3I\3I\3I\3I\7I\u034d\nI\fI\16I\u0350")
        buf.write("\13I\3I\3I\5I\u0354\nI\3I\7I\u0357\nI\fI\16I\u035a\13")
        buf.write("I\3J\3J\3J\5J\u035f\nJ\3J\7J\u0362\nJ\fJ\16J\u0365\13")
        buf.write("J\3J\5J\u0368\nJ\3J\5J\u036b\nJ\3K\3K\3K\5K\u0370\nK\3")
        buf.write("L\3L\3L\3L\5L\u0376\nL\3L\5L\u0379\nL\3L\7L\u037c\nL\f")
        buf.write("L\16L\u037f\13L\3M\3M\3M\3M\3M\3M\5M\u0387\nM\3M\5M\u038a")
        buf.write("\nM\3M\5M\u038d\nM\3M\5M\u0390\nM\3N\3N\3N\5N\u0395\n")
        buf.write("N\3O\3O\3O\5O\u039a\nO\3P\3P\3P\3P\3Q\3Q\3R\3R\6R\u03a4")
        buf.write("\nR\rR\16R\u03a5\3S\3S\3T\3T\3T\5T\u03ad\nT\6T\u03af\n")
        buf.write("T\rT\16T\u03b0\3U\3U\3U\3U\7U\u03b7\nU\fU\16U\u03ba\13")
        buf.write("U\3V\3V\6V\u03be\nV\rV\16V\u03bf\3W\3W\3W\5W\u03c5\nW")
        buf.write("\3X\3X\3X\5X\u03ca\nX\3X\5X\u03cd\nX\3X\5X\u03d0\nX\3")
        buf.write("Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3\\\5\\\u03db\n\\\3]\3]\3]\3")
        buf.write("]\3]\7]\u03e2\n]\f]\16]\u03e5\13]\3]\5]\u03e8\n]\3]\5")
        buf.write("]\u03eb\n]\3^\3^\3^\3^\3^\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\5_\u03fc\n_\3_\3_\3_\5_\u0401\n_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\7_\u040e\n_\f_\16_\u0411\13_\3`\3`\3a\3")
        buf.write("a\3b\3b\3c\3c\3c\4\u00c9\u00d6\3\u00bcd\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\2\17\3\2DE\3\2GH\3\2\22\23\4")
        buf.write("\2\30\30\32\32\4\2\3\3RR\3\289\3\2;<\4\2\33\33??\4\2O")
        buf.write("PRR\3\2MN\6\2JK\\^abee\4\2NNZZ\4\2MMgg\2\u04a5\2\u00c9")
        buf.write("\3\2\2\2\4\u00de\3\2\2\2\6\u00e4\3\2\2\2\b\u00e7\3\2\2")
        buf.write("\2\n\u00f6\3\2\2\2\f\u00ff\3\2\2\2\16\u0114\3\2\2\2\20")
        buf.write("\u011e\3\2\2\2\22\u0122\3\2\2\2\24\u0128\3\2\2\2\26\u0132")
        buf.write("\3\2\2\2\30\u0139\3\2\2\2\32\u013b\3\2\2\2\34\u0147\3")
        buf.write("\2\2\2\36\u015a\3\2\2\2 \u015c\3\2\2\2\"\u015e\3\2\2\2")
        buf.write("$\u0160\3\2\2\2&\u016a\3\2\2\2(\u016f\3\2\2\2*\u018f\3")
        buf.write("\2\2\2,\u0191\3\2\2\2.\u019b\3\2\2\2\60\u01a0\3\2\2\2")
        buf.write("\62\u01b4\3\2\2\2\64\u01b6\3\2\2\2\66\u01c7\3\2\2\28\u01d0")
        buf.write("\3\2\2\2:\u01ea\3\2\2\2<\u0207\3\2\2\2>\u0212\3\2\2\2")
        buf.write("@\u021a\3\2\2\2B\u0221\3\2\2\2D\u023c\3\2\2\2F\u0254\3")
        buf.write("\2\2\2H\u0258\3\2\2\2J\u025c\3\2\2\2L\u0260\3\2\2\2N\u0264")
        buf.write("\3\2\2\2P\u0268\3\2\2\2R\u026c\3\2\2\2T\u0270\3\2\2\2")
        buf.write("V\u0274\3\2\2\2X\u0278\3\2\2\2Z\u027c\3\2\2\2\\\u0280")
        buf.write("\3\2\2\2^\u0284\3\2\2\2`\u0288\3\2\2\2b\u028c\3\2\2\2")
        buf.write("d\u0290\3\2\2\2f\u0292\3\2\2\2h\u0294\3\2\2\2j\u0296\3")
        buf.write("\2\2\2l\u0298\3\2\2\2n\u029d\3\2\2\2p\u02a4\3\2\2\2r\u02a8")
        buf.write("\3\2\2\2t\u02ab\3\2\2\2v\u02b0\3\2\2\2x\u02c6\3\2\2\2")
        buf.write("z\u02ce\3\2\2\2|\u02d6\3\2\2\2~\u02dc\3\2\2\2\u0080\u02ed")
        buf.write("\3\2\2\2\u0082\u02f2\3\2\2\2\u0084\u02f9\3\2\2\2\u0086")
        buf.write("\u030c\3\2\2\2\u0088\u0311\3\2\2\2\u008a\u0320\3\2\2\2")
        buf.write("\u008c\u032f\3\2\2\2\u008e\u0341\3\2\2\2\u0090\u0344\3")
        buf.write("\2\2\2\u0092\u035b\3\2\2\2\u0094\u036c\3\2\2\2\u0096\u0371")
        buf.write("\3\2\2\2\u0098\u0380\3\2\2\2\u009a\u0391\3\2\2\2\u009c")
        buf.write("\u0396\3\2\2\2\u009e\u039b\3\2\2\2\u00a0\u039f\3\2\2\2")
        buf.write("\u00a2\u03a3\3\2\2\2\u00a4\u03a7\3\2\2\2\u00a6\u03ae\3")
        buf.write("\2\2\2\u00a8\u03b2\3\2\2\2\u00aa\u03bd\3\2\2\2\u00ac\u03c1")
        buf.write("\3\2\2\2\u00ae\u03c6\3\2\2\2\u00b0\u03d1\3\2\2\2\u00b2")
        buf.write("\u03d3\3\2\2\2\u00b4\u03d5\3\2\2\2\u00b6\u03d7\3\2\2\2")
        buf.write("\u00b8\u03dc\3\2\2\2\u00ba\u03ec\3\2\2\2\u00bc\u0400\3")
        buf.write("\2\2\2\u00be\u0412\3\2\2\2\u00c0\u0414\3\2\2\2\u00c2\u0416")
        buf.write("\3\2\2\2\u00c4\u0418\3\2\2\2\u00c6\u00c8\13\2\2\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00ca\3\2\2\2")
        buf.write("\u00c9\u00c7\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00c9\3")
        buf.write("\2\2\2\u00cc\u00cd\7\24\2\2\u00cd\u00d0\5\4\3\2\u00ce")
        buf.write("\u00cf\7k\2\2\u00cf\u00d1\5\6\4\2\u00d0\u00ce\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d6\7")
        buf.write("\34\2\2\u00d3\u00d5\13\2\2\2\u00d4\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d8\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d7\u00d9\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da\7")
        buf.write("\2\2\3\u00da\3\3\2\2\2\u00db\u00dd\5*\26\2\u00dc\u00db")
        buf.write("\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de")
        buf.write("\u00df\3\2\2\2\u00df\5\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1")
        buf.write("\u00e3\5\62\32\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3\2\2")
        buf.write("\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\7\3\2")
        buf.write("\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00ea\5\f\7\2\u00e8\u00eb")
        buf.write("\5\16\b\2\u00e9\u00eb\5\20\t\2\u00ea\u00e8\3\2\2\2\u00ea")
        buf.write("\u00e9\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00f0\3\2\2\2")
        buf.write("\u00ec\u00ef\5\22\n\2\u00ed\u00ef\5\24\13\2\u00ee\u00ec")
        buf.write("\3\2\2\2\u00ee\u00ed\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0")
        buf.write("\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f4\3\2\2\2")
        buf.write("\u00f2\u00f0\3\2\2\2\u00f3\u00f5\5\u00a2R\2\u00f4\u00f3")
        buf.write("\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\t\3\2\2\2\u00f6\u00f7")
        buf.write("\5\30\r\2\u00f7\u00fb\5\26\f\2\u00f8\u00fa\5\u00ba^\2")
        buf.write("\u00f9\u00f8\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00f9\3")
        buf.write("\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\13\3\2\2\2\u00fd\u00fb")
        buf.write("\3\2\2\2\u00fe\u0100\5h\65\2\u00ff\u00fe\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100\u0102\3\2\2\2\u0101\u0103\5\30\r")
        buf.write("\2\u0102\u0101\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0104")
        buf.write("\3\2\2\2\u0104\u0108\5\26\f\2\u0105\u0107\5\u00ba^\2\u0106")
        buf.write("\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2")
        buf.write("\u0108\u0109\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3")
        buf.write("\2\2\2\u010b\u010d\5f\64\2\u010c\u010b\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\r\3\2\2\2\u010e\u0110\5\u00c4c\2\u010f")
        buf.write("\u0111\5f\64\2\u0110\u010f\3\2\2\2\u0110\u0111\3\2\2\2")
        buf.write("\u0111\u0112\3\2\2\2\u0112\u0113\5\f\7\2\u0113\u0115\3")
        buf.write("\2\2\2\u0114\u010e\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0114")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\17\3\2\2\2\u0118\u011a")
        buf.write("\5\u00c2b\2\u0119\u011b\5f\64\2\u011a\u0119\3\2\2\2\u011a")
        buf.write("\u011b\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\5\f\7\2")
        buf.write("\u011d\u011f\3\2\2\2\u011e\u0118\3\2\2\2\u011f\u0120\3")
        buf.write("\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\21")
        buf.write("\3\2\2\2\u0122\u0123\7\36\2\2\u0123\u0126\5\f\7\2\u0124")
        buf.write("\u0127\5\16\b\2\u0125\u0127\5\20\t\2\u0126\u0124\3\2\2")
        buf.write("\2\u0126\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\23\3")
        buf.write("\2\2\2\u0128\u0129\7!\2\2\u0129\u012c\5\f\7\2\u012a\u012d")
        buf.write("\5\16\b\2\u012b\u012d\5\20\t\2\u012c\u012a\3\2\2\2\u012c")
        buf.write("\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d\25\3\2\2\2\u012e")
        buf.write("\u0133\5\u00b4[\2\u012f\u0133\7O\2\2\u0130\u0133\7P\2")
        buf.write("\2\u0131\u0133\7Q\2\2\u0132\u012e\3\2\2\2\u0132\u012f")
        buf.write("\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0131\3\2\2\2\u0133")
        buf.write("\27\3\2\2\2\u0134\u013a\5\u00b4[\2\u0135\u013a\5\u00b2")
        buf.write("Z\2\u0136\u013a\7Q\2\2\u0137\u013a\7\26\2\2\u0138\u013a")
        buf.write("\7J\2\2\u0139\u0134\3\2\2\2\u0139\u0135\3\2\2\2\u0139")
        buf.write("\u0136\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u0138\3\2\2\2")
        buf.write("\u013a\31\3\2\2\2\u013b\u0144\5\b\5\2\u013c\u013e\5\36")
        buf.write("\20\2\u013d\u013f\5\u00b6\\\2\u013e\u013d\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\u0143\3\2\2\2\u0140\u0143\5\u00a2")
        buf.write("R\2\u0141\u0143\5\u00a6T\2\u0142\u013c\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0142\u0141\3\2\2\2\u0143\u0146\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\33\3\2\2\2\u0146")
        buf.write("\u0144\3\2\2\2\u0147\u0149\5\32\16\2\u0148\u014a\5t;\2")
        buf.write("\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a\35\3\2")
        buf.write("\2\2\u014b\u015b\5|?\2\u014c\u015b\5~@\2\u014d\u015b\5")
        buf.write("\u0080A\2\u014e\u015b\5\u0084C\2\u014f\u015b\5\u0086D")
        buf.write("\2\u0150\u015b\5\u0088E\2\u0151\u015b\5\u008aF\2\u0152")
        buf.write("\u015b\5\u008cG\2\u0153\u015b\5\u008eH\2\u0154\u015b\5")
        buf.write("\u0090I\2\u0155\u015b\5\u0094K\2\u0156\u015b\5\u00a2R")
        buf.write("\2\u0157\u015b\5\u00aaV\2\u0158\u015b\5\u00acW\2\u0159")
        buf.write("\u015b\5\u00aeX\2\u015a\u014b\3\2\2\2\u015a\u014c\3\2")
        buf.write("\2\2\u015a\u014d\3\2\2\2\u015a\u014e\3\2\2\2\u015a\u014f")
        buf.write("\3\2\2\2\u015a\u0150\3\2\2\2\u015a\u0151\3\2\2\2\u015a")
        buf.write("\u0152\3\2\2\2\u015a\u0153\3\2\2\2\u015a\u0154\3\2\2\2")
        buf.write("\u015a\u0155\3\2\2\2\u015a\u0156\3\2\2\2\u015a\u0157\3")
        buf.write("\2\2\2\u015a\u0158\3\2\2\2\u015a\u0159\3\2\2\2\u015b\37")
        buf.write("\3\2\2\2\u015c\u015d\t\2\2\2\u015d!\3\2\2\2\u015e\u015f")
        buf.write("\t\3\2\2\u015f#\3\2\2\2\u0160\u0161\7I\2\2\u0161\u0162")
        buf.write("\5\u00bc_\2\u0162\u0165\7L\2\2\u0163\u0166\5*\26\2\u0164")
        buf.write("\u0166\5(\25\2\u0165\u0163\3\2\2\2\u0165\u0164\3\2\2\2")
        buf.write("\u0166\u0168\3\2\2\2\u0167\u0169\5&\24\2\u0168\u0167\3")
        buf.write("\2\2\2\u0168\u0169\3\2\2\2\u0169%\3\2\2\2\u016a\u016d")
        buf.write("\7F\2\2\u016b\u016e\5*\26\2\u016c\u016e\5(\25\2\u016d")
        buf.write("\u016b\3\2\2\2\u016d\u016c\3\2\2\2\u016e\'\3\2\2\2\u016f")
        buf.write("\u0171\5 \21\2\u0170\u0172\5*\26\2\u0171\u0170\3\2\2\2")
        buf.write("\u0172\u0173\3\2\2\2\u0173\u0171\3\2\2\2\u0173\u0174\3")
        buf.write("\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176\5\"\22\2\u0176")
        buf.write(")\3\2\2\2\u0177\u0190\5B\"\2\u0178\u0190\5$\23\2\u0179")
        buf.write("\u0190\5l\67\2\u017a\u0190\5F$\2\u017b\u0190\5H%\2\u017c")
        buf.write("\u0190\5J&\2\u017d\u0190\5L\'\2\u017e\u0190\5N(\2\u017f")
        buf.write("\u0190\5P)\2\u0180\u0190\5R*\2\u0181\u0190\5T+\2\u0182")
        buf.write("\u0190\5V,\2\u0183\u0190\5X-\2\u0184\u0190\5Z.\2\u0185")
        buf.write("\u0190\5\\/\2\u0186\u0190\5^\60\2\u0187\u0190\5`\61\2")
        buf.write("\u0188\u0190\5\u0098M\2\u0189\u0190\5\u00a0Q\2\u018a\u0190")
        buf.write("\5\u00a2R\2\u018b\u0190\5\u00a6T\2\u018c\u0190\5\u00a8")
        buf.write("U\2\u018d\u0190\5\u00b0Y\2\u018e\u0190\5b\62\2\u018f\u0177")
        buf.write("\3\2\2\2\u018f\u0178\3\2\2\2\u018f\u0179\3\2\2\2\u018f")
        buf.write("\u017a\3\2\2\2\u018f\u017b\3\2\2\2\u018f\u017c\3\2\2\2")
        buf.write("\u018f\u017d\3\2\2\2\u018f\u017e\3\2\2\2\u018f\u017f\3")
        buf.write("\2\2\2\u018f\u0180\3\2\2\2\u018f\u0181\3\2\2\2\u018f\u0182")
        buf.write("\3\2\2\2\u018f\u0183\3\2\2\2\u018f\u0184\3\2\2\2\u018f")
        buf.write("\u0185\3\2\2\2\u018f\u0186\3\2\2\2\u018f\u0187\3\2\2\2")
        buf.write("\u018f\u0188\3\2\2\2\u018f\u0189\3\2\2\2\u018f\u018a\3")
        buf.write("\2\2\2\u018f\u018b\3\2\2\2\u018f\u018c\3\2\2\2\u018f\u018d")
        buf.write("\3\2\2\2\u018f\u018e\3\2\2\2\u0190+\3\2\2\2\u0191\u0192")
        buf.write("\7I\2\2\u0192\u0193\5\u00bc_\2\u0193\u0196\7L\2\2\u0194")
        buf.write("\u0197\5\62\32\2\u0195\u0197\5\60\31\2\u0196\u0194\3\2")
        buf.write("\2\2\u0196\u0195\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u019a")
        buf.write("\5.\30\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a")
        buf.write("-\3\2\2\2\u019b\u019e\7F\2\2\u019c\u019f\5\62\32\2\u019d")
        buf.write("\u019f\5\60\31\2\u019e\u019c\3\2\2\2\u019e\u019d\3\2\2")
        buf.write("\2\u019f/\3\2\2\2\u01a0\u01a2\5 \21\2\u01a1\u01a3\5\62")
        buf.write("\32\2\u01a2\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a2")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6")
        buf.write("\u01a7\5\"\22\2\u01a7\61\3\2\2\2\u01a8\u01b5\5<\37\2\u01a9")
        buf.write("\u01b5\5> \2\u01aa\u01b5\5D#\2\u01ab\u01b5\5,\27\2\u01ac")
        buf.write("\u01b5\5\34\17\2\u01ad\u01b5\5l\67\2\u01ae\u01b5\5\64")
        buf.write("\33\2\u01af\u01b5\5\u0098M\2\u01b0\u01b5\5\u00a2R\2\u01b1")
        buf.write("\u01b5\5\u00a6T\2\u01b2\u01b5\5\u00a8U\2\u01b3\u01b5\5")
        buf.write(":\36\2\u01b4\u01a8\3\2\2\2\u01b4\u01a9\3\2\2\2\u01b4\u01aa")
        buf.write("\3\2\2\2\u01b4\u01ab\3\2\2\2\u01b4\u01ac\3\2\2\2\u01b4")
        buf.write("\u01ad\3\2\2\2\u01b4\u01ae\3\2\2\2\u01b4\u01af\3\2\2\2")
        buf.write("\u01b4\u01b0\3\2\2\2\u01b4\u01b1\3\2\2\2\u01b4\u01b2\3")
        buf.write("\2\2\2\u01b4\u01b3\3\2\2\2\u01b5\63\3\2\2\2\u01b6\u01b7")
        buf.write("\7O\2\2\u01b7\u01b8\7\37\2\2\u01b8\u01c1\5\66\34\2\u01b9")
        buf.write("\u01bb\5\36\20\2\u01ba\u01bc\5\u00b6\\\2\u01bb\u01ba\3")
        buf.write("\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c0\3\2\2\2\u01bd\u01c0")
        buf.write("\5\u00a2R\2\u01be\u01c0\5\u00a6T\2\u01bf\u01b9\3\2\2\2")
        buf.write("\u01bf\u01bd\3\2\2\2\u01bf\u01be\3\2\2\2\u01c0\u01c3\3")
        buf.write("\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c5")
        buf.write("\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c6\5t;\2\u01c5\u01c4")
        buf.write("\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\65\3\2\2\2\u01c7\u01cd")
        buf.write("\58\35\2\u01c8\u01c9\5\u00be`\2\u01c9\u01ca\58\35\2\u01ca")
        buf.write("\u01cc\3\2\2\2\u01cb\u01c8\3\2\2\2\u01cc\u01cf\3\2\2\2")
        buf.write("\u01cd\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\67\3\2")
        buf.write("\2\2\u01cf\u01cd\3\2\2\2\u01d0\u01d8\7c\2\2\u01d1\u01d9")
        buf.write("\5<\37\2\u01d2\u01d9\5> \2\u01d3\u01d9\5D#\2\u01d4\u01d9")
        buf.write("\5\34\17\2\u01d5\u01d9\5\64\33\2\u01d6\u01d9\5\u0098M")
        buf.write("\2\u01d7\u01d9\5\u00a8U\2\u01d8\u01d1\3\2\2\2\u01d8\u01d2")
        buf.write("\3\2\2\2\u01d8\u01d3\3\2\2\2\u01d8\u01d4\3\2\2\2\u01d8")
        buf.write("\u01d5\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2")
        buf.write("\u01d9\u01e2\3\2\2\2\u01da\u01dc\5\36\20\2\u01db\u01dd")
        buf.write("\5\u00b6\\\2\u01dc\u01db\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd")
        buf.write("\u01e1\3\2\2\2\u01de\u01e1\5\u00a2R\2\u01df\u01e1\5\u00a6")
        buf.write("T\2\u01e0\u01da\3\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01df")
        buf.write("\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2")
        buf.write("\u01e3\3\2\2\2\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2")
        buf.write("\u01e5\u01e7\5t;\2\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2")
        buf.write("\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9\7i\2\2\u01e99\3\2")
        buf.write("\2\2\u01ea\u01f4\7\25\2\2\u01eb\u01f5\5,\27\2\u01ec\u01f5")
        buf.write("\5<\37\2\u01ed\u01f5\5> \2\u01ee\u01f5\5D#\2\u01ef\u01f5")
        buf.write("\5l\67\2\u01f0\u01f5\5\34\17\2\u01f1\u01f5\5\64\33\2\u01f2")
        buf.write("\u01f5\5\u0098M\2\u01f3\u01f5\5\u00a8U\2\u01f4\u01eb\3")
        buf.write("\2\2\2\u01f4\u01ec\3\2\2\2\u01f4\u01ed\3\2\2\2\u01f4\u01ee")
        buf.write("\3\2\2\2\u01f4\u01ef\3\2\2\2\u01f4\u01f0\3\2\2\2\u01f4")
        buf.write("\u01f1\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f3\3\2\2\2")
        buf.write("\u01f5\u01f6\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3")
        buf.write("\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u0201\7\35\2\2\u01f9")
        buf.write("\u01fb\5\36\20\2\u01fa\u01fc\5\u00b6\\\2\u01fb\u01fa\3")
        buf.write("\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u0200\3\2\2\2\u01fd\u0200")
        buf.write("\5\u00a2R\2\u01fe\u0200\5\u00a6T\2\u01ff\u01f9\3\2\2\2")
        buf.write("\u01ff\u01fd\3\2\2\2\u01ff\u01fe\3\2\2\2\u0200\u0203\3")
        buf.write("\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0205")
        buf.write("\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0206\5t;\2\u0205\u0204")
        buf.write("\3\2\2\2\u0205\u0206\3\2\2\2\u0206;\3\2\2\2\u0207\u0208")
        buf.write("\7O\2\2\u0208\u0209\7\26\2\2\u0209\u020b\5\u00bc_\2\u020a")
        buf.write("\u020c\5\u00aaV\2\u020b\u020a\3\2\2\2\u020b\u020c\3\2")
        buf.write("\2\2\u020c\u020e\3\2\2\2\u020d\u020f\5\u00a2R\2\u020e")
        buf.write("\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2")
        buf.write("\u0210\u0211\5t;\2\u0211=\3\2\2\2\u0212\u0213\7O\2\2\u0213")
        buf.write("\u0214\7\27\2\2\u0214\u0216\5\u00bc_\2\u0215\u0217\5\u00a2")
        buf.write("R\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\u0219\5t;\2\u0219?\3\2\2\2\u021a\u021b")
        buf.write("\7c\2\2\u021b\u021c\5d\63\2\u021c\u021d\7O\2\2\u021d\u021e")
        buf.write("\7i\2\2\u021eA\3\2\2\2\u021f\u0222\5\u009aN\2\u0220\u0222")
        buf.write("\5\u009cO\2\u0221\u021f\3\2\2\2\u0221\u0220\3\2\2\2\u0222")
        buf.write("\u0228\3\2\2\2\u0223\u0226\5\u00be`\2\u0224\u0227\5\u009a")
        buf.write("N\2\u0225\u0227\5\u009cO\2\u0226\u0224\3\2\2\2\u0226\u0225")
        buf.write("\3\2\2\2\u0227\u0229\3\2\2\2\u0228\u0223\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229\u0234\3\2\2\2\u022a\u022c\7J\2\2")
        buf.write("\u022b\u022a\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022d\3")
        buf.write("\2\2\2\u022d\u0233\5\u00a4S\2\u022e\u0233\5n8\2\u022f")
        buf.write("\u0233\5\u00a2R\2\u0230\u0233\5p9\2\u0231\u0233\5\u00b6")
        buf.write("\\\2\u0232\u022b\3\2\2\2\u0232\u022e\3\2\2\2\u0232\u022f")
        buf.write("\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0231\3\2\2\2\u0233")
        buf.write("\u0236\3\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2")
        buf.write("\u0235\u0238\3\2\2\2\u0236\u0234\3\2\2\2\u0237\u0239\5")
        buf.write("r:\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239C\3")
        buf.write("\2\2\2\u023a\u023d\5\u009aN\2\u023b\u023d\5\u009cO\2\u023c")
        buf.write("\u023a\3\2\2\2\u023c\u023b\3\2\2\2\u023d\u0243\3\2\2\2")
        buf.write("\u023e\u0241\5\u00be`\2\u023f\u0242\5\u009aN\2\u0240\u0242")
        buf.write("\5\u009cO\2\u0241\u023f\3\2\2\2\u0241\u0240\3\2\2\2\u0242")
        buf.write("\u0244\3\2\2\2\u0243\u023e\3\2\2\2\u0243\u0244\3\2\2\2")
        buf.write("\u0244\u0246\3\2\2\2\u0245\u0247\5\32\16\2\u0246\u0245")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0251\3\2\2\2\u0248")
        buf.write("\u0250\5n8\2\u0249\u0250\5\u00a2R\2\u024a\u0250\5\u00a6")
        buf.write("T\2\u024b\u0250\5\u00aeX\2\u024c\u0250\5\u00aaV\2\u024d")
        buf.write("\u0250\5t;\2\u024e\u0250\5\u00b6\\\2\u024f\u0248\3\2\2")
        buf.write("\2\u024f\u0249\3\2\2\2\u024f\u024a\3\2\2\2\u024f\u024b")
        buf.write("\3\2\2\2\u024f\u024c\3\2\2\2\u024f\u024d\3\2\2\2\u024f")
        buf.write("\u024e\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2")
        buf.write("\u0251\u0252\3\2\2\2\u0252E\3\2\2\2\u0253\u0251\3\2\2")
        buf.write("\2\u0254\u0256\5v<\2\u0255\u0257\5r:\2\u0256\u0255\3\2")
        buf.write("\2\2\u0256\u0257\3\2\2\2\u0257G\3\2\2\2\u0258\u025a\5")
        buf.write("x=\2\u0259\u025b\5r:\2\u025a\u0259\3\2\2\2\u025a\u025b")
        buf.write("\3\2\2\2\u025bI\3\2\2\2\u025c\u025e\5z>\2\u025d\u025f")
        buf.write("\5r:\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025fK")
        buf.write("\3\2\2\2\u0260\u0262\5|?\2\u0261\u0263\5r:\2\u0262\u0261")
        buf.write("\3\2\2\2\u0262\u0263\3\2\2\2\u0263M\3\2\2\2\u0264\u0266")
        buf.write("\5~@\2\u0265\u0267\5r:\2\u0266\u0265\3\2\2\2\u0266\u0267")
        buf.write("\3\2\2\2\u0267O\3\2\2\2\u0268\u026a\5\u0082B\2\u0269\u026b")
        buf.write("\5r:\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026bQ")
        buf.write("\3\2\2\2\u026c\u026e\5\u0084C\2\u026d\u026f\5r:\2\u026e")
        buf.write("\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026fS\3\2\2\2\u0270")
        buf.write("\u0272\5\u0088E\2\u0271\u0273\5r:\2\u0272\u0271\3\2\2")
        buf.write("\2\u0272\u0273\3\2\2\2\u0273U\3\2\2\2\u0274\u0276\5\u008a")
        buf.write("F\2\u0275\u0277\5r:\2\u0276\u0275\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277W\3\2\2\2\u0278\u027a\5\u008cG\2\u0279\u027b")
        buf.write("\5r:\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027bY")
        buf.write("\3\2\2\2\u027c\u027e\5\u008eH\2\u027d\u027f\5r:\2\u027e")
        buf.write("\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f[\3\2\2\2\u0280")
        buf.write("\u0282\5\u0090I\2\u0281\u0283\5r:\2\u0282\u0281\3\2\2")
        buf.write("\2\u0282\u0283\3\2\2\2\u0283]\3\2\2\2\u0284\u0286\5\u0092")
        buf.write("J\2\u0285\u0287\5r:\2\u0286\u0285\3\2\2\2\u0286\u0287")
        buf.write("\3\2\2\2\u0287_\3\2\2\2\u0288\u028a\5\u0096L\2\u0289\u028b")
        buf.write("\5r:\2\u028a\u0289\3\2\2\2\u028a\u028b\3\2\2\2\u028ba")
        buf.write("\3\2\2\2\u028c\u028e\5\u00aeX\2\u028d\u028f\5r:\2\u028e")
        buf.write("\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028fc\3\2\2\2\u0290")
        buf.write("\u0291\t\4\2\2\u0291e\3\2\2\2\u0292\u0293\7j\2\2\u0293")
        buf.write("g\3\2\2\2\u0294\u0295\7d\2\2\u0295i\3\2\2\2\u0296\u0297")
        buf.write("\t\5\2\2\u0297k\3\2\2\2\u0298\u0299\7\31\2\2\u0299\u029b")
        buf.write("\5\u00bc_\2\u029a\u029c\7k\2\2\u029b\u029a\3\2\2\2\u029b")
        buf.write("\u029c\3\2\2\2\u029cm\3\2\2\2\u029d\u029e\7\b\2\2\u029e")
        buf.write("\u02a0\5\u00b2Z\2\u029f\u02a1\7k\2\2\u02a0\u029f\3\2\2")
        buf.write("\2\u02a0\u02a1\3\2\2\2\u02a1o\3\2\2\2\u02a2\u02a3\7 \2")
        buf.write("\2\u02a3\u02a5\5\u009eP\2\u02a4\u02a2\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("q\3\2\2\2\u02a8\u02a9\7\"\2\2\u02a9\u02aa\5\u00b2Z\2\u02aa")
        buf.write("s\3\2\2\2\u02ab\u02ac\7\"\2\2\u02ac\u02ae\5\u00b2Z\2\u02ad")
        buf.write("\u02af\7k\2\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02afu\3\2\2\2\u02b0\u02b1\7#\2\2\u02b1\u02b4\7O\2\2")
        buf.write("\u02b2\u02b3\7\66\2\2\u02b3\u02b5\7O\2\2\u02b4\u02b2\3")
        buf.write("\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8")
        buf.write("\5j\66\2\u02b7\u02b9\5\b\5\2\u02b8\u02b7\3\2\2\2\u02b8")
        buf.write("\u02b9\3\2\2\2\u02b9\u02bb\3\2\2\2\u02ba\u02bc\5\u00b6")
        buf.write("\\\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02c0")
        buf.write("\3\2\2\2\u02bd\u02bf\5n8\2\u02be\u02bd\3\2\2\2\u02bf\u02c2")
        buf.write("\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1")
        buf.write("\u02c4\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c5\5\u00a2")
        buf.write("R\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5w\3\2")
        buf.write("\2\2\u02c6\u02c7\7$\2\2\u02c7\u02c9\7O\2\2\u02c8\u02ca")
        buf.write("\5\b\5\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca")
        buf.write("\u02cc\3\2\2\2\u02cb\u02cd\5\u00b6\\\2\u02cc\u02cb\3\2")
        buf.write("\2\2\u02cc\u02cd\3\2\2\2\u02cdy\3\2\2\2\u02ce\u02cf\7")
        buf.write("%\2\2\u02cf\u02d1\7O\2\2\u02d0\u02d2\5\b\5\2\u02d1\u02d0")
        buf.write("\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d4\3\2\2\2\u02d3")
        buf.write("\u02d5\5\u00b6\\\2\u02d4\u02d3\3\2\2\2\u02d4\u02d5\3\2")
        buf.write("\2\2\u02d5{\3\2\2\2\u02d6\u02d7\7&\2\2\u02d7\u02d8\7O")
        buf.write("\2\2\u02d8\u02da\5j\66\2\u02d9\u02db\5\u00b6\\\2\u02da")
        buf.write("\u02d9\3\2\2\2\u02da\u02db\3\2\2\2\u02db}\3\2\2\2\u02dc")
        buf.write("\u02dd\7\'\2\2\u02dd\u02de\7O\2\2\u02de\u02df\5j\66\2")
        buf.write("\u02df\u02e0\7c\2\2\u02e0\u02e6\7R\2\2\u02e1\u02e2\5\u00c2")
        buf.write("b\2\u02e2\u02e3\7R\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02e1")
        buf.write("\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6")
        buf.write("\u02e7\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02e6\3\2\2\2")
        buf.write("\u02e9\u02eb\7i\2\2\u02ea\u02ec\5\u00b6\\\2\u02eb\u02ea")
        buf.write("\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\177\3\2\2\2\u02ed\u02ee")
        buf.write("\7(\2\2\u02ee\u02f0\7O\2\2\u02ef\u02f1\5\u00b6\\\2\u02f0")
        buf.write("\u02ef\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u0081\3\2\2\2")
        buf.write("\u02f2\u02f3\7)\2\2\u02f3\u02f4\7O\2\2\u02f4\u02f5\5j")
        buf.write("\66\2\u02f5\u02f7\5\b\5\2\u02f6\u02f8\5\u00b6\\\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u0083\3\2\2\2")
        buf.write("\u02f9\u02fa\7*\2\2\u02fa\u02fb\7O\2\2\u02fb\u0307\5j")
        buf.write("\66\2\u02fc\u02fd\7c\2\2\u02fd\u0303\7R\2\2\u02fe\u02ff")
        buf.write("\5\u00c2b\2\u02ff\u0300\7R\2\2\u0300\u0302\3\2\2\2\u0301")
        buf.write("\u02fe\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3\2\2\2")
        buf.write("\u0303\u0304\3\2\2\2\u0304\u0306\3\2\2\2\u0305\u0303\3")
        buf.write("\2\2\2\u0306\u0308\7i\2\2\u0307\u02fc\3\2\2\2\u0307\u0308")
        buf.write("\3\2\2\2\u0308\u030a\3\2\2\2\u0309\u030b\5\u00b6\\\2\u030a")
        buf.write("\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u0085\3\2\2\2")
        buf.write("\u030c\u030d\7+\2\2\u030d\u030f\7O\2\2\u030e\u0310\5\u00b6")
        buf.write("\\\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0087")
        buf.write("\3\2\2\2\u0311\u0312\7.\2\2\u0312\u0313\7O\2\2\u0313\u0315")
        buf.write("\5\b\5\2\u0314\u0316\5\u00b6\\\2\u0315\u0314\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316\u031a\3\2\2\2\u0317\u0319\5n8\2\u0318")
        buf.write("\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031a\u031b\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3")
        buf.write("\2\2\2\u031d\u031f\5\u00a2R\2\u031e\u031d\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0089\3\2\2\2\u0320\u0321\7/\2\2")
        buf.write("\u0321\u0322\7O\2\2\u0322\u0324\5\b\5\2\u0323\u0325\5")
        buf.write("\u00b6\\\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0329\3\2\2\2\u0326\u0328\5n8\2\u0327\u0326\3\2\2\2\u0328")
        buf.write("\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u032d\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032e\5")
        buf.write("\u00a2R\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e")
        buf.write("\u008b\3\2\2\2\u032f\u0330\7,\2\2\u0330\u0333\7O\2\2\u0331")
        buf.write("\u0334\5\b\5\2\u0332\u0334\5\u00bc_\2\u0333\u0331\3\2")
        buf.write("\2\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336")
        buf.write("\3\2\2\2\u0335\u0337\5\u00b6\\\2\u0336\u0335\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u033b\3\2\2\2\u0338\u033a\5n8\2\u0339")
        buf.write("\u0338\3\2\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2")
        buf.write("\u033b\u033c\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033b\3")
        buf.write("\2\2\2\u033e\u0340\5\u00a2R\2\u033f\u033e\3\2\2\2\u033f")
        buf.write("\u0340\3\2\2\2\u0340\u008d\3\2\2\2\u0341\u0342\7-\2\2")
        buf.write("\u0342\u0343\7O\2\2\u0343\u008f\3\2\2\2\u0344\u0345\7")
        buf.write("\60\2\2\u0345\u0346\7O\2\2\u0346\u0347\5j\66\2\u0347\u0348")
        buf.write("\7c\2\2\u0348\u034e\7R\2\2\u0349\u034a\5\u00c2b\2\u034a")
        buf.write("\u034b\7R\2\2\u034b\u034d\3\2\2\2\u034c\u0349\3\2\2\2")
        buf.write("\u034d\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3")
        buf.write("\2\2\2\u034f\u0351\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0353")
        buf.write("\7i\2\2\u0352\u0354\5\u00b6\\\2\u0353\u0352\3\2\2\2\u0353")
        buf.write("\u0354\3\2\2\2\u0354\u0358\3\2\2\2\u0355\u0357\5n8\2\u0356")
        buf.write("\u0355\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356\3\2\2\2")
        buf.write("\u0358\u0359\3\2\2\2\u0359\u0091\3\2\2\2\u035a\u0358\3")
        buf.write("\2\2\2\u035b\u035e\7\61\2\2\u035c\u035f\5\u009aN\2\u035d")
        buf.write("\u035f\5\u009cO\2\u035e\u035c\3\2\2\2\u035e\u035d\3\2")
        buf.write("\2\2\u035f\u0363\3\2\2\2\u0360\u0362\5n8\2\u0361\u0360")
        buf.write("\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2")
        buf.write("\u0366\u0368\5\u00a2R\2\u0367\u0366\3\2\2\2\u0367\u0368")
        buf.write("\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u036b\5\u00b6\\\2\u036a")
        buf.write("\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0093\3\2\2\2")
        buf.write("\u036c\u036d\7\62\2\2\u036d\u036f\7O\2\2\u036e\u0370\5")
        buf.write("\u00b6\\\2\u036f\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u0095\3\2\2\2\u0371\u0372\7\63\2\2\u0372\u0373\7O\2\2")
        buf.write("\u0373\u0375\5j\66\2\u0374\u0376\5\b\5\2\u0375\u0374\3")
        buf.write("\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0379")
        buf.write("\5\u00b6\\\2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379")
        buf.write("\u037d\3\2\2\2\u037a\u037c\5n8\2\u037b\u037a\3\2\2\2\u037c")
        buf.write("\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2")
        buf.write("\u037e\u0097\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0381\7")
        buf.write("O\2\2\u0381\u0386\7\64\2\2\u0382\u0383\7c\2\2\u0383\u0384")
        buf.write("\5\u00bc_\2\u0384\u0385\7i\2\2\u0385\u0387\3\2\2\2\u0386")
        buf.write("\u0382\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2")
        buf.write("\u0388\u038a\5\u00a2R\2\u0389\u0388\3\2\2\2\u0389\u038a")
        buf.write("\3\2\2\2\u038a\u038c\3\2\2\2\u038b\u038d\5\u00aaV\2\u038c")
        buf.write("\u038b\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f\3\2\2\2")
        buf.write("\u038e\u0390\5t;\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2")
        buf.write("\2\2\u0390\u0099\3\2\2\2\u0391\u0392\7O\2\2\u0392\u0394")
        buf.write("\7\30\2\2\u0393\u0395\5@!\2\u0394\u0393\3\2\2\2\u0394")
        buf.write("\u0395\3\2\2\2\u0395\u009b\3\2\2\2\u0396\u0397\7O\2\2")
        buf.write("\u0397\u0399\7\32\2\2\u0398\u039a\5@!\2\u0399\u0398\3")
        buf.write("\2\2\2\u0399\u039a\3\2\2\2\u039a\u009d\3\2\2\2\u039b\u039c")
        buf.write("\7R\2\2\u039c\u039d\7\\\2\2\u039d\u039e\t\6\2\2\u039e")
        buf.write("\u009f\3\2\2\2\u039f\u03a0\7\65\2\2\u03a0\u00a1\3\2\2")
        buf.write("\2\u03a1\u03a2\7\67\2\2\u03a2\u03a4\7\3\2\2\u03a3\u03a1")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a5")
        buf.write("\u03a6\3\2\2\2\u03a6\u00a3\3\2\2\2\u03a7\u03a8\t\7\2\2")
        buf.write("\u03a8\u00a5\3\2\2\2\u03a9\u03aa\7:\2\2\u03aa\u03ac\5")
        buf.write("\u00b2Z\2\u03ab\u03ad\7k\2\2\u03ac\u03ab\3\2\2\2\u03ac")
        buf.write("\u03ad\3\2\2\2\u03ad\u03af\3\2\2\2\u03ae\u03a9\3\2\2\2")
        buf.write("\u03af\u03b0\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3")
        buf.write("\2\2\2\u03b1\u00a7\3\2\2\2\u03b2\u03b8\t\b\2\2\u03b3\u03b7")
        buf.write("\5\u00a2R\2\u03b4\u03b7\5\u00aaV\2\u03b5\u03b7\5t;\2\u03b6")
        buf.write("\u03b3\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b5\3\2\2\2")
        buf.write("\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3")
        buf.write("\2\2\2\u03b9\u00a9\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc")
        buf.write("\7=\2\2\u03bc\u03be\5\u009eP\2\u03bd\u03bb\3\2\2\2\u03be")
        buf.write("\u03bf\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2")
        buf.write("\u03c0\u00ab\3\2\2\2\u03c1\u03c2\7A\2\2\u03c2\u03c4\5")
        buf.write("\u00bc_\2\u03c3\u03c5\5\u00b6\\\2\u03c4\u03c3\3\2\2\2")
        buf.write("\u03c4\u03c5\3\2\2\2\u03c5\u00ad\3\2\2\2\u03c6\u03c9\t")
        buf.write("\t\2\2\u03c7\u03c8\7O\2\2\u03c8\u03ca\5j\66\2\u03c9\u03c7")
        buf.write("\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb")
        buf.write("\u03cd\5\u00bc_\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2")
        buf.write("\2\2\u03cd\u03cf\3\2\2\2\u03ce\u03d0\5\u00b6\\\2\u03cf")
        buf.write("\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u00af\3\2\2\2")
        buf.write("\u03d1\u03d2\7>\2\2\u03d2\u00b1\3\2\2\2\u03d3\u03d4\7")
        buf.write("\3\2\2\u03d4\u00b3\3\2\2\2\u03d5\u03d6\7R\2\2\u03d6\u00b5")
        buf.write("\3\2\2\2\u03d7\u03da\7@\2\2\u03d8\u03d9\7\\\2\2\u03d9")
        buf.write("\u03db\t\n\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2")
        buf.write("\u03db\u00b7\3\2\2\2\u03dc\u03dd\7B\2\2\u03dd\u03de\7")
        buf.write("O\2\2\u03de\u03df\5j\66\2\u03df\u03e3\5\b\5\2\u03e0\u03e2")
        buf.write("\5n8\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e6\u03e8\5\u00a2R\2\u03e7\u03e6\3\2")
        buf.write("\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03eb")
        buf.write("\5t;\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u00b9")
        buf.write("\3\2\2\2\u03ec\u03ed\7c\2\2\u03ed\u03ee\7C\2\2\u03ee\u03ef")
        buf.write("\5\u00bc_\2\u03ef\u03f0\7i\2\2\u03f0\u00bb\3\2\2\2\u03f1")
        buf.write("\u03f2\b_\1\2\u03f2\u0401\5\n\6\2\u03f3\u0401\5\30\r\2")
        buf.write("\u03f4\u0401\7O\2\2\u03f5\u0401\7h\2\2\u03f6\u0401\7R")
        buf.write("\2\2\u03f7\u0401\5\u00b2Z\2\u03f8\u0401\7P\2\2\u03f9\u03fb")
        buf.write("\7c\2\2\u03fa\u03fc\7\64\2\2\u03fb\u03fa\3\2\2\2\u03fb")
        buf.write("\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\5\u00bc")
        buf.write("_\2\u03fe\u03ff\7i\2\2\u03ff\u0401\3\2\2\2\u0400\u03f1")
        buf.write("\3\2\2\2\u0400\u03f3\3\2\2\2\u0400\u03f4\3\2\2\2\u0400")
        buf.write("\u03f5\3\2\2\2\u0400\u03f6\3\2\2\2\u0400\u03f7\3\2\2\2")
        buf.write("\u0400\u03f8\3\2\2\2\u0400\u03f9\3\2\2\2\u0401\u040f\3")
        buf.write("\2\2\2\u0402\u0403\f\r\2\2\u0403\u0404\5\u00c0a\2\u0404")
        buf.write("\u0405\5\u00bc_\16\u0405\u040e\3\2\2\2\u0406\u0407\f\f")
        buf.write("\2\2\u0407\u0408\5\u00be`\2\u0408\u0409\5\u00bc_\r\u0409")
        buf.write("\u040e\3\2\2\2\u040a\u040b\f\13\2\2\u040b\u040c\7Z\2\2")
        buf.write("\u040c\u040e\5\u00bc_\f\u040d\u0402\3\2\2\2\u040d\u0406")
        buf.write("\3\2\2\2\u040d\u040a\3\2\2\2\u040e\u0411\3\2\2\2\u040f")
        buf.write("\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u00bd\3\2\2\2")
        buf.write("\u0411\u040f\3\2\2\2\u0412\u0413\t\13\2\2\u0413\u00bf")
        buf.write("\3\2\2\2\u0414\u0415\t\f\2\2\u0415\u00c1\3\2\2\2\u0416")
        buf.write("\u0417\t\r\2\2\u0417\u00c3\3\2\2\2\u0418\u0419\t\16\2")
        buf.write("\2\u0419\u00c5\3\2\2\2\u0099\u00c9\u00d0\u00d6\u00de\u00e4")
        buf.write("\u00ea\u00ee\u00f0\u00f4\u00fb\u00ff\u0102\u0108\u010c")
        buf.write("\u0110\u0116\u011a\u0120\u0126\u012c\u0132\u0139\u013e")
        buf.write("\u0142\u0144\u0149\u015a\u0165\u0168\u016d\u0173\u018f")
        buf.write("\u0196\u0199\u019e\u01a4\u01b4\u01bb\u01bf\u01c1\u01c5")
        buf.write("\u01cd\u01d8\u01dc\u01e0\u01e2\u01e6\u01f4\u01f6\u01fb")
        buf.write("\u01ff\u0201\u0205\u020b\u020e\u0216\u0221\u0226\u0228")
        buf.write("\u022b\u0232\u0234\u0238\u023c\u0241\u0243\u0246\u024f")
        buf.write("\u0251\u0256\u025a\u025e\u0262\u0266\u026a\u026e\u0272")
        buf.write("\u0276\u027a\u027e\u0282\u0286\u028a\u028e\u029b\u02a0")
        buf.write("\u02a6\u02ae\u02b4\u02b8\u02bb\u02c0\u02c4\u02c9\u02cc")
        buf.write("\u02d1\u02d4\u02da\u02e6\u02eb\u02f0\u02f7\u0303\u0307")
        buf.write("\u030a\u030f\u0315\u031a\u031e\u0324\u0329\u032d\u0333")
        buf.write("\u0336\u033b\u033f\u034e\u0353\u0358\u035e\u0363\u0367")
        buf.write("\u036a\u036f\u0375\u0378\u037d\u0386\u0389\u038c\u038f")
        buf.write("\u0394\u0399\u03a5\u03ac\u03b0\u03b6\u03b8\u03bf\u03c4")
        buf.write("\u03c9\u03cc\u03cf\u03da\u03e3\u03e7\u03ea\u03fb\u0400")
        buf.write("\u040d\u040f")
        return buf.getvalue()


class ReqBlockParser ( Parser ):

    grammarFileName = "ReqBlock.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'&'", "'*'", "<INVALID>", "'!'", "'`'", 
                     "'\\'", "':'", "','", "'\"'", "'='", "'>='", "'>'", 
                     "'#'", "'-'", "'<='", "'<'", "'('", "'['", "'<>'", 
                     "'%'", "'+'", "'?'", "')'", "']'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "STRING", "CHECKELECTIVES", "COMMENT", 
                      "CURLY_BRACES", "DECIDE", "DISPLAY", "FROM", "FROM_ADVICE", 
                      "HIDE_RULE", "HIGH_PRIORITY", "IN", "LOW_PRIORITY", 
                      "NOCOUNT", "NOTGPA", "WHITESPACE", "ACCEPT", "ALLOW", 
                      "BEGIN", "BEGINSUB", "BLOCK", "BLOCKTYPE", "CLASS", 
                      "COPY_RULES", "CREDIT", "DONT_SHARE", "ENDOT", "ENDSUB", 
                      "EXCEPT", "GROUP", "HEADER_TAG", "INCLUDING", "LABEL", 
                      "LASTRES", "MAXCLASS", "MAXCREDIT", "MAXPASSFAIL", 
                      "MAXPERDISC", "MAXSPREAD", "MAXTERM", "MAXTRANSFER", 
                      "MINAREA", "MINGPA", "MINGRADE", "MINCLASS", "MINCREDIT", 
                      "MINPERDISC", "MINRES", "MINSPREAD", "MINTERM", "NONCOURSE", 
                      "OPTIONAL", "OF", "PROXY_ADVICE", "PSEUDO", "PSUEDO", 
                      "REMARK", "RULE_COMPLETE", "RULE_INCOMPLETE", "RULE_TAG", 
                      "STANDALONE", "SHARE", "TAG", "SAME_DISC", "UNDER", 
                      "WITH", "BEGINELSE", "BEGINIF", "ELSE", "ENDELSE", 
                      "ENDIF", "IF", "IS", "ISNT", "THEN", "AND", "OR", 
                      "NUMBER", "CATALOG_NUMBER", "WILD", "SYMBOL", "AMPERSAND", 
                      "ASTERISK", "AT", "BANG", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "DBL_QUOTE", "EQ", "GE", "GT", "HASH", 
                      "HYPHEN", "LE", "LT", "LP", "L_SQB", "NE", "PERCENT", 
                      "PLUS", "QUESTION_MARK", "RP", "R_SQB", "SEMICOLON", 
                      "SLASH", "UNDERSCORE" ]

    RULE_req_block = 0
    RULE_header = 1
    RULE_body = 2
    RULE_course_list = 3
    RULE_full_course = 4
    RULE_course_item = 5
    RULE_and_list = 6
    RULE_or_list = 7
    RULE_except_list = 8
    RULE_include_list = 9
    RULE_catalog_number = 10
    RULE_discipline = 11
    RULE_course_list_body = 12
    RULE_course_list_rule = 13
    RULE_qualifier = 14
    RULE_begin_if = 15
    RULE_end_if = 16
    RULE_header_conditional = 17
    RULE_header_else = 18
    RULE_header_rule_group = 19
    RULE_header_rule = 20
    RULE_body_conditional = 21
    RULE_body_else = 22
    RULE_body_rule_group = 23
    RULE_body_rule = 24
    RULE_group_requirement = 25
    RULE_groups = 26
    RULE_group = 27
    RULE_subset = 28
    RULE_block = 29
    RULE_blocktype = 30
    RULE_allow_clause = 31
    RULE_header_class_credit = 32
    RULE_body_class_credit = 33
    RULE_header_lastres = 34
    RULE_header_maxclass = 35
    RULE_header_maxcredit = 36
    RULE_header_maxpassfail = 37
    RULE_header_maxperdisc = 38
    RULE_header_maxterm = 39
    RULE_header_maxtransfer = 40
    RULE_header_minclass = 41
    RULE_header_mincredit = 42
    RULE_header_mingpa = 43
    RULE_header_mingrade = 44
    RULE_header_minperdisc = 45
    RULE_header_minres = 46
    RULE_header_minterm = 47
    RULE_header_share = 48
    RULE_allow = 49
    RULE_area_end = 50
    RULE_area_start = 51
    RULE_class_or_credit = 52
    RULE_copy_rules = 53
    RULE_display = 54
    RULE_header_tag = 55
    RULE_header_label = 56
    RULE_label = 57
    RULE_lastres = 58
    RULE_maxclass = 59
    RULE_maxcredit = 60
    RULE_maxpassfail = 61
    RULE_maxperdisc = 62
    RULE_maxspread = 63
    RULE_maxterm = 64
    RULE_maxtransfer = 65
    RULE_minarea = 66
    RULE_minclass = 67
    RULE_mincredit = 68
    RULE_mingpa = 69
    RULE_mingrade = 70
    RULE_minperdisc = 71
    RULE_minres = 72
    RULE_minspread = 73
    RULE_minterm = 74
    RULE_noncourse = 75
    RULE_num_classes = 76
    RULE_num_credits = 77
    RULE_nv_pair = 78
    RULE_optional = 79
    RULE_proxy_advice = 80
    RULE_pseudo = 81
    RULE_remark = 82
    RULE_rule_complete = 83
    RULE_rule_tag = 84
    RULE_samedisc = 85
    RULE_share = 86
    RULE_standalone = 87
    RULE_string = 88
    RULE_symbol = 89
    RULE_tag = 90
    RULE_under = 91
    RULE_with_clause = 92
    RULE_expression = 93
    RULE_logical_op = 94
    RULE_relational_op = 95
    RULE_list_or = 96
    RULE_list_and = 97

    ruleNames =  [ "req_block", "header", "body", "course_list", "full_course", 
                   "course_item", "and_list", "or_list", "except_list", 
                   "include_list", "catalog_number", "discipline", "course_list_body", 
                   "course_list_rule", "qualifier", "begin_if", "end_if", 
                   "header_conditional", "header_else", "header_rule_group", 
                   "header_rule", "body_conditional", "body_else", "body_rule_group", 
                   "body_rule", "group_requirement", "groups", "group", 
                   "subset", "block", "blocktype", "allow_clause", "header_class_credit", 
                   "body_class_credit", "header_lastres", "header_maxclass", 
                   "header_maxcredit", "header_maxpassfail", "header_maxperdisc", 
                   "header_maxterm", "header_maxtransfer", "header_minclass", 
                   "header_mincredit", "header_mingpa", "header_mingrade", 
                   "header_minperdisc", "header_minres", "header_minterm", 
                   "header_share", "allow", "area_end", "area_start", "class_or_credit", 
                   "copy_rules", "display", "header_tag", "header_label", 
                   "label", "lastres", "maxclass", "maxcredit", "maxpassfail", 
                   "maxperdisc", "maxspread", "maxterm", "maxtransfer", 
                   "minarea", "minclass", "mincredit", "mingpa", "mingrade", 
                   "minperdisc", "minres", "minspread", "minterm", "noncourse", 
                   "num_classes", "num_credits", "nv_pair", "optional", 
                   "proxy_advice", "pseudo", "remark", "rule_complete", 
                   "rule_tag", "samedisc", "share", "standalone", "string", 
                   "symbol", "tag", "under", "with_clause", "expression", 
                   "logical_op", "relational_op", "list_or", "list_and" ]

    EOF = Token.EOF
    STRING=1
    CHECKELECTIVES=2
    COMMENT=3
    CURLY_BRACES=4
    DECIDE=5
    DISPLAY=6
    FROM=7
    FROM_ADVICE=8
    HIDE_RULE=9
    HIGH_PRIORITY=10
    IN=11
    LOW_PRIORITY=12
    NOCOUNT=13
    NOTGPA=14
    WHITESPACE=15
    ACCEPT=16
    ALLOW=17
    BEGIN=18
    BEGINSUB=19
    BLOCK=20
    BLOCKTYPE=21
    CLASS=22
    COPY_RULES=23
    CREDIT=24
    DONT_SHARE=25
    ENDOT=26
    ENDSUB=27
    EXCEPT=28
    GROUP=29
    HEADER_TAG=30
    INCLUDING=31
    LABEL=32
    LASTRES=33
    MAXCLASS=34
    MAXCREDIT=35
    MAXPASSFAIL=36
    MAXPERDISC=37
    MAXSPREAD=38
    MAXTERM=39
    MAXTRANSFER=40
    MINAREA=41
    MINGPA=42
    MINGRADE=43
    MINCLASS=44
    MINCREDIT=45
    MINPERDISC=46
    MINRES=47
    MINSPREAD=48
    MINTERM=49
    NONCOURSE=50
    OPTIONAL=51
    OF=52
    PROXY_ADVICE=53
    PSEUDO=54
    PSUEDO=55
    REMARK=56
    RULE_COMPLETE=57
    RULE_INCOMPLETE=58
    RULE_TAG=59
    STANDALONE=60
    SHARE=61
    TAG=62
    SAME_DISC=63
    UNDER=64
    WITH=65
    BEGINELSE=66
    BEGINIF=67
    ELSE=68
    ENDELSE=69
    ENDIF=70
    IF=71
    IS=72
    ISNT=73
    THEN=74
    AND=75
    OR=76
    NUMBER=77
    CATALOG_NUMBER=78
    WILD=79
    SYMBOL=80
    AMPERSAND=81
    ASTERISK=82
    AT=83
    BANG=84
    BACKQUOTE=85
    BACKSLASH=86
    COLON=87
    COMMA=88
    DBL_QUOTE=89
    EQ=90
    GE=91
    GT=92
    HASH=93
    HYPHEN=94
    LE=95
    LT=96
    LP=97
    L_SQB=98
    NE=99
    PERCENT=100
    PLUS=101
    QUESTION_MARK=102
    RP=103
    R_SQB=104
    SEMICOLON=105
    SLASH=106
    UNDERSCORE=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Req_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ReqBlockParser.BEGIN, 0)

        def header(self):
            return self.getTypedRuleContext(ReqBlockParser.HeaderContext,0)


        def ENDOT(self):
            return self.getToken(ReqBlockParser.ENDOT, 0)

        def EOF(self):
            return self.getToken(ReqBlockParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def body(self):
            return self.getTypedRuleContext(ReqBlockParser.BodyContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_req_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReq_block" ):
                listener.enterReq_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReq_block" ):
                listener.exitReq_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReq_block" ):
                return visitor.visitReq_block(self)
            else:
                return visitor.visitChildren(self)




    def req_block(self):

        localctx = ReqBlockParser.Req_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_req_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 196
                    self.matchWildcard() 
                self.state = 201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 202
            self.match(ReqBlockParser.BEGIN)
            self.state = 203
            self.header()
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.SEMICOLON:
                self.state = 204
                self.match(ReqBlockParser.SEMICOLON)
                self.state = 205
                self.body()


            self.state = 208
            self.match(ReqBlockParser.ENDOT)
            self.state = 212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 209
                    self.matchWildcard() 
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 215
            self.match(ReqBlockParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = ReqBlockParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (ReqBlockParser.COPY_RULES - 23)) | (1 << (ReqBlockParser.DONT_SHARE - 23)) | (1 << (ReqBlockParser.LASTRES - 23)) | (1 << (ReqBlockParser.MAXCLASS - 23)) | (1 << (ReqBlockParser.MAXCREDIT - 23)) | (1 << (ReqBlockParser.MAXPASSFAIL - 23)) | (1 << (ReqBlockParser.MAXPERDISC - 23)) | (1 << (ReqBlockParser.MAXTERM - 23)) | (1 << (ReqBlockParser.MAXTRANSFER - 23)) | (1 << (ReqBlockParser.MINGPA - 23)) | (1 << (ReqBlockParser.MINGRADE - 23)) | (1 << (ReqBlockParser.MINCLASS - 23)) | (1 << (ReqBlockParser.MINCREDIT - 23)) | (1 << (ReqBlockParser.MINPERDISC - 23)) | (1 << (ReqBlockParser.MINRES - 23)) | (1 << (ReqBlockParser.MINTERM - 23)) | (1 << (ReqBlockParser.OPTIONAL - 23)) | (1 << (ReqBlockParser.PROXY_ADVICE - 23)) | (1 << (ReqBlockParser.REMARK - 23)) | (1 << (ReqBlockParser.RULE_COMPLETE - 23)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 23)) | (1 << (ReqBlockParser.STANDALONE - 23)) | (1 << (ReqBlockParser.SHARE - 23)) | (1 << (ReqBlockParser.IF - 23)) | (1 << (ReqBlockParser.NUMBER - 23)))) != 0):
                self.state = 217
                self.header_rule()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = ReqBlockParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BEGINSUB) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0):
                self.state = 223
                self.body_rule()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def except_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Except_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Except_listContext,i)


        def include_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Include_listContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Include_listContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list" ):
                listener.enterCourse_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list" ):
                listener.exitCourse_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list" ):
                return visitor.visitCourse_list(self)
            else:
                return visitor.visitChildren(self)




    def course_list(self):

        localctx = ReqBlockParser.Course_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_course_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.course_item()
            self.state = 232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 230
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 231
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.EXCEPT or _la==ReqBlockParser.INCLUDING:
                self.state = 236
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ReqBlockParser.EXCEPT]:
                    self.state = 234
                    self.except_list()
                    pass
                elif token in [ReqBlockParser.INCLUDING]:
                    self.state = 235
                    self.include_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 241
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_courseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_full_course

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_course" ):
                listener.enterFull_course(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_course" ):
                listener.exitFull_course(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_course" ):
                return visitor.visitFull_course(self)
            else:
                return visitor.visitChildren(self)




    def full_course(self):

        localctx = ReqBlockParser.Full_courseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_full_course)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.discipline()
            self.state = 245
            self.catalog_number()
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 246
                    self.with_clause() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalog_number(self):
            return self.getTypedRuleContext(ReqBlockParser.Catalog_numberContext,0)


        def area_start(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_startContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.With_clauseContext,i)


        def area_end(self):
            return self.getTypedRuleContext(ReqBlockParser.Area_endContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_item" ):
                listener.enterCourse_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_item" ):
                listener.exitCourse_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_item" ):
                return visitor.visitCourse_item(self)
            else:
                return visitor.visitChildren(self)




    def course_item(self):

        localctx = ReqBlockParser.Course_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_course_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.L_SQB:
                self.state = 252
                self.area_start()


            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 255
                self.discipline()


            self.state = 258
            self.catalog_number()
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.LP:
                self.state = 259
                self.with_clause()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.R_SQB:
                self.state = 265
                self.area_end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_andContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_andContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_and_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_list" ):
                listener.enterAnd_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_list" ):
                listener.exitAnd_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_list" ):
                return visitor.visitAnd_list(self)
            else:
                return visitor.visitChildren(self)




    def and_list(self):

        localctx = ReqBlockParser.And_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_and_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 268
                self.list_and()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 269
                    self.area_end()


                self.state = 272
                self.course_item()
                self.state = 276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def course_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_itemContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,i)


        def area_end(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Area_endContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Area_endContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_or_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_list" ):
                listener.enterOr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_list" ):
                listener.exitOr_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_list" ):
                return visitor.visitOr_list(self)
            else:
                return visitor.visitChildren(self)




    def or_list(self):

        localctx = ReqBlockParser.Or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_or_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 278
                self.list_or()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.R_SQB:
                    self.state = 279
                    self.area_end()


                self.state = 282
                self.course_item()
                self.state = 286 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(ReqBlockParser.EXCEPT, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_except_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_list" ):
                listener.enterExcept_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_list" ):
                listener.exitExcept_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_list" ):
                return visitor.visitExcept_list(self)
            else:
                return visitor.visitChildren(self)




    def except_list(self):

        localctx = ReqBlockParser.Except_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_except_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(ReqBlockParser.EXCEPT)
            self.state = 289
            self.course_item()
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 290
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 291
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDING(self):
            return self.getToken(ReqBlockParser.INCLUDING, 0)

        def course_item(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_itemContext,0)


        def and_list(self):
            return self.getTypedRuleContext(ReqBlockParser.And_listContext,0)


        def or_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Or_listContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_include_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_list" ):
                listener.enterInclude_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_list" ):
                listener.exitInclude_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude_list" ):
                return visitor.visitInclude_list(self)
            else:
                return visitor.visitChildren(self)




    def include_list(self):

        localctx = ReqBlockParser.Include_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_include_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(ReqBlockParser.INCLUDING)
            self.state = 295
            self.course_item()
            self.state = 298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.AND, ReqBlockParser.PLUS]:
                self.state = 296
                self.and_list()
                pass
            elif token in [ReqBlockParser.OR, ReqBlockParser.COMMA]:
                self.state = 297
                self.or_list()
                pass
            elif token in [ReqBlockParser.EOF, ReqBlockParser.STRING, ReqBlockParser.DISPLAY, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.ENDOT, ReqBlockParser.ENDSUB, ReqBlockParser.EXCEPT, ReqBlockParser.INCLUDING, ReqBlockParser.LABEL, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXSPREAD, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINAREA, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINSPREAD, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.RULE_TAG, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.TAG, ReqBlockParser.SAME_DISC, ReqBlockParser.ELSE, ReqBlockParser.ENDELSE, ReqBlockParser.ENDIF, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB, ReqBlockParser.RP, ReqBlockParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_catalog_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_number" ):
                listener.enterCatalog_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_number" ):
                listener.exitCatalog_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_number" ):
                return visitor.visitCatalog_number(self)
            else:
                return visitor.visitChildren(self)




    def catalog_number(self):

        localctx = ReqBlockParser.Catalog_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_catalog_number)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.symbol()
                pass
            elif token in [ReqBlockParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.match(ReqBlockParser.NUMBER)
                pass
            elif token in [ReqBlockParser.CATALOG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.match(ReqBlockParser.WILD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisciplineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(ReqBlockParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def WILD(self):
            return self.getToken(ReqBlockParser.WILD, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_discipline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscipline" ):
                listener.enterDiscipline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscipline" ):
                listener.exitDiscipline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscipline" ):
                return visitor.visitDiscipline(self)
            else:
                return visitor.visitChildren(self)




    def discipline(self):

        localctx = ReqBlockParser.DisciplineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_discipline)
        try:
            self.state = 311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.symbol()
                pass
            elif token in [ReqBlockParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.string()
                pass
            elif token in [ReqBlockParser.WILD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 308
                self.match(ReqBlockParser.WILD)
                pass
            elif token in [ReqBlockParser.BLOCK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 309
                self.match(ReqBlockParser.BLOCK)
                pass
            elif token in [ReqBlockParser.IS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 310
                self.match(ReqBlockParser.IS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_body" ):
                listener.enterCourse_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_body" ):
                listener.exitCourse_list_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_body" ):
                return visitor.visitCourse_list_body(self)
            else:
                return visitor.visitChildren(self)




    def course_list_body(self):

        localctx = ReqBlockParser.Course_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_course_list_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.course_list()
            self.state = 322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 320
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                    if la_ == 1:
                        self.state = 314
                        self.qualifier()
                        self.state = 316
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                        if la_ == 1:
                            self.state = 315
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 318
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 319
                        self.remark()
                        pass

             
                self.state = 324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Course_list_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_course_list_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCourse_list_rule" ):
                listener.enterCourse_list_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCourse_list_rule" ):
                listener.exitCourse_list_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCourse_list_rule" ):
                return visitor.visitCourse_list_rule(self)
            else:
                return visitor.visitChildren(self)




    def course_list_rule(self):

        localctx = ReqBlockParser.Course_list_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_course_list_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.course_list_body()
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 326
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def maxspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxspreadContext,0)


        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def minarea(self):
            return self.getTypedRuleContext(ReqBlockParser.MinareaContext,0)


        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def minspread(self):
            return self.getTypedRuleContext(ReqBlockParser.MinspreadContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def samedisc(self):
            return self.getTypedRuleContext(ReqBlockParser.SamediscContext,0)


        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ReqBlockParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_qualifier)
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.MAXPASSFAIL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.maxpassfail()
                pass
            elif token in [ReqBlockParser.MAXPERDISC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 330
                self.maxperdisc()
                pass
            elif token in [ReqBlockParser.MAXSPREAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 331
                self.maxspread()
                pass
            elif token in [ReqBlockParser.MAXTRANSFER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 332
                self.maxtransfer()
                pass
            elif token in [ReqBlockParser.MINAREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 333
                self.minarea()
                pass
            elif token in [ReqBlockParser.MINCLASS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 334
                self.minclass()
                pass
            elif token in [ReqBlockParser.MINCREDIT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 335
                self.mincredit()
                pass
            elif token in [ReqBlockParser.MINGPA]:
                self.enterOuterAlt(localctx, 8)
                self.state = 336
                self.mingpa()
                pass
            elif token in [ReqBlockParser.MINGRADE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 337
                self.mingrade()
                pass
            elif token in [ReqBlockParser.MINPERDISC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 338
                self.minperdisc()
                pass
            elif token in [ReqBlockParser.MINSPREAD]:
                self.enterOuterAlt(localctx, 11)
                self.state = 339
                self.minspread()
                pass
            elif token in [ReqBlockParser.PROXY_ADVICE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 340
                self.proxy_advice()
                pass
            elif token in [ReqBlockParser.RULE_TAG]:
                self.enterOuterAlt(localctx, 13)
                self.state = 341
                self.rule_tag()
                pass
            elif token in [ReqBlockParser.SAME_DISC]:
                self.enterOuterAlt(localctx, 14)
                self.state = 342
                self.samedisc()
                pass
            elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 343
                self.share()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINIF(self):
            return self.getToken(ReqBlockParser.BEGINIF, 0)

        def BEGINELSE(self):
            return self.getToken(ReqBlockParser.BEGINELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_begin_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_if" ):
                listener.enterBegin_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_if" ):
                listener.exitBegin_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_if" ):
                return visitor.visitBegin_if(self)
            else:
                return visitor.visitChildren(self)




    def begin_if(self):

        localctx = ReqBlockParser.Begin_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_begin_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.BEGINELSE or _la==ReqBlockParser.BEGINIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(ReqBlockParser.ENDIF, 0)

        def ENDELSE(self):
            return self.getToken(ReqBlockParser.ENDELSE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_end_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_if" ):
                listener.enterEnd_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_if" ):
                listener.exitEnd_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_if" ):
                return visitor.visitEnd_if(self)
            else:
                return visitor.visitChildren(self)




    def end_if(self):

        localctx = ReqBlockParser.End_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_end_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ENDELSE or _la==ReqBlockParser.ENDIF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def header_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_conditional" ):
                listener.enterHeader_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_conditional" ):
                listener.exitHeader_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_conditional" ):
                return visitor.visitHeader_conditional(self)
            else:
                return visitor.visitChildren(self)




    def header_conditional(self):

        localctx = ReqBlockParser.Header_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_header_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(ReqBlockParser.IF)
            self.state = 351
            self.expression(0)
            self.state = 352
            self.match(ReqBlockParser.THEN)
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 353
                self.header_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 354
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 357
                self.header_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def header_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,0)


        def header_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_else" ):
                listener.enterHeader_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_else" ):
                listener.exitHeader_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_else" ):
                return visitor.visitHeader_else(self)
            else:
                return visitor.visitChildren(self)




    def header_else(self):

        localctx = ReqBlockParser.Header_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_header_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(ReqBlockParser.ELSE)
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.COPY_RULES, ReqBlockParser.DONT_SHARE, ReqBlockParser.LASTRES, ReqBlockParser.MAXCLASS, ReqBlockParser.MAXCREDIT, ReqBlockParser.MAXPASSFAIL, ReqBlockParser.MAXPERDISC, ReqBlockParser.MAXTERM, ReqBlockParser.MAXTRANSFER, ReqBlockParser.MINGPA, ReqBlockParser.MINGRADE, ReqBlockParser.MINCLASS, ReqBlockParser.MINCREDIT, ReqBlockParser.MINPERDISC, ReqBlockParser.MINRES, ReqBlockParser.MINTERM, ReqBlockParser.OPTIONAL, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.STANDALONE, ReqBlockParser.SHARE, ReqBlockParser.IF, ReqBlockParser.NUMBER]:
                self.state = 361
                self.header_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 362
                self.header_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def header_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule_group" ):
                listener.enterHeader_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule_group" ):
                listener.exitHeader_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule_group" ):
                return visitor.visitHeader_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def header_rule_group(self):

        localctx = ReqBlockParser.Header_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_header_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.begin_if()
            self.state = 367 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 366
                self.header_rule()
                self.state = 369 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (ReqBlockParser.COPY_RULES - 23)) | (1 << (ReqBlockParser.DONT_SHARE - 23)) | (1 << (ReqBlockParser.LASTRES - 23)) | (1 << (ReqBlockParser.MAXCLASS - 23)) | (1 << (ReqBlockParser.MAXCREDIT - 23)) | (1 << (ReqBlockParser.MAXPASSFAIL - 23)) | (1 << (ReqBlockParser.MAXPERDISC - 23)) | (1 << (ReqBlockParser.MAXTERM - 23)) | (1 << (ReqBlockParser.MAXTRANSFER - 23)) | (1 << (ReqBlockParser.MINGPA - 23)) | (1 << (ReqBlockParser.MINGRADE - 23)) | (1 << (ReqBlockParser.MINCLASS - 23)) | (1 << (ReqBlockParser.MINCREDIT - 23)) | (1 << (ReqBlockParser.MINPERDISC - 23)) | (1 << (ReqBlockParser.MINRES - 23)) | (1 << (ReqBlockParser.MINTERM - 23)) | (1 << (ReqBlockParser.OPTIONAL - 23)) | (1 << (ReqBlockParser.PROXY_ADVICE - 23)) | (1 << (ReqBlockParser.REMARK - 23)) | (1 << (ReqBlockParser.RULE_COMPLETE - 23)) | (1 << (ReqBlockParser.RULE_INCOMPLETE - 23)) | (1 << (ReqBlockParser.STANDALONE - 23)) | (1 << (ReqBlockParser.SHARE - 23)) | (1 << (ReqBlockParser.IF - 23)) | (1 << (ReqBlockParser.NUMBER - 23)))) != 0)):
                    break

            self.state = 371
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_class_creditContext,0)


        def header_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_conditionalContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def header_lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_lastresContext,0)


        def header_maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxclassContext,0)


        def header_maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxcreditContext,0)


        def header_maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxpassfailContext,0)


        def header_maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxperdiscContext,0)


        def header_maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtermContext,0)


        def header_maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_maxtransferContext,0)


        def header_minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minclassContext,0)


        def header_mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mincreditContext,0)


        def header_mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingpaContext,0)


        def header_mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mingradeContext,0)


        def header_minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minperdiscContext,0)


        def header_minres(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_minresContext,0)


        def header_minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_mintermContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def optional(self):
            return self.getTypedRuleContext(ReqBlockParser.OptionalContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def standalone(self):
            return self.getTypedRuleContext(ReqBlockParser.StandaloneContext,0)


        def header_share(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_shareContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_rule" ):
                listener.enterHeader_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_rule" ):
                listener.exitHeader_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_rule" ):
                return visitor.visitHeader_rule(self)
            else:
                return visitor.visitChildren(self)




    def header_rule(self):

        localctx = ReqBlockParser.Header_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_header_rule)
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.header_class_credit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.header_conditional()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.copy_rules()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 376
                self.header_lastres()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 377
                self.header_maxclass()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 378
                self.header_maxcredit()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 379
                self.header_maxpassfail()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 380
                self.header_maxperdisc()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 381
                self.header_maxterm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 382
                self.header_maxtransfer()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 383
                self.header_minclass()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 384
                self.header_mincredit()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 385
                self.header_mingpa()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 386
                self.header_mingrade()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 387
                self.header_minperdisc()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 388
                self.header_minres()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 389
                self.header_minterm()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 390
                self.noncourse()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 391
                self.optional()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 392
                self.proxy_advice()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 393
                self.remark()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 394
                self.rule_complete()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 395
                self.standalone()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 396
                self.header_share()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_conditionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ReqBlockParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(ReqBlockParser.THEN, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def body_else(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_elseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_conditional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_conditional" ):
                listener.enterBody_conditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_conditional" ):
                listener.exitBody_conditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_conditional" ):
                return visitor.visitBody_conditional(self)
            else:
                return visitor.visitChildren(self)




    def body_conditional(self):

        localctx = ReqBlockParser.Body_conditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_body_conditional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(ReqBlockParser.IF)
            self.state = 400
            self.expression(0)
            self.state = 401
            self.match(ReqBlockParser.THEN)
            self.state = 404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.STRING, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB]:
                self.state = 402
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 403
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 406
                self.body_else()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ReqBlockParser.ELSE, 0)

        def body_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,0)


        def body_rule_group(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_rule_groupContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_else" ):
                listener.enterBody_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_else" ):
                listener.exitBody_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_else" ):
                return visitor.visitBody_else(self)
            else:
                return visitor.visitChildren(self)




    def body_else(self):

        localctx = ReqBlockParser.Body_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_body_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(ReqBlockParser.ELSE)
            self.state = 412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ReqBlockParser.STRING, ReqBlockParser.BEGINSUB, ReqBlockParser.BLOCK, ReqBlockParser.COPY_RULES, ReqBlockParser.PROXY_ADVICE, ReqBlockParser.REMARK, ReqBlockParser.RULE_COMPLETE, ReqBlockParser.RULE_INCOMPLETE, ReqBlockParser.IF, ReqBlockParser.IS, ReqBlockParser.NUMBER, ReqBlockParser.CATALOG_NUMBER, ReqBlockParser.WILD, ReqBlockParser.SYMBOL, ReqBlockParser.L_SQB]:
                self.state = 410
                self.body_rule()
                pass
            elif token in [ReqBlockParser.BEGINELSE, ReqBlockParser.BEGINIF]:
                self.state = 411
                self.body_rule_group()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_rule_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_if(self):
            return self.getTypedRuleContext(ReqBlockParser.Begin_ifContext,0)


        def end_if(self):
            return self.getTypedRuleContext(ReqBlockParser.End_ifContext,0)


        def body_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_ruleContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule_group" ):
                listener.enterBody_rule_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule_group" ):
                listener.exitBody_rule_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule_group" ):
                return visitor.visitBody_rule_group(self)
            else:
                return visitor.visitChildren(self)




    def body_rule_group(self):

        localctx = ReqBlockParser.Body_rule_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_body_rule_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.begin_if()
            self.state = 416 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 415
                self.body_rule()
                self.state = 418 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BEGINSUB) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 420
            self.end_if()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def body_conditional(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def copy_rules(self):
            return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def remark(self):
            return self.getTypedRuleContext(ReqBlockParser.RemarkContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def subset(self):
            return self.getTypedRuleContext(ReqBlockParser.SubsetContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_rule" ):
                listener.enterBody_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_rule" ):
                listener.exitBody_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_rule" ):
                return visitor.visitBody_rule(self)
            else:
                return visitor.visitChildren(self)




    def body_rule(self):

        localctx = ReqBlockParser.Body_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_body_rule)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.blocktype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.body_conditional()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 426
                self.course_list_rule()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 427
                self.copy_rules()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 428
                self.group_requirement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 429
                self.noncourse()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 430
                self.proxy_advice()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 431
                self.remark()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 432
                self.rule_complete()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 433
                self.subset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def GROUP(self):
            return self.getToken(ReqBlockParser.GROUP, 0)

        def groups(self):
            return self.getTypedRuleContext(ReqBlockParser.GroupsContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_requirement" ):
                listener.enterGroup_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_requirement" ):
                listener.exitGroup_requirement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_requirement" ):
                return visitor.visitGroup_requirement(self)
            else:
                return visitor.visitChildren(self)




    def group_requirement(self):

        localctx = ReqBlockParser.Group_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_group_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(ReqBlockParser.NUMBER)
            self.state = 437
            self.match(ReqBlockParser.GROUP)
            self.state = 438
            self.groups()
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 439
                        self.qualifier()
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 440
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 443
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 444
                        self.remark()
                        pass

             
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 450
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.GroupContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.GroupContext,i)


        def logical_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Logical_opContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroups" ):
                listener.enterGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroups" ):
                listener.exitGroups(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroups" ):
                return visitor.visitGroups(self)
            else:
                return visitor.visitChildren(self)




    def groups(self):

        localctx = ReqBlockParser.GroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.group()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 454
                self.logical_op()
                self.state = 455
                self.group()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def block(self):
            return self.getTypedRuleContext(ReqBlockParser.BlockContext,0)


        def blocktype(self):
            return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,0)


        def body_class_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,0)


        def course_list_rule(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,0)


        def group_requirement(self):
            return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,0)


        def noncourse(self):
            return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,0)


        def rule_complete(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = ReqBlockParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(ReqBlockParser.LP)
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 463
                self.block()
                pass

            elif la_ == 2:
                self.state = 464
                self.blocktype()
                pass

            elif la_ == 3:
                self.state = 465
                self.body_class_credit()
                pass

            elif la_ == 4:
                self.state = 466
                self.course_list_rule()
                pass

            elif la_ == 5:
                self.state = 467
                self.group_requirement()
                pass

            elif la_ == 6:
                self.state = 468
                self.noncourse()
                pass

            elif la_ == 7:
                self.state = 469
                self.rule_complete()
                pass


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.DONT_SHARE) | (1 << ReqBlockParser.MAXPASSFAIL) | (1 << ReqBlockParser.MAXPERDISC) | (1 << ReqBlockParser.MAXSPREAD) | (1 << ReqBlockParser.MAXTRANSFER) | (1 << ReqBlockParser.MINAREA) | (1 << ReqBlockParser.MINGPA) | (1 << ReqBlockParser.MINGRADE) | (1 << ReqBlockParser.MINCLASS) | (1 << ReqBlockParser.MINCREDIT) | (1 << ReqBlockParser.MINPERDISC) | (1 << ReqBlockParser.MINSPREAD) | (1 << ReqBlockParser.PROXY_ADVICE) | (1 << ReqBlockParser.REMARK) | (1 << ReqBlockParser.RULE_TAG) | (1 << ReqBlockParser.SHARE) | (1 << ReqBlockParser.SAME_DISC))) != 0):
                self.state = 478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self.qualifier()
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ReqBlockParser.TAG:
                        self.state = 473
                        self.tag()


                    pass

                elif la_ == 2:
                    self.state = 476
                    self.proxy_advice()
                    pass

                elif la_ == 3:
                    self.state = 477
                    self.remark()
                    pass


                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 483
                self.label()


            self.state = 486
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINSUB(self):
            return self.getToken(ReqBlockParser.BEGINSUB, 0)

        def ENDSUB(self):
            return self.getToken(ReqBlockParser.ENDSUB, 0)

        def body_conditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_conditionalContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_conditionalContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlockContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlockContext,i)


        def blocktype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.BlocktypeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.BlocktypeContext,i)


        def body_class_credit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Body_class_creditContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Body_class_creditContext,i)


        def copy_rules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Copy_rulesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Copy_rulesContext,i)


        def course_list_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Course_list_ruleContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Course_list_ruleContext,i)


        def group_requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Group_requirementContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Group_requirementContext,i)


        def noncourse(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.NoncourseContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.NoncourseContext,i)


        def rule_complete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_completeContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_completeContext,i)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.QualifierContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.QualifierContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_subset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubset" ):
                listener.enterSubset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubset" ):
                listener.exitSubset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubset" ):
                return visitor.visitSubset(self)
            else:
                return visitor.visitChildren(self)




    def subset(self):

        localctx = ReqBlockParser.SubsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_subset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(ReqBlockParser.BEGINSUB)
            self.state = 498 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 489
                    self.body_conditional()
                    pass

                elif la_ == 2:
                    self.state = 490
                    self.block()
                    pass

                elif la_ == 3:
                    self.state = 491
                    self.blocktype()
                    pass

                elif la_ == 4:
                    self.state = 492
                    self.body_class_credit()
                    pass

                elif la_ == 5:
                    self.state = 493
                    self.copy_rules()
                    pass

                elif la_ == 6:
                    self.state = 494
                    self.course_list_rule()
                    pass

                elif la_ == 7:
                    self.state = 495
                    self.group_requirement()
                    pass

                elif la_ == 8:
                    self.state = 496
                    self.noncourse()
                    pass

                elif la_ == 9:
                    self.state = 497
                    self.rule_complete()
                    pass


                self.state = 500 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ReqBlockParser.STRING) | (1 << ReqBlockParser.BLOCK) | (1 << ReqBlockParser.COPY_RULES) | (1 << ReqBlockParser.RULE_COMPLETE) | (1 << ReqBlockParser.RULE_INCOMPLETE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ReqBlockParser.IF - 71)) | (1 << (ReqBlockParser.IS - 71)) | (1 << (ReqBlockParser.NUMBER - 71)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 71)) | (1 << (ReqBlockParser.WILD - 71)) | (1 << (ReqBlockParser.SYMBOL - 71)) | (1 << (ReqBlockParser.L_SQB - 71)))) != 0)):
                    break

            self.state = 502
            self.match(ReqBlockParser.ENDSUB)
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                    if la_ == 1:
                        self.state = 503
                        self.qualifier()
                        self.state = 505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.TAG:
                            self.state = 504
                            self.tag()


                        pass

                    elif la_ == 2:
                        self.state = 507
                        self.proxy_advice()
                        pass

                    elif la_ == 3:
                        self.state = 508
                        self.remark()
                        pass

             
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 514
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCK(self):
            return self.getToken(ReqBlockParser.BLOCK, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ReqBlockParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(ReqBlockParser.NUMBER)
            self.state = 518
            self.match(ReqBlockParser.BLOCK)
            self.state = 519
            self.expression(0)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.RULE_TAG:
                self.state = 520
                self.rule_tag()


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 523
                self.proxy_advice()


            self.state = 526
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlocktypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def BLOCKTYPE(self):
            return self.getToken(ReqBlockParser.BLOCKTYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_blocktype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlocktype" ):
                listener.enterBlocktype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlocktype" ):
                listener.exitBlocktype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlocktype" ):
                return visitor.visitBlocktype(self)
            else:
                return visitor.visitChildren(self)




    def blocktype(self):

        localctx = ReqBlockParser.BlocktypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blocktype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(ReqBlockParser.NUMBER)
            self.state = 529
            self.match(ReqBlockParser.BLOCKTYPE)
            self.state = 530
            self.expression(0)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 531
                self.proxy_advice()


            self.state = 534
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allow_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def allow(self):
            return self.getTypedRuleContext(ReqBlockParser.AllowContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow_clause" ):
                listener.enterAllow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow_clause" ):
                listener.exitAllow_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow_clause" ):
                return visitor.visitAllow_clause(self)
            else:
                return visitor.visitChildren(self)




    def allow_clause(self):

        localctx = ReqBlockParser.Allow_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_allow_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(ReqBlockParser.LP)
            self.state = 537
            self.allow()
            self.state = 538
            self.match(ReqBlockParser.NUMBER)
            self.state = 539
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def pseudo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.PseudoContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.PseudoContext,i)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def header_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Header_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Header_tagContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.IS)
            else:
                return self.getToken(ReqBlockParser.IS, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_class_credit" ):
                listener.enterHeader_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_class_credit" ):
                listener.exitHeader_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_class_credit" ):
                return visitor.visitHeader_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def header_class_credit(self):

        localctx = ReqBlockParser.Header_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_header_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 541
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 542
                self.num_credits()
                pass


            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 545
                self.logical_op()
                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 546
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 547
                    self.num_credits()
                    pass




            self.state = 562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 560
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PSEUDO, ReqBlockParser.PSUEDO, ReqBlockParser.IS]:
                        self.state = 553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ReqBlockParser.IS:
                            self.state = 552
                            self.match(ReqBlockParser.IS)


                        self.state = 555
                        self.pseudo()
                        pass
                    elif token in [ReqBlockParser.DISPLAY]:
                        self.state = 556
                        self.display()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 557
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.HEADER_TAG]:
                        self.state = 558
                        self.header_tag()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 559
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 565
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Body_class_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num_classes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_classesContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,i)


        def num_credits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Num_creditsContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,i)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def course_list_body(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_list_bodyContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def remark(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.RemarkContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.RemarkContext,i)


        def share(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ShareContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ShareContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.TagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.TagContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_body_class_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody_class_credit" ):
                listener.enterBody_class_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody_class_credit" ):
                listener.exitBody_class_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody_class_credit" ):
                return visitor.visitBody_class_credit(self)
            else:
                return visitor.visitChildren(self)




    def body_class_credit(self):

        localctx = ReqBlockParser.Body_class_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_body_class_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 568
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 569
                self.num_credits()
                pass


            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.AND or _la==ReqBlockParser.OR:
                self.state = 572
                self.logical_op()
                self.state = 575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 573
                    self.num_classes()
                    pass

                elif la_ == 2:
                    self.state = 574
                    self.num_credits()
                    pass




            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 579
                self.course_list_body()


            self.state = 591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 589
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.DISPLAY]:
                        self.state = 582
                        self.display()
                        pass
                    elif token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 583
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.REMARK]:
                        self.state = 584
                        self.remark()
                        pass
                    elif token in [ReqBlockParser.DONT_SHARE, ReqBlockParser.SHARE]:
                        self.state = 585
                        self.share()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 586
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 587
                        self.label()
                        pass
                    elif token in [ReqBlockParser.TAG]:
                        self.state = 588
                        self.tag()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_lastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lastres(self):
            return self.getTypedRuleContext(ReqBlockParser.LastresContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_lastres" ):
                listener.enterHeader_lastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_lastres" ):
                listener.exitHeader_lastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_lastres" ):
                return visitor.visitHeader_lastres(self)
            else:
                return visitor.visitChildren(self)




    def header_lastres(self):

        localctx = ReqBlockParser.Header_lastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_header_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.lastres()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 595
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxclass" ):
                listener.enterHeader_maxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxclass" ):
                listener.exitHeader_maxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxclass" ):
                return visitor.visitHeader_maxclass(self)
            else:
                return visitor.visitChildren(self)




    def header_maxclass(self):

        localctx = ReqBlockParser.Header_maxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_header_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.maxclass()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 599
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxcredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxcreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxcredit" ):
                listener.enterHeader_maxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxcredit" ):
                listener.exitHeader_maxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxcredit" ):
                return visitor.visitHeader_maxcredit(self)
            else:
                return visitor.visitChildren(self)




    def header_maxcredit(self):

        localctx = ReqBlockParser.Header_maxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_header_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.maxcredit()
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 603
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxpassfail(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxpassfailContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxpassfail" ):
                listener.enterHeader_maxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxpassfail" ):
                listener.exitHeader_maxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxpassfail" ):
                return visitor.visitHeader_maxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def header_maxpassfail(self):

        localctx = ReqBlockParser.Header_maxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_header_maxpassfail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.maxpassfail()
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 607
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxperdisc" ):
                listener.enterHeader_maxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxperdisc" ):
                listener.exitHeader_maxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxperdisc" ):
                return visitor.visitHeader_maxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_maxperdisc(self):

        localctx = ReqBlockParser.Header_maxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_header_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.maxperdisc()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 611
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxterm" ):
                listener.enterHeader_maxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxterm" ):
                listener.exitHeader_maxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxterm" ):
                return visitor.visitHeader_maxterm(self)
            else:
                return visitor.visitChildren(self)




    def header_maxterm(self):

        localctx = ReqBlockParser.Header_maxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_header_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.maxterm()
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 615
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_maxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maxtransfer(self):
            return self.getTypedRuleContext(ReqBlockParser.MaxtransferContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_maxtransfer" ):
                listener.enterHeader_maxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_maxtransfer" ):
                listener.exitHeader_maxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_maxtransfer" ):
                return visitor.visitHeader_maxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def header_maxtransfer(self):

        localctx = ReqBlockParser.Header_maxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_header_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.maxtransfer()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 619
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minclass(self):
            return self.getTypedRuleContext(ReqBlockParser.MinclassContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minclass" ):
                listener.enterHeader_minclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minclass" ):
                listener.exitHeader_minclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minclass" ):
                return visitor.visitHeader_minclass(self)
            else:
                return visitor.visitChildren(self)




    def header_minclass(self):

        localctx = ReqBlockParser.Header_minclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_header_minclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.minclass()
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 623
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mincredit(self):
            return self.getTypedRuleContext(ReqBlockParser.MincreditContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mincredit" ):
                listener.enterHeader_mincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mincredit" ):
                listener.exitHeader_mincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mincredit" ):
                return visitor.visitHeader_mincredit(self)
            else:
                return visitor.visitChildren(self)




    def header_mincredit(self):

        localctx = ReqBlockParser.Header_mincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_header_mincredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.mincredit()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 627
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingpa(self):
            return self.getTypedRuleContext(ReqBlockParser.MingpaContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingpa" ):
                listener.enterHeader_mingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingpa" ):
                listener.exitHeader_mingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingpa" ):
                return visitor.visitHeader_mingpa(self)
            else:
                return visitor.visitChildren(self)




    def header_mingpa(self):

        localctx = ReqBlockParser.Header_mingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_header_mingpa)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.mingpa()
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 631
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mingrade(self):
            return self.getTypedRuleContext(ReqBlockParser.MingradeContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_mingrade" ):
                listener.enterHeader_mingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_mingrade" ):
                listener.exitHeader_mingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_mingrade" ):
                return visitor.visitHeader_mingrade(self)
            else:
                return visitor.visitChildren(self)




    def header_mingrade(self):

        localctx = ReqBlockParser.Header_mingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_header_mingrade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.mingrade()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 635
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minperdisc(self):
            return self.getTypedRuleContext(ReqBlockParser.MinperdiscContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minperdisc" ):
                listener.enterHeader_minperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minperdisc" ):
                listener.exitHeader_minperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minperdisc" ):
                return visitor.visitHeader_minperdisc(self)
            else:
                return visitor.visitChildren(self)




    def header_minperdisc(self):

        localctx = ReqBlockParser.Header_minperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_header_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.minperdisc()
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 639
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_minresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minres(self):
            return self.getTypedRuleContext(ReqBlockParser.MinresContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minres" ):
                listener.enterHeader_minres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minres" ):
                listener.exitHeader_minres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minres" ):
                return visitor.visitHeader_minres(self)
            else:
                return visitor.visitChildren(self)




    def header_minres(self):

        localctx = ReqBlockParser.Header_minresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_header_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.minres()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 643
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_mintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minterm(self):
            return self.getTypedRuleContext(ReqBlockParser.MintermContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_minterm" ):
                listener.enterHeader_minterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_minterm" ):
                listener.exitHeader_minterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_minterm" ):
                return visitor.visitHeader_minterm(self)
            else:
                return visitor.visitChildren(self)




    def header_minterm(self):

        localctx = ReqBlockParser.Header_mintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_header_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.minterm()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 647
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def share(self):
            return self.getTypedRuleContext(ReqBlockParser.ShareContext,0)


        def header_label(self):
            return self.getTypedRuleContext(ReqBlockParser.Header_labelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_share" ):
                listener.enterHeader_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_share" ):
                listener.exitHeader_share(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_share" ):
                return visitor.visitHeader_share(self)
            else:
                return visitor.visitChildren(self)




    def header_share(self):

        localctx = ReqBlockParser.Header_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_header_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.share()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 651
                self.header_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW(self):
            return self.getToken(ReqBlockParser.ALLOW, 0)

        def ACCEPT(self):
            return self.getToken(ReqBlockParser.ACCEPT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_allow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllow" ):
                listener.enterAllow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllow" ):
                listener.exitAllow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllow" ):
                return visitor.visitAllow(self)
            else:
                return visitor.visitChildren(self)




    def allow(self):

        localctx = ReqBlockParser.AllowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_allow)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.ACCEPT or _la==ReqBlockParser.ALLOW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_SQB(self):
            return self.getToken(ReqBlockParser.R_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_end" ):
                listener.enterArea_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_end" ):
                listener.exitArea_end(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_end" ):
                return visitor.visitArea_end(self)
            else:
                return visitor.visitChildren(self)




    def area_end(self):

        localctx = ReqBlockParser.Area_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_area_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(ReqBlockParser.R_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Area_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SQB(self):
            return self.getToken(ReqBlockParser.L_SQB, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_area_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea_start" ):
                listener.enterArea_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea_start" ):
                listener.exitArea_start(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea_start" ):
                return visitor.visitArea_start(self)
            else:
                return visitor.visitChildren(self)




    def area_start(self):

        localctx = ReqBlockParser.Area_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_area_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(ReqBlockParser.L_SQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_or_creditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_class_or_credit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_credit" ):
                listener.enterClass_or_credit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_credit" ):
                listener.exitClass_or_credit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_credit" ):
                return visitor.visitClass_or_credit(self)
            else:
                return visitor.visitChildren(self)




    def class_or_credit(self):

        localctx = ReqBlockParser.Class_or_creditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_class_or_credit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.CLASS or _la==ReqBlockParser.CREDIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY_RULES(self):
            return self.getToken(ReqBlockParser.COPY_RULES, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_copy_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_rules" ):
                listener.enterCopy_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_rules" ):
                listener.exitCopy_rules(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopy_rules" ):
                return visitor.visitCopy_rules(self)
            else:
                return visitor.visitChildren(self)




    def copy_rules(self):

        localctx = ReqBlockParser.Copy_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_copy_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(ReqBlockParser.COPY_RULES)
            self.state = 663
            self.expression(0)
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 664
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ReqBlockParser.DISPLAY, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_display

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplay" ):
                listener.enterDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplay" ):
                listener.exitDisplay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplay" ):
                return visitor.visitDisplay(self)
            else:
                return visitor.visitChildren(self)




    def display(self):

        localctx = ReqBlockParser.DisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_display)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(ReqBlockParser.DISPLAY)
            self.state = 668
            self.string()
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 669
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADER_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.HEADER_TAG)
            else:
                return self.getToken(ReqBlockParser.HEADER_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_tag" ):
                listener.enterHeader_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_tag" ):
                listener.exitHeader_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_tag" ):
                return visitor.visitHeader_tag(self)
            else:
                return visitor.visitChildren(self)




    def header_tag(self):

        localctx = ReqBlockParser.Header_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_header_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 672
                    self.match(ReqBlockParser.HEADER_TAG)
                    self.state = 673
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 676 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_header_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_label" ):
                listener.enterHeader_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_label" ):
                listener.exitHeader_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader_label" ):
                return visitor.visitHeader_label(self)
            else:
                return visitor.visitChildren(self)




    def header_label(self):

        localctx = ReqBlockParser.Header_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_header_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(ReqBlockParser.LABEL)
            self.state = 679
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(ReqBlockParser.LABEL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def SEMICOLON(self):
            return self.getToken(ReqBlockParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ReqBlockParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(ReqBlockParser.LABEL)
            self.state = 682
            self.string()
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 683
                self.match(ReqBlockParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LASTRES(self):
            return self.getToken(ReqBlockParser.LASTRES, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.NUMBER)
            else:
                return self.getToken(ReqBlockParser.NUMBER, i)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def OF(self):
            return self.getToken(ReqBlockParser.OF, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_lastres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastres" ):
                listener.enterLastres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastres" ):
                listener.exitLastres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastres" ):
                return visitor.visitLastres(self)
            else:
                return visitor.visitChildren(self)




    def lastres(self):

        localctx = ReqBlockParser.LastresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_lastres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(ReqBlockParser.LASTRES)
            self.state = 687
            self.match(ReqBlockParser.NUMBER)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.OF:
                self.state = 688
                self.match(ReqBlockParser.OF)
                self.state = 689
                self.match(ReqBlockParser.NUMBER)


            self.state = 692
            self.class_or_credit()
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 693
                self.course_list()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 696
                self.tag()


            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 699
                self.display()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 705
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCLASS(self):
            return self.getToken(ReqBlockParser.MAXCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxclass" ):
                listener.enterMaxclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxclass" ):
                listener.exitMaxclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxclass" ):
                return visitor.visitMaxclass(self)
            else:
                return visitor.visitChildren(self)




    def maxclass(self):

        localctx = ReqBlockParser.MaxclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_maxclass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(ReqBlockParser.MAXCLASS)
            self.state = 709
            self.match(ReqBlockParser.NUMBER)
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 710
                self.course_list()


            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 713
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxcreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXCREDIT(self):
            return self.getToken(ReqBlockParser.MAXCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxcredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxcredit" ):
                listener.enterMaxcredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxcredit" ):
                listener.exitMaxcredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxcredit" ):
                return visitor.visitMaxcredit(self)
            else:
                return visitor.visitChildren(self)




    def maxcredit(self):

        localctx = ReqBlockParser.MaxcreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_maxcredit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(ReqBlockParser.MAXCREDIT)
            self.state = 717
            self.match(ReqBlockParser.NUMBER)
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 718
                self.course_list()


            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 721
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxpassfailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPASSFAIL(self):
            return self.getToken(ReqBlockParser.MAXPASSFAIL, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxpassfail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxpassfail" ):
                listener.enterMaxpassfail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxpassfail" ):
                listener.exitMaxpassfail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxpassfail" ):
                return visitor.visitMaxpassfail(self)
            else:
                return visitor.visitChildren(self)




    def maxpassfail(self):

        localctx = ReqBlockParser.MaxpassfailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_maxpassfail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(ReqBlockParser.MAXPASSFAIL)
            self.state = 725
            self.match(ReqBlockParser.NUMBER)
            self.state = 726
            self.class_or_credit()
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 727
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXPERDISC(self):
            return self.getToken(ReqBlockParser.MAXPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxperdisc" ):
                listener.enterMaxperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxperdisc" ):
                listener.exitMaxperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxperdisc" ):
                return visitor.visitMaxperdisc(self)
            else:
                return visitor.visitChildren(self)




    def maxperdisc(self):

        localctx = ReqBlockParser.MaxperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_maxperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(ReqBlockParser.MAXPERDISC)
            self.state = 731
            self.match(ReqBlockParser.NUMBER)
            self.state = 732
            self.class_or_credit()
            self.state = 733
            self.match(ReqBlockParser.LP)
            self.state = 734
            self.match(ReqBlockParser.SYMBOL)
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 735
                self.list_or()
                self.state = 736
                self.match(ReqBlockParser.SYMBOL)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 743
            self.match(ReqBlockParser.RP)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 744
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXSPREAD(self):
            return self.getToken(ReqBlockParser.MAXSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxspread" ):
                listener.enterMaxspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxspread" ):
                listener.exitMaxspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxspread" ):
                return visitor.visitMaxspread(self)
            else:
                return visitor.visitChildren(self)




    def maxspread(self):

        localctx = ReqBlockParser.MaxspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_maxspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(ReqBlockParser.MAXSPREAD)
            self.state = 748
            self.match(ReqBlockParser.NUMBER)
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 749
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTERM(self):
            return self.getToken(ReqBlockParser.MAXTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxterm" ):
                listener.enterMaxterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxterm" ):
                listener.exitMaxterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxterm" ):
                return visitor.visitMaxterm(self)
            else:
                return visitor.visitChildren(self)




    def maxterm(self):

        localctx = ReqBlockParser.MaxtermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_maxterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(ReqBlockParser.MAXTERM)
            self.state = 753
            self.match(ReqBlockParser.NUMBER)
            self.state = 754
            self.class_or_credit()
            self.state = 755
            self.course_list()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 756
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaxtransferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXTRANSFER(self):
            return self.getToken(ReqBlockParser.MAXTRANSFER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_maxtransfer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxtransfer" ):
                listener.enterMaxtransfer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxtransfer" ):
                listener.exitMaxtransfer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaxtransfer" ):
                return visitor.visitMaxtransfer(self)
            else:
                return visitor.visitChildren(self)




    def maxtransfer(self):

        localctx = ReqBlockParser.MaxtransferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_maxtransfer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(ReqBlockParser.MAXTRANSFER)
            self.state = 760
            self.match(ReqBlockParser.NUMBER)
            self.state = 761
            self.class_or_credit()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 762
                self.match(ReqBlockParser.LP)
                self.state = 763
                self.match(ReqBlockParser.SYMBOL)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                    self.state = 764
                    self.list_or()
                    self.state = 765
                    self.match(ReqBlockParser.SYMBOL)
                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self.match(ReqBlockParser.RP)


            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 775
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinareaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINAREA(self):
            return self.getToken(ReqBlockParser.MINAREA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minarea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinarea" ):
                listener.enterMinarea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinarea" ):
                listener.exitMinarea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinarea" ):
                return visitor.visitMinarea(self)
            else:
                return visitor.visitChildren(self)




    def minarea(self):

        localctx = ReqBlockParser.MinareaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_minarea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(ReqBlockParser.MINAREA)
            self.state = 779
            self.match(ReqBlockParser.NUMBER)
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 780
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCLASS(self):
            return self.getToken(ReqBlockParser.MINCLASS, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinclass" ):
                listener.enterMinclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinclass" ):
                listener.exitMinclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinclass" ):
                return visitor.visitMinclass(self)
            else:
                return visitor.visitChildren(self)




    def minclass(self):

        localctx = ReqBlockParser.MinclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_minclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(ReqBlockParser.MINCLASS)
            self.state = 784
            self.match(ReqBlockParser.NUMBER)
            self.state = 785
            self.course_list()
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 786
                self.tag()


            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self.display() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 795
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MincreditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINCREDIT(self):
            return self.getToken(ReqBlockParser.MINCREDIT, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mincredit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMincredit" ):
                listener.enterMincredit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMincredit" ):
                listener.exitMincredit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMincredit" ):
                return visitor.visitMincredit(self)
            else:
                return visitor.visitChildren(self)




    def mincredit(self):

        localctx = ReqBlockParser.MincreditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_mincredit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(ReqBlockParser.MINCREDIT)
            self.state = 799
            self.match(ReqBlockParser.NUMBER)
            self.state = 800
            self.course_list()
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 801
                self.tag()


            self.state = 807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 804
                    self.display() 
                self.state = 809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 810
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingpaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGPA(self):
            return self.getToken(ReqBlockParser.MINGPA, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingpa

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingpa" ):
                listener.enterMingpa(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingpa" ):
                listener.exitMingpa(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingpa" ):
                return visitor.visitMingpa(self)
            else:
                return visitor.visitChildren(self)




    def mingpa(self):

        localctx = ReqBlockParser.MingpaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_mingpa)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(ReqBlockParser.MINGPA)
            self.state = 814
            self.match(ReqBlockParser.NUMBER)
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 815
                self.course_list()

            elif la_ == 2:
                self.state = 816
                self.expression(0)


            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 819
                self.tag()


            self.state = 825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 822
                    self.display() 
                self.state = 827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 828
                self.proxy_advice()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MingradeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINGRADE(self):
            return self.getToken(ReqBlockParser.MINGRADE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_mingrade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMingrade" ):
                listener.enterMingrade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMingrade" ):
                listener.exitMingrade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMingrade" ):
                return visitor.visitMingrade(self)
            else:
                return visitor.visitChildren(self)




    def mingrade(self):

        localctx = ReqBlockParser.MingradeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_mingrade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(ReqBlockParser.MINGRADE)
            self.state = 832
            self.match(ReqBlockParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinperdiscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINPERDISC(self):
            return self.getToken(ReqBlockParser.MINPERDISC, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def list_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.List_orContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.List_orContext,i)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minperdisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinperdisc" ):
                listener.enterMinperdisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinperdisc" ):
                listener.exitMinperdisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinperdisc" ):
                return visitor.visitMinperdisc(self)
            else:
                return visitor.visitChildren(self)




    def minperdisc(self):

        localctx = ReqBlockParser.MinperdiscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_minperdisc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(ReqBlockParser.MINPERDISC)
            self.state = 835
            self.match(ReqBlockParser.NUMBER)
            self.state = 836
            self.class_or_credit()
            self.state = 837
            self.match(ReqBlockParser.LP)
            self.state = 838
            self.match(ReqBlockParser.SYMBOL)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA:
                self.state = 839
                self.list_or()
                self.state = 840
                self.match(ReqBlockParser.SYMBOL)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 847
            self.match(ReqBlockParser.RP)
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 848
                self.tag()


            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 851
                    self.display() 
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINRES(self):
            return self.getToken(ReqBlockParser.MINRES, 0)

        def num_classes(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_classesContext,0)


        def num_credits(self):
            return self.getTypedRuleContext(ReqBlockParser.Num_creditsContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minres

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinres" ):
                listener.enterMinres(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinres" ):
                listener.exitMinres(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinres" ):
                return visitor.visitMinres(self)
            else:
                return visitor.visitChildren(self)




    def minres(self):

        localctx = ReqBlockParser.MinresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_minres)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ReqBlockParser.MINRES)
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 858
                self.num_classes()
                pass

            elif la_ == 2:
                self.state = 859
                self.num_credits()
                pass


            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 862
                self.display()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 868
                self.proxy_advice()


            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 871
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinspreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINSPREAD(self):
            return self.getToken(ReqBlockParser.MINSPREAD, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minspread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinspread" ):
                listener.enterMinspread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinspread" ):
                listener.exitMinspread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinspread" ):
                return visitor.visitMinspread(self)
            else:
                return visitor.visitChildren(self)




    def minspread(self):

        localctx = ReqBlockParser.MinspreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_minspread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(ReqBlockParser.MINSPREAD)
            self.state = 875
            self.match(ReqBlockParser.NUMBER)
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 876
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MintermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINTERM(self):
            return self.getToken(ReqBlockParser.MINTERM, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_minterm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinterm" ):
                listener.enterMinterm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinterm" ):
                listener.exitMinterm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinterm" ):
                return visitor.visitMinterm(self)
            else:
                return visitor.visitChildren(self)




    def minterm(self):

        localctx = ReqBlockParser.MintermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_minterm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(ReqBlockParser.MINTERM)
            self.state = 880
            self.match(ReqBlockParser.NUMBER)
            self.state = 881
            self.class_or_credit()
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 882
                self.course_list()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.TAG:
                self.state = 885
                self.tag()


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 888
                self.display()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoncourseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def rule_tag(self):
            return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_noncourse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoncourse" ):
                listener.enterNoncourse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoncourse" ):
                listener.exitNoncourse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoncourse" ):
                return visitor.visitNoncourse(self)
            else:
                return visitor.visitChildren(self)




    def noncourse(self):

        localctx = ReqBlockParser.NoncourseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_noncourse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(ReqBlockParser.NUMBER)
            self.state = 895
            self.match(ReqBlockParser.NONCOURSE)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 896
                self.match(ReqBlockParser.LP)
                self.state = 897
                self.expression(0)
                self.state = 898
                self.match(ReqBlockParser.RP)


            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 902
                self.proxy_advice()


            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 905
                self.rule_tag()


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 908
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_classesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CLASS(self):
            return self.getToken(ReqBlockParser.CLASS, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_classes" ):
                listener.enterNum_classes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_classes" ):
                listener.exitNum_classes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_classes" ):
                return visitor.visitNum_classes(self)
            else:
                return visitor.visitChildren(self)




    def num_classes(self):

        localctx = ReqBlockParser.Num_classesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_num_classes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(ReqBlockParser.NUMBER)
            self.state = 912
            self.match(ReqBlockParser.CLASS)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 913
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_creditsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def CREDIT(self):
            return self.getToken(ReqBlockParser.CREDIT, 0)

        def allow_clause(self):
            return self.getTypedRuleContext(ReqBlockParser.Allow_clauseContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_num_credits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_credits" ):
                listener.enterNum_credits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_credits" ):
                listener.exitNum_credits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_credits" ):
                return visitor.visitNum_credits(self)
            else:
                return visitor.visitChildren(self)




    def num_credits(self):

        localctx = ReqBlockParser.Num_creditsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_num_credits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(ReqBlockParser.NUMBER)
            self.state = 917
            self.match(ReqBlockParser.CREDIT)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LP:
                self.state = 918
                self.allow_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SYMBOL)
            else:
                return self.getToken(ReqBlockParser.SYMBOL, i)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_nv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNv_pair" ):
                listener.enterNv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNv_pair" ):
                listener.exitNv_pair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNv_pair" ):
                return visitor.visitNv_pair(self)
            else:
                return visitor.visitChildren(self)




    def nv_pair(self):

        localctx = ReqBlockParser.Nv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_nv_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(ReqBlockParser.SYMBOL)
            self.state = 922
            self.match(ReqBlockParser.EQ)
            self.state = 923
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.STRING or _la==ReqBlockParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(ReqBlockParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional" ):
                listener.enterOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional" ):
                listener.exitOptional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptional" ):
                return visitor.visitOptional(self)
            else:
                return visitor.visitChildren(self)




    def optional(self):

        localctx = ReqBlockParser.OptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(ReqBlockParser.OPTIONAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_adviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_ADVICE(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.PROXY_ADVICE)
            else:
                return self.getToken(ReqBlockParser.PROXY_ADVICE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.STRING)
            else:
                return self.getToken(ReqBlockParser.STRING, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_proxy_advice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_advice" ):
                listener.enterProxy_advice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_advice" ):
                listener.exitProxy_advice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProxy_advice" ):
                return visitor.visitProxy_advice(self)
            else:
                return visitor.visitChildren(self)




    def proxy_advice(self):

        localctx = ReqBlockParser.Proxy_adviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_proxy_advice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 927
                    self.match(ReqBlockParser.PROXY_ADVICE)
                    self.state = 928
                    self.match(ReqBlockParser.STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 931 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PSEUDO(self):
            return self.getToken(ReqBlockParser.PSEUDO, 0)

        def PSUEDO(self):
            return self.getToken(ReqBlockParser.PSUEDO, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_pseudo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudo" ):
                listener.enterPseudo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudo" ):
                listener.exitPseudo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudo" ):
                return visitor.visitPseudo(self)
            else:
                return visitor.visitChildren(self)




    def pseudo(self):

        localctx = ReqBlockParser.PseudoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pseudo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.PSEUDO or _la==ReqBlockParser.PSUEDO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARK(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.REMARK)
            else:
                return self.getToken(ReqBlockParser.REMARK, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.StringContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.StringContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.SEMICOLON)
            else:
                return self.getToken(ReqBlockParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_remark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemark" ):
                listener.enterRemark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemark" ):
                listener.exitRemark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemark" ):
                return visitor.visitRemark(self)
            else:
                return visitor.visitChildren(self)




    def remark(self):

        localctx = ReqBlockParser.RemarkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_remark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 935
                    self.match(ReqBlockParser.REMARK)
                    self.state = 936
                    self.string()
                    self.state = 938
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 937
                        self.match(ReqBlockParser.SEMICOLON)



                else:
                    raise NoViableAltException(self)
                self.state = 942 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_completeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_COMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_COMPLETE, 0)

        def RULE_INCOMPLETE(self):
            return self.getToken(ReqBlockParser.RULE_INCOMPLETE, 0)

        def proxy_advice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Proxy_adviceContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,i)


        def rule_tag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Rule_tagContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Rule_tagContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.LabelContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.LabelContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_complete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_complete" ):
                listener.enterRule_complete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_complete" ):
                listener.exitRule_complete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_complete" ):
                return visitor.visitRule_complete(self)
            else:
                return visitor.visitChildren(self)




    def rule_complete(self):

        localctx = ReqBlockParser.Rule_completeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_rule_complete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.RULE_COMPLETE or _la==ReqBlockParser.RULE_INCOMPLETE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 948
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ReqBlockParser.PROXY_ADVICE]:
                        self.state = 945
                        self.proxy_advice()
                        pass
                    elif token in [ReqBlockParser.RULE_TAG]:
                        self.state = 946
                        self.rule_tag()
                        pass
                    elif token in [ReqBlockParser.LABEL]:
                        self.state = 947
                        self.label()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE_TAG(self, i:int=None):
            if i is None:
                return self.getTokens(ReqBlockParser.RULE_TAG)
            else:
                return self.getToken(ReqBlockParser.RULE_TAG, i)

        def nv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.Nv_pairContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.Nv_pairContext,i)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_rule_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_tag" ):
                listener.enterRule_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_tag" ):
                listener.exitRule_tag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRule_tag" ):
                return visitor.visitRule_tag(self)
            else:
                return visitor.visitChildren(self)




    def rule_tag(self):

        localctx = ReqBlockParser.Rule_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_rule_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 953
                    self.match(ReqBlockParser.RULE_TAG)
                    self.state = 954
                    self.nv_pair()

                else:
                    raise NoViableAltException(self)
                self.state = 957 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SamediscContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME_DISC(self):
            return self.getToken(ReqBlockParser.SAME_DISC, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_samedisc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSamedisc" ):
                listener.enterSamedisc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSamedisc" ):
                listener.exitSamedisc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSamedisc" ):
                return visitor.visitSamedisc(self)
            else:
                return visitor.visitChildren(self)




    def samedisc(self):

        localctx = ReqBlockParser.SamediscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_samedisc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(ReqBlockParser.SAME_DISC)
            self.state = 960
            self.expression(0)
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 961
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHARE(self):
            return self.getToken(ReqBlockParser.SHARE, 0)

        def DONT_SHARE(self):
            return self.getToken(ReqBlockParser.DONT_SHARE, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def tag(self):
            return self.getTypedRuleContext(ReqBlockParser.TagContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare" ):
                listener.enterShare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare" ):
                listener.exitShare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShare" ):
                return visitor.visitShare(self)
            else:
                return visitor.visitChildren(self)




    def share(self):

        localctx = ReqBlockParser.ShareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.DONT_SHARE or _la==ReqBlockParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 965
                self.match(ReqBlockParser.NUMBER)
                self.state = 966
                self.class_or_credit()


            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 969
                self.expression(0)


            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 972
                self.tag()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ReqBlockParser.STANDALONE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalone" ):
                listener.enterStandalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalone" ):
                listener.exitStandalone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalone" ):
                return visitor.visitStandalone(self)
            else:
                return visitor.visitChildren(self)




    def standalone(self):

        localctx = ReqBlockParser.StandaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_standalone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(ReqBlockParser.STANDALONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ReqBlockParser.STRING, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = ReqBlockParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(ReqBlockParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = ReqBlockParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(ReqBlockParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(ReqBlockParser.TAG, 0)

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag" ):
                listener.enterTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag" ):
                listener.exitTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTag" ):
                return visitor.visitTag(self)
            else:
                return visitor.visitChildren(self)




    def tag(self):

        localctx = ReqBlockParser.TagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(ReqBlockParser.TAG)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.EQ:
                self.state = 982
                self.match(ReqBlockParser.EQ)
                self.state = 983
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (ReqBlockParser.NUMBER - 77)) | (1 << (ReqBlockParser.CATALOG_NUMBER - 77)) | (1 << (ReqBlockParser.SYMBOL - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ReqBlockParser.UNDER, 0)

        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def class_or_credit(self):
            return self.getTypedRuleContext(ReqBlockParser.Class_or_creditContext,0)


        def course_list(self):
            return self.getTypedRuleContext(ReqBlockParser.Course_listContext,0)


        def display(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.DisplayContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.DisplayContext,i)


        def proxy_advice(self):
            return self.getTypedRuleContext(ReqBlockParser.Proxy_adviceContext,0)


        def label(self):
            return self.getTypedRuleContext(ReqBlockParser.LabelContext,0)


        def getRuleIndex(self):
            return ReqBlockParser.RULE_under

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnder" ):
                listener.enterUnder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnder" ):
                listener.exitUnder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnder" ):
                return visitor.visitUnder(self)
            else:
                return visitor.visitChildren(self)




    def under(self):

        localctx = ReqBlockParser.UnderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_under)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(ReqBlockParser.UNDER)
            self.state = 987
            self.match(ReqBlockParser.NUMBER)
            self.state = 988
            self.class_or_credit()
            self.state = 989
            self.course_list()
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ReqBlockParser.DISPLAY:
                self.state = 990
                self.display()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.PROXY_ADVICE:
                self.state = 996
                self.proxy_advice()


            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ReqBlockParser.LABEL:
                self.state = 999
                self.label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def WITH(self):
            return self.getToken(ReqBlockParser.WITH, 0)

        def expression(self):
            return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = ReqBlockParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(ReqBlockParser.LP)
            self.state = 1003
            self.match(ReqBlockParser.WITH)
            self.state = 1004
            self.expression(0)
            self.state = 1005
            self.match(ReqBlockParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_course(self):
            return self.getTypedRuleContext(ReqBlockParser.Full_courseContext,0)


        def discipline(self):
            return self.getTypedRuleContext(ReqBlockParser.DisciplineContext,0)


        def NUMBER(self):
            return self.getToken(ReqBlockParser.NUMBER, 0)

        def QUESTION_MARK(self):
            return self.getToken(ReqBlockParser.QUESTION_MARK, 0)

        def SYMBOL(self):
            return self.getToken(ReqBlockParser.SYMBOL, 0)

        def string(self):
            return self.getTypedRuleContext(ReqBlockParser.StringContext,0)


        def CATALOG_NUMBER(self):
            return self.getToken(ReqBlockParser.CATALOG_NUMBER, 0)

        def LP(self):
            return self.getToken(ReqBlockParser.LP, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ReqBlockParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ReqBlockParser.ExpressionContext,i)


        def RP(self):
            return self.getToken(ReqBlockParser.RP, 0)

        def NONCOURSE(self):
            return self.getToken(ReqBlockParser.NONCOURSE, 0)

        def relational_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Relational_opContext,0)


        def logical_op(self):
            return self.getTypedRuleContext(ReqBlockParser.Logical_opContext,0)


        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ReqBlockParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1008
                self.full_course()
                pass

            elif la_ == 2:
                self.state = 1009
                self.discipline()
                pass

            elif la_ == 3:
                self.state = 1010
                self.match(ReqBlockParser.NUMBER)
                pass

            elif la_ == 4:
                self.state = 1011
                self.match(ReqBlockParser.QUESTION_MARK)
                pass

            elif la_ == 5:
                self.state = 1012
                self.match(ReqBlockParser.SYMBOL)
                pass

            elif la_ == 6:
                self.state = 1013
                self.string()
                pass

            elif la_ == 7:
                self.state = 1014
                self.match(ReqBlockParser.CATALOG_NUMBER)
                pass

            elif la_ == 8:
                self.state = 1015
                self.match(ReqBlockParser.LP)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ReqBlockParser.NONCOURSE:
                    self.state = 1016
                    self.match(ReqBlockParser.NONCOURSE)


                self.state = 1019
                self.expression(0)
                self.state = 1020
                self.match(ReqBlockParser.RP)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1037
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1035
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1024
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1025
                        self.relational_op()
                        self.state = 1026
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1028
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1029
                        self.logical_op()
                        self.state = 1030
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = ReqBlockParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1032
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1033
                        self.match(ReqBlockParser.COMMA)
                        self.state = 1034
                        self.expression(10)
                        pass

             
                self.state = 1039
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_logical_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_op" ):
                listener.enterLogical_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_op" ):
                listener.exitLogical_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_op" ):
                return visitor.visitLogical_op(self)
            else:
                return visitor.visitChildren(self)




    def logical_op(self):

        localctx = ReqBlockParser.Logical_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_logical_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ReqBlockParser.EQ, 0)

        def GE(self):
            return self.getToken(ReqBlockParser.GE, 0)

        def GT(self):
            return self.getToken(ReqBlockParser.GT, 0)

        def IS(self):
            return self.getToken(ReqBlockParser.IS, 0)

        def ISNT(self):
            return self.getToken(ReqBlockParser.ISNT, 0)

        def LE(self):
            return self.getToken(ReqBlockParser.LE, 0)

        def LT(self):
            return self.getToken(ReqBlockParser.LT, 0)

        def NE(self):
            return self.getToken(ReqBlockParser.NE, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = ReqBlockParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (ReqBlockParser.IS - 72)) | (1 << (ReqBlockParser.ISNT - 72)) | (1 << (ReqBlockParser.EQ - 72)) | (1 << (ReqBlockParser.GE - 72)) | (1 << (ReqBlockParser.GT - 72)) | (1 << (ReqBlockParser.LE - 72)) | (1 << (ReqBlockParser.LT - 72)) | (1 << (ReqBlockParser.NE - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(ReqBlockParser.COMMA, 0)

        def OR(self):
            return self.getToken(ReqBlockParser.OR, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_or" ):
                listener.enterList_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_or" ):
                listener.exitList_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_or" ):
                return visitor.visitList_or(self)
            else:
                return visitor.visitChildren(self)




    def list_or(self):

        localctx = ReqBlockParser.List_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_list_or)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.OR or _la==ReqBlockParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ReqBlockParser.PLUS, 0)

        def AND(self):
            return self.getToken(ReqBlockParser.AND, 0)

        def getRuleIndex(self):
            return ReqBlockParser.RULE_list_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_and" ):
                listener.enterList_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_and" ):
                listener.exitList_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_and" ):
                return visitor.visitList_and(self)
            else:
                return visitor.visitChildren(self)




    def list_and(self):

        localctx = ReqBlockParser.List_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_list_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not(_la==ReqBlockParser.AND or _la==ReqBlockParser.PLUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[93] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         




